
BOTterfly_NucleoF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  080112e8  080112e8  000212e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011914  08011914  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08011914  08011914  00021914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801191c  0801191c  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801191c  0801191c  0002191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011920  08011920  00021920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08011924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004920  20000334  08011c58  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  08011c58  00034c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034ae9  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c42  00000000  00000000  00064e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  0006aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  0006c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082be  00000000  00000000  0006e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c73  00000000  00000000  0007695e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f35da  00000000  00000000  0009e5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191bab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e10  00000000  00000000  00191c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000334 	.word	0x20000334
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080112d0 	.word	0x080112d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000338 	.word	0x20000338
 800020c:	080112d0 	.word	0x080112d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <Dir_Init>:
#include "BOTterfly-H/config.h"

#include <unistd.h>

uint8_t Dir_Init()
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	Dir_Ph_X = 0;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <Dir_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
	Dir_Ph_Y = 0;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <Dir_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
	Dir_X = 0;
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <Dir_Init+0x54>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	Dir_Y = 0;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <Dir_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
	Dir_Red = 0;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <Dir_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	Dir_PhasePrec = 0;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <Dir_Init+0x60>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
	Dir_Phase = 0;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <Dir_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	Dir_nbPhases = 6;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <Dir_Init+0x68>)
 8000ef0:	2206      	movs	r2, #6
 8000ef2:	701a      	strb	r2, [r3, #0]
	Dir_nbSL = 3;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <Dir_Init+0x6c>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	701a      	strb	r2, [r3, #0]
	Dir_nbSLValidees = 0;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <Dir_Init+0x70>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200048ec 	.word	0x200048ec
 8000f10:	20004424 	.word	0x20004424
 8000f14:	200048f0 	.word	0x200048f0
 8000f18:	20004908 	.word	0x20004908
 8000f1c:	20004904 	.word	0x20004904
 8000f20:	2000490c 	.word	0x2000490c
 8000f24:	20004920 	.word	0x20004920
 8000f28:	20004422 	.word	0x20004422
 8000f2c:	20004388 	.word	0x20004388
 8000f30:	20004423 	.word	0x20004423

08000f34 <Ph_Init>:
////	HAL_ADC_Stop(&hadc1);
//	return uiAnalogData;
//}

uint8_t Ph_Init()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
	//Ph_GetAverageN(Ph_Data, N_NOISE);
	Ph_GetMeasure(Ph_Data);
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <Ph_Init+0x64>)
 8000f3c:	f000 f836 	bl	8000fac <Ph_GetMeasure>
	Ph_GetMeasure(Ph_Data);
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <Ph_Init+0x64>)
 8000f42:	f000 f833 	bl	8000fac <Ph_GetMeasure>
	Ph_Angle = 0;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <Ph_Init+0x68>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
	Ph_Norma = 0;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <Ph_Init+0x6c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e00a      	b.n	8000f6e <Ph_Init+0x3a>
	{
		Ph_DataNoise[i] = Ph_Data[i];
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <Ph_Init+0x64>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f60:	4910      	ldr	r1, [pc, #64]	; (8000fa4 <Ph_Init+0x70>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < 4 ; i++)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	ddf1      	ble.n	8000f58 <Ph_Init+0x24>
	}
	printf("INITFIN PH_DataNoise : %04lu, %04lu, %04lu, %04lu\r\n", Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <Ph_Init+0x70>)
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <Ph_Init+0x70>)
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <Ph_Init+0x70>)
 8000f7e:	6898      	ldr	r0, [r3, #8]
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <Ph_Init+0x70>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	4603      	mov	r3, r0
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <Ph_Init+0x74>)
 8000f8a:	f00e fee3 	bl	800fd54 <iprintf>
	return 0;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20004378 	.word	0x20004378
 8000f9c:	20004928 	.word	0x20004928
 8000fa0:	20004924 	.word	0x20004924
 8000fa4:	200048f4 	.word	0x200048f4
 8000fa8:	080112e8 	.word	0x080112e8

08000fac <Ph_GetMeasure>:
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
}

uint8_t Ph_GetMeasure(uint32_t value[])
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	Ph_GetAverageN(value, N_MEASURE);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f83a 	bl	8001030 <Ph_GetAverageN>
	Ph_Treatment(value);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f895 	bl	80010ec <Ph_Treatment>
	//printf("PH_Data : %04lu, %04lu, %04lu, %04lu\r\n", value[0], value[1], value[2], value[3]);
	return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <Ph_GetValues>:

uint8_t Ph_GetValues(uint32_t value[])
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, Ph_DataDMA, 4);// A APPELLER POUR CHAQUE MESURE
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4914      	ldr	r1, [pc, #80]	; (8001028 <Ph_GetValues+0x5c>)
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <Ph_GetValues+0x60>)
 8000fda:	f002 fac5 	bl	8003568 <HAL_ADC_Start_DMA>
	for (int i = 0 ; i < 4 ; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e00b      	b.n	8000ffc <Ph_GetValues+0x30>
	{
		value[i] = Ph_DataDMA[i];
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	490e      	ldr	r1, [pc, #56]	; (8001028 <Ph_GetValues+0x5c>)
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ff4:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	ddf0      	ble.n	8000fe4 <Ph_GetValues+0x18>
	}
	// Inversion valeurs 0 et 3 :
	uint32_t Ph_Datatempo = value[0];
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	60bb      	str	r3, [r7, #8]
	value[0] = value[3];
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
	value[3] = Ph_Datatempo;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	330c      	adds	r3, #12
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	601a      	str	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1);
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <Ph_GetValues+0x60>)
 800101a:	f002 fbb5 	bl	8003788 <HAL_ADC_Stop_DMA>
	//return uiAnalogData;
	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20004910 	.word	0x20004910
 800102c:	20004930 	.word	0x20004930

08001030 <Ph_GetAverageN>:

uint8_t Ph_GetAverageN(uint32_t value[], int n)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	uint32_t Ph_DataTemp[4];
	for (int i = 0 ; i < 4 ; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
 800103e:	e00a      	b.n	8001056 <Ph_GetAverageN+0x26>
	{
		Ph_DataTemp[i] = 0;
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001048:	4413      	add	r3, r2
 800104a:	2200      	movs	r2, #0
 800104c:	f843 2c20 	str.w	r2, [r3, #-32]
	for (int i = 0 ; i < 4 ; i++)
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	3301      	adds	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	2b03      	cmp	r3, #3
 800105a:	ddf1      	ble.n	8001040 <Ph_GetAverageN+0x10>
	}

	for (int i = 0 ; i < n ; i++)
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	e022      	b.n	80010a8 <Ph_GetAverageN+0x78>
	{
		Ph_GetValues(value);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb2 	bl	8000fcc <Ph_GetValues>
		for (int j = 0 ; j < 4 ; j++)
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	e016      	b.n	800109c <Ph_GetAverageN+0x6c>
		{
			Ph_DataTemp[j] += value[j];
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001076:	4413      	add	r3, r2
 8001078:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	440b      	add	r3, r1
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	441a      	add	r2, r3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001090:	440b      	add	r3, r1
 8001092:	f843 2c20 	str.w	r2, [r3, #-32]
		for (int j = 0 ; j < 4 ; j++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	dde5      	ble.n	800106e <Ph_GetAverageN+0x3e>
	for (int i = 0 ; i < n ; i++)
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	3301      	adds	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	6a3a      	ldr	r2, [r7, #32]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbd8      	blt.n	8001062 <Ph_GetAverageN+0x32>
		}
	}

	for (int i = 0 ; i < 4 ; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	e011      	b.n	80010da <Ph_GetAverageN+0xaa>
	{
		value[i] = Ph_DataTemp[i] / n;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010be:	4413      	add	r3, r2
 80010c0:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4403      	add	r3, r0
 80010ce:	fbb1 f2f2 	udiv	r2, r1, r2
 80010d2:	601a      	str	r2, [r3, #0]
	for (int i = 0 ; i < 4 ; i++)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	ddea      	ble.n	80010b6 <Ph_GetAverageN+0x86>
	}
	//printf("GetAverageN : PH_Data : %lu, %lu, %lu, %lu - /%d\r\n", value[0], value[1], value[2], value[3], n);
	//return uiAnalogData;
	return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <Ph_Treatment>:

uint8_t Ph_Treatment(uint32_t value[])
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b095      	sub	sp, #84	; 0x54
 80010f0:	af0a      	add	r7, sp, #40	; 0x28
 80010f2:	6178      	str	r0, [r7, #20]
	//char * PrPrintf[50];
	uint32_t Ph_PourPrintf[4] = {value[0], value[1], value[2], value[3]};
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
			{
				value[i] = 0;
			}
		}
	}
	sprintf(Ph_toprint, "S : %04lu %04lu %04lu %04lu V : %04lu %04lu %04lu %04lu E : %04lu %04lu %04lu %04lu ", value[0], value[1], value[2], value[3], Ph_PourPrintf[0], Ph_PourPrintf[1], Ph_PourPrintf[2], Ph_PourPrintf[3], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_DataNoise[3]);
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3304      	adds	r3, #4
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	60f9      	str	r1, [r7, #12]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3308      	adds	r3, #8
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	320c      	adds	r2, #12
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	69f8      	ldr	r0, [r7, #28]
 800112a:	60b8      	str	r0, [r7, #8]
 800112c:	6a3c      	ldr	r4, [r7, #32]
 800112e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001130:	4e10      	ldr	r6, [pc, #64]	; (8001174 <Ph_Treatment+0x88>)
 8001132:	6836      	ldr	r6, [r6, #0]
 8001134:	480f      	ldr	r0, [pc, #60]	; (8001174 <Ph_Treatment+0x88>)
 8001136:	6840      	ldr	r0, [r0, #4]
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <Ph_Treatment+0x88>)
 800113c:	6880      	ldr	r0, [r0, #8]
 800113e:	6038      	str	r0, [r7, #0]
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <Ph_Treatment+0x88>)
 8001142:	68c0      	ldr	r0, [r0, #12]
 8001144:	9009      	str	r0, [sp, #36]	; 0x24
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	9008      	str	r0, [sp, #32]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	9007      	str	r0, [sp, #28]
 800114e:	9606      	str	r6, [sp, #24]
 8001150:	9505      	str	r5, [sp, #20]
 8001152:	9404      	str	r4, [sp, #16]
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	9003      	str	r0, [sp, #12]
 8001158:	9102      	str	r1, [sp, #8]
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4905      	ldr	r1, [pc, #20]	; (8001178 <Ph_Treatment+0x8c>)
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <Ph_Treatment+0x90>)
 8001166:	f00e fefd 	bl	800ff64 <siprintf>
	//return uiAnalogData;
	return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	372c      	adds	r7, #44	; 0x2c
 8001170:	46bd      	mov	sp, r7
 8001172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001174:	200048f4 	.word	0x200048f4
 8001178:	0801131c 	.word	0x0801131c
 800117c:	2000438c 	.word	0x2000438c

08001180 <Ph_GetBestAngle>:
	indice++;
	return indice;
}

int Ph_GetBestAngle(uint32_t value[])
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]

	// Ranger par max :
	//uint32_t DataPerMAX[3];
	int iMax = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e010      	b.n	80011b8 <Ph_GetBestAngle+0x38>
	{
		if (value[i] > value[iMax])
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	440b      	add	r3, r1
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d901      	bls.n	80011b2 <Ph_GetBestAngle+0x32>
		{
			iMax = i;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	61bb      	str	r3, [r7, #24]
	for (int i = 1 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes moins la première
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	ddeb      	ble.n	8001196 <Ph_GetBestAngle+0x16>
		}
	}

	if (iMax == 1) // Si le max est en face :
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d125      	bne.n	8001210 <Ph_GetBestAngle+0x90>
	{
		int dif1 = value[1] - value[0];
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3304      	adds	r3, #4
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	613b      	str	r3, [r7, #16]
		int dif2 = value[1] - value[2];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3304      	adds	r3, #4
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3308      	adds	r3, #8
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	60fb      	str	r3, [r7, #12]
		int dif = dif1 - dif2;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	60bb      	str	r3, [r7, #8]
		angle = (int)(100 * (float)((float)dif / 4095));
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001240 <Ph_GetBestAngle+0xc0>
 80011f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001244 <Ph_GetBestAngle+0xc4>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001208:	ee17 3a90 	vmov	r3, s15
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e003      	b.n	8001218 <Ph_GetBestAngle+0x98>
	}
	else
	{
		angle = Ph_GetBestAngleAncien(value);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f81d 	bl	8001250 <Ph_GetBestAngleAncien>
 8001216:	61f8      	str	r0, [r7, #28]
	}

	angle = 40 * angle / 100;
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <Ph_GetBestAngle+0xc8>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	1152      	asrs	r2, r2, #5
 800122a:	17db      	asrs	r3, r3, #31
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	61fb      	str	r3, [r7, #28]

	Ph_Angle = angle;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <Ph_GetBestAngle+0xcc>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	6013      	str	r3, [r2, #0]
	return angle;
 8001236:	69fb      	ldr	r3, [r7, #28]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	457ff000 	.word	0x457ff000
 8001244:	42c80000 	.word	0x42c80000
 8001248:	51eb851f 	.word	0x51eb851f
 800124c:	20004928 	.word	0x20004928

08001250 <Ph_GetBestAngleAncien>:

int Ph_GetBestAngleAncien(uint32_t value[])
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	 Photodiode 3 : 100
	 Entre... entre...
	 *
	 */

	int angle = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]

	//GetValues(value);

	// RECHERCHE DES 2 PREMIERS MAXIMUMS :

	int imax1 = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
	int imax2 = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
	int maxtemp = 0;//////////////////////////////////////////////////////////////////////////PB
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e012      	b.n	8001294 <Ph_GetBestAngleAncien+0x44>
	{
		if (value[i] > maxtemp)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	429a      	cmp	r2, r3
 800127c:	d907      	bls.n	800128e <Ph_GetBestAngleAncien+0x3e>
		{
			maxtemp = value[i];
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
			imax1 = i;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	61bb      	str	r3, [r7, #24]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b02      	cmp	r3, #2
 8001298:	dde9      	ble.n	800126e <Ph_GetBestAngleAncien+0x1e>
		}
	}
	maxtemp = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	e016      	b.n	80012d2 <Ph_GetBestAngleAncien+0x82>
	{
		if (i != imax1)
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d00f      	beq.n	80012cc <Ph_GetBestAngleAncien+0x7c>
		{
			if (value[i] > maxtemp)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d907      	bls.n	80012cc <Ph_GetBestAngleAncien+0x7c>
			{
				maxtemp = value[i];
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	613b      	str	r3, [r7, #16]
				imax2 = i;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	617b      	str	r3, [r7, #20]
	for (int i = 0 ; i < 3 ; i++) // On ne prend en compte que les 3 premières photodiodes
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	dde5      	ble.n	80012a4 <Ph_GetBestAngleAncien+0x54>
		}
	}

	// ASSIGNATION DE L'ANGLE :

	if (imax1 + imax2 == 2) // 0 et 2 --> Deux sources lumineuses : gauche et droite
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4413      	add	r3, r2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d10a      	bne.n	80012f8 <Ph_GetBestAngleAncien+0xa8>
	{
		if (imax1 > imax2)
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dd02      	ble.n	80012f0 <Ph_GetBestAngleAncien+0xa0>
		{
			angle = 100;
 80012ea:	2364      	movs	r3, #100	; 0x64
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e059      	b.n	80013a4 <Ph_GetBestAngleAncien+0x154>
		}
		else
		{
			angle = -100;
 80012f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e055      	b.n	80013a4 <Ph_GetBestAngleAncien+0x154>
		}
	}
	else // Milieu avec côté (On considère qu'on a le max1 à gauche et le max2 au milieu)
	{
		if (value[imax1] <= value[imax2] + DELTA_A) // Très proches (à 100 points près)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	440b      	add	r3, r1
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3364      	adds	r3, #100	; 0x64
 800130e:	429a      	cmp	r2, r3
 8001310:	d803      	bhi.n	800131a <Ph_GetBestAngleAncien+0xca>
		{//A
			angle = -50;
 8001312:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e02b      	b.n	8001372 <Ph_GetBestAngleAncien+0x122>
		}
		else
		{
			if (((4095 - DELTA_B) <= value[imax1]) && (value[imax1] <= 4095))
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f640 7236 	movw	r2, #3894	; 0xf36
 8001328:	4293      	cmp	r3, r2
 800132a:	d90b      	bls.n	8001344 <Ph_GetBestAngleAncien+0xf4>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800133a:	d203      	bcs.n	8001344 <Ph_GetBestAngleAncien+0xf4>
			{//B
				angle = -100;
 800133c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e016      	b.n	8001372 <Ph_GetBestAngleAncien+0x122>
			}
			else
			{//C
				angle = -(int)(100 * (value[imax1] - value[imax2]) / value[imax1]);
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	440b      	add	r3, r1
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	fb02 f203 	mul.w	r2, r2, r3
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	440b      	add	r3, r1
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	425b      	negs	r3, r3
 8001370:	61fb      	str	r3, [r7, #28]
			}
		}

		// TRANSPOSITION DE L'ANGLE EN FONCTION DES POSITION DES MAX :
		if ((imax1 == 0) || (imax2 == 0)) // Sur la gauche
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <Ph_GetBestAngleAncien+0x12e>
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d108      	bne.n	8001390 <Ph_GetBestAngleAncien+0x140>
		{
			if (imax1 == 1) // Max au milieu
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10f      	bne.n	80013a4 <Ph_GetBestAngleAncien+0x154>
			{
				angle = -100 - angle;
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	61fb      	str	r3, [r7, #28]
			if (imax1 == 1) // Max au milieu
 800138e:	e009      	b.n	80013a4 <Ph_GetBestAngleAncien+0x154>
				// On est bon
			}
		}
		else // Sur la droite
		{
			if (imax1 == 1) // Max au  milieu
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d103      	bne.n	800139e <Ph_GetBestAngleAncien+0x14e>
			{
				angle = 100 + angle;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3364      	adds	r3, #100	; 0x64
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	e002      	b.n	80013a4 <Ph_GetBestAngleAncien+0x154>
			}
			else // Max à droite
			{
				angle = -angle;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	425b      	negs	r3, r3
 80013a2:	61fb      	str	r3, [r7, #28]
	//	strcat(toprint, "\r\n");
	//	char tprnt[50];
	//	sprintf(tprnt, " Angle : %d", angle);
	//	strcat(toprint, tprnt);

	return angle;
 80013a4:	69fb      	ldr	r3, [r7, #28]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	0000      	movs	r0, r0
 80013b4:	0000      	movs	r0, r0
	...

080013b8 <Ph_GetNorma>:

int Ph_GetNorma(uint32_t value[])
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	/*uint32_t Ph_DataTemp[3];
	for (int i = 0 ; i < 3 ; i++)
	{
		Ph_DataTemp[i] = value[i] - Ph_DataNoise[i];
	}*/
	int max = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
	for (int i = 1 ; i < 3 ; i++)
 80013c4:	2301      	movs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	e010      	b.n	80013ec <Ph_GetNorma+0x34>
	{
		if (/*Ph_DataTemp*/value[i] > /*Ph_DataTemp*/value[max])
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	440b      	add	r3, r1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d901      	bls.n	80013e6 <Ph_GetNorma+0x2e>
		{
			max = i;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	60fb      	str	r3, [r7, #12]
	for (int i = 1 ; i < 3 ; i++)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	ddeb      	ble.n	80013ca <Ph_GetNorma+0x12>
		}
	}
	Ph_Max_Tr = /*Ph_DataTemp*/value[max];
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <Ph_GetNorma+0xb0>)
 80013fe:	6013      	str	r3, [r2, #0]
	//Ph_Norma = (uint32_t)(4791.6*exp(-0.001*value[max]));
	Ph_Norma = -134.5 * log(Ph_Max_Tr) + 1135.5;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <Ph_GetNorma+0xb0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f895 	bl	8000534 <__aeabi_ui2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ec43 2b10 	vmov	d0, r2, r3
 8001412:	f00f fd51 	bl	8010eb8 <log>
 8001416:	ec51 0b10 	vmov	r0, r1, d0
 800141a:	a30f      	add	r3, pc, #60	; (adr r3, 8001458 <Ph_GetNorma+0xa0>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f902 	bl	8000628 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	a30c      	add	r3, pc, #48	; (adr r3, 8001460 <Ph_GetNorma+0xa8>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7fe ff43 	bl	80002bc <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fba3 	bl	8000b88 <__aeabi_d2uiz>
 8001442:	4603      	mov	r3, r0
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <Ph_GetNorma+0xb4>)
 8001446:	6013      	str	r3, [r2, #0]
	return Ph_Norma;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <Ph_GetNorma+0xb4>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	f3af 8000 	nop.w
 8001458:	00000000 	.word	0x00000000
 800145c:	c060d000 	.word	0xc060d000
 8001460:	00000000 	.word	0x00000000
 8001464:	4091be00 	.word	0x4091be00
 8001468:	2000492c 	.word	0x2000492c
 800146c:	20004924 	.word	0x20004924

08001470 <RGB_Init_SetTimer>:
 */

#include "BOTterfly-H/rgb_sensor.h"


uint8_t RGB_Init_SetTimer(RGB_struct* rgbSensor, TIM_HandleTypeDef *htim, uint32_t Channel){
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	rgbSensor->Timer_Handle = htim;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	601a      	str	r2, [r3, #0]
	rgbSensor->Timer_Channel = Channel;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	605a      	str	r2, [r3, #4]

	//HAL_TIM_IC_Start_IT(rgbSensor->Timer_Handle, rgbSensor->Timer_Channel);
	return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <RGB_Init_SetParamGPIOs>:

uint8_t RGB_Init_SetParamGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutputEnable_GPIOx, uint16_t OutputEnable_GPIO_Pin,
		GPIO_TypeDef* LED_GPIOx, uint16_t LED_GPIO_Pin){
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutputEnable_GPIOx = OutputEnable_GPIOx;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	609a      	str	r2, [r3, #8]
	rgbSensor->OutputEnable_GPIO_Pin = OutputEnable_GPIO_Pin;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	819a      	strh	r2, [r3, #12]
	rgbSensor->LED_GPIOx = LED_GPIOx;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	611a      	str	r2, [r3, #16]
	rgbSensor->LED_GPIO_Pin = LED_GPIO_Pin;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8b3a      	ldrh	r2, [r7, #24]
 80014bc:	829a      	strh	r2, [r3, #20]

	return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <RGB_Init_SetOutFreqGPIOs>:

uint8_t RGB_Init_SetOutFreqGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* OutFreq1_GPIOx, uint16_t OutFreq1_GPIO_Pin,
		GPIO_TypeDef* OutFreq2_GPIOx, uint16_t OutFreq2_GPIO_Pin){
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4613      	mov	r3, r2
 80014da:	80fb      	strh	r3, [r7, #6]
	rgbSensor->OutFreq1_GPIOx = OutFreq1_GPIOx;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	619a      	str	r2, [r3, #24]
	rgbSensor->OutFreq1_GPIO_Pin = OutFreq1_GPIO_Pin;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	839a      	strh	r2, [r3, #28]
	rgbSensor->OutFreq2_GPIOx = OutFreq2_GPIOx;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	621a      	str	r2, [r3, #32]
	rgbSensor->OutFreq2_GPIO_Pin = OutFreq2_GPIO_Pin;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8b3a      	ldrh	r2, [r7, #24]
 80014f2:	849a      	strh	r2, [r3, #36]	; 0x24

	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <RGB_Init_SetColorFilterGPIOs>:

uint8_t RGB_Init_SetColorFilterGPIOs(RGB_struct* rgbSensor, GPIO_TypeDef* ColorFilter1_GPIOx, uint16_t ColorFilter1_GPIO_Pin,
		GPIO_TypeDef* ColorFilter2_GPIOx, uint16_t ColorFilter2_GPIO_Pin){
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4613      	mov	r3, r2
 8001510:	80fb      	strh	r3, [r7, #6]
	rgbSensor->ColorFilter1_GPIOx = ColorFilter1_GPIOx;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
	rgbSensor->ColorFilter1_GPIO_Pin = ColorFilter1_GPIO_Pin;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rgbSensor->ColorFilter2_GPIOx = ColorFilter2_GPIOx;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
	rgbSensor->ColorFilter2_GPIO_Pin = ColorFilter2_GPIO_Pin;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8b3a      	ldrh	r2, [r7, #24]
 8001528:	869a      	strh	r2, [r3, #52]	; 0x34

	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <RGB_Init>:

uint8_t RGB_Init(RGB_struct* rgbSensor){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

	rgbSensor->it.flag = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rgbSensor->it.isFirstCaptured = 0;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rgbSensor->it.icVal1 = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rgbSensor->it.icVal2 = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rgbSensor->it.difference = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rgbSensor->it.frequency = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	64da      	str	r2, [r3, #76]	; 0x4c

	// OE : Output Enable -> DISABLE
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_SET);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6898      	ldr	r0, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	899b      	ldrh	r3, [r3, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	f003 fad6 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001580:	20c8      	movs	r0, #200	; 0xc8
 8001582:	f001 ff89 	bl	8003498 <HAL_Delay>

	RGB_SetOFscaling(rgbSensor, RGB_OF_02_RANGE);
 8001586:	2102      	movs	r1, #2
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f889 	bl	80016a0 <RGB_SetOFscaling>
	RGB_SetFilter(rgbSensor, RGB_RED);
 800158e:	2100      	movs	r1, #0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f819 	bl	80015c8 <RGB_SetFilter>

	// Turn on the LEDs to lights the floor
	HAL_GPIO_WritePin(rgbSensor->LED_GPIOx, rgbSensor->LED_GPIO_Pin, GPIO_PIN_SET);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6918      	ldr	r0, [r3, #16]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	8a9b      	ldrh	r3, [r3, #20]
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	f003 fac3 	bl	8004b2c <HAL_GPIO_WritePin>

	// OE : Output Enable -> ENABLE
	HAL_Delay(200);
 80015a6:	20c8      	movs	r0, #200	; 0xc8
 80015a8:	f001 ff76 	bl	8003498 <HAL_Delay>
	HAL_GPIO_WritePin(rgbSensor->OutputEnable_GPIOx, rgbSensor->OutputEnable_GPIO_Pin, GPIO_PIN_RESET);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6898      	ldr	r0, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	899b      	ldrh	r3, [r3, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	f003 fab8 	bl	8004b2c <HAL_GPIO_WritePin>

	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <RGB_SetFilter>:

uint8_t RGB_SetFilter(RGB_struct* rgbSensor, uint8_t color){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

	switch(color)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d84e      	bhi.n	800167c <RGB_SetFilter+0xb4>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <RGB_SetFilter+0x1c>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	08001617 	.word	0x08001617
 80015ec:	08001639 	.word	0x08001639
 80015f0:	0800165b 	.word	0x0800165b
	{
	case RGB_RED:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	f003 fa94 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	f003 fa8c 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 8001614:	e039      	b.n	800168a <RGB_SetFilter+0xc2>
	case RGB_BLUE:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_RESET);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	f003 fa83 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	f003 fa7b 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 8001636:	e028      	b.n	800168a <RGB_SetFilter+0xc2>
	case RGB_GREEN:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	f003 fa72 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_SET);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	f003 fa6a 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 8001658:	e017      	b.n	800168a <RGB_SetFilter+0xc2>
	case RGB_CLEAR:
		HAL_GPIO_WritePin(rgbSensor->ColorFilter1_GPIOx, rgbSensor->ColorFilter1_GPIO_Pin, GPIO_PIN_SET);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001662:	2201      	movs	r2, #1
 8001664:	4619      	mov	r1, r3
 8001666:	f003 fa61 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->ColorFilter2_GPIOx, rgbSensor->ColorFilter2_GPIO_Pin, GPIO_PIN_RESET);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	f003 fa59 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 800167a:	e006      	b.n	800168a <RGB_SetFilter+0xc2>
	default:
		status = RGB_ERROR_FILTER;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setFilter : %d\r\n", status);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <RGB_SetFilter+0xd4>)
 8001686:	f00e fb65 	bl	800fd54 <iprintf>
	}
	rgbSensor->it.colorFilter = color;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	return status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	080113b4 	.word	0x080113b4

080016a0 <RGB_SetOFscaling>:

uint8_t RGB_SetOFscaling(RGB_struct* rgbSensor, uint8_t scale){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	uint8_t status = RGB_ERROR_NONE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

	switch(scale)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d03d      	beq.n	8001732 <RGB_SetOFscaling+0x92>
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	dc4c      	bgt.n	8001754 <RGB_SetOFscaling+0xb4>
 80016ba:	2b14      	cmp	r3, #20
 80016bc:	d028      	beq.n	8001710 <RGB_SetOFscaling+0x70>
 80016be:	2b14      	cmp	r3, #20
 80016c0:	dc48      	bgt.n	8001754 <RGB_SetOFscaling+0xb4>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <RGB_SetOFscaling+0x2c>
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d011      	beq.n	80016ee <RGB_SetOFscaling+0x4e>
 80016ca:	e043      	b.n	8001754 <RGB_SetOFscaling+0xb4>
	{
	case 0:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6998      	ldr	r0, [r3, #24]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8b9b      	ldrh	r3, [r3, #28]
 80016d4:	2200      	movs	r2, #0
 80016d6:	4619      	mov	r1, r3
 80016d8:	f003 fa28 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a18      	ldr	r0, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	f003 fa20 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 80016ec:	e039      	b.n	8001762 <RGB_SetOFscaling+0xc2>
	case 2:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_RESET);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6998      	ldr	r0, [r3, #24]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8b9b      	ldrh	r3, [r3, #28]
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	f003 fa17 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a18      	ldr	r0, [r3, #32]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001706:	2201      	movs	r2, #1
 8001708:	4619      	mov	r1, r3
 800170a:	f003 fa0f 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 800170e:	e028      	b.n	8001762 <RGB_SetOFscaling+0xc2>
	case 20:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6998      	ldr	r0, [r3, #24]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	8b9b      	ldrh	r3, [r3, #28]
 8001718:	2201      	movs	r2, #1
 800171a:	4619      	mov	r1, r3
 800171c:	f003 fa06 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_RESET);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a18      	ldr	r0, [r3, #32]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	f003 f9fe 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 8001730:	e017      	b.n	8001762 <RGB_SetOFscaling+0xc2>
	case 100:
		HAL_GPIO_WritePin(rgbSensor->OutFreq1_GPIOx, rgbSensor->OutFreq1_GPIO_Pin, GPIO_PIN_SET);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6998      	ldr	r0, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	8b9b      	ldrh	r3, [r3, #28]
 800173a:	2201      	movs	r2, #1
 800173c:	4619      	mov	r1, r3
 800173e:	f003 f9f5 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(rgbSensor->OutFreq2_GPIOx, rgbSensor->OutFreq2_GPIO_Pin, GPIO_PIN_SET);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a18      	ldr	r0, [r3, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800174a:	2201      	movs	r2, #1
 800174c:	4619      	mov	r1, r3
 800174e:	f003 f9ed 	bl	8004b2c <HAL_GPIO_WritePin>
		break;
 8001752:	e006      	b.n	8001762 <RGB_SetOFscaling+0xc2>
	default:
		status = RGB_ERROR_OF_SCALING;
 8001754:	2302      	movs	r3, #2
 8001756:	73fb      	strb	r3, [r7, #15]
		printf("RGB - Error setOFscaling : %d\r\n", status);
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	4619      	mov	r1, r3
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <RGB_SetOFscaling+0xcc>)
 800175e:	f00e faf9 	bl	800fd54 <iprintf>
	}

	return status;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	080113d4 	.word	0x080113d4

08001770 <RGB_IsTheFloorRed>:


uint8_t RGB_IsTheFloorRed(RGB_struct* rgbSensor){
 8001770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	uint8_t status = RGB_ERROR_NONE;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]

	rgbSensor->it.difference = rgbSensor->it.icVal2 - rgbSensor->it.icVal1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	float refClock = RGB_APBCLOCK/(RGB_PRESCALER);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <RGB_IsTheFloorRed+0x18c>)
 8001796:	60bb      	str	r3, [r7, #8]
	rgbSensor->it.frequency = refClock/rgbSensor->it.difference;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80017aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	switch(rgbSensor->it.colorFilter)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d01c      	beq.n	80017f8 <RGB_IsTheFloorRed+0x88>
 80017be:	2b02      	cmp	r3, #2
 80017c0:	dc46      	bgt.n	8001850 <RGB_IsTheFloorRed+0xe0>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <RGB_IsTheFloorRed+0x5c>
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d02c      	beq.n	8001824 <RGB_IsTheFloorRed+0xb4>
 80017ca:	e041      	b.n	8001850 <RGB_IsTheFloorRed+0xe0>
	{
	case RGB_RED:
		rgbSensor->red = (uint16_t)rgbSensor->it.frequency;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 3a90 	vmov	r3, s15
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	86da      	strh	r2, [r3, #54]	; 0x36
		rgbSensor->it.colorFilter = RGB_GREEN;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fee9 	bl	80015c8 <RGB_SetFilter>
		break;
 80017f6:	e02e      	b.n	8001856 <RGB_IsTheFloorRed+0xe6>
	case RGB_GREEN:
		rgbSensor->green = (uint16_t)rgbSensor->it.frequency;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80017fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	871a      	strh	r2, [r3, #56]	; 0x38
		rgbSensor->it.colorFilter = RGB_BLUE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181a:	4619      	mov	r1, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fed3 	bl	80015c8 <RGB_SetFilter>
		break;
 8001822:	e018      	b.n	8001856 <RGB_IsTheFloorRed+0xe6>
	case RGB_BLUE:
		rgbSensor->blue = (uint16_t)rgbSensor->it.frequency;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800182a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182e:	ee17 3a90 	vmov	r3, s15
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	875a      	strh	r2, [r3, #58]	; 0x3a
		rgbSensor->it.colorFilter = RGB_RED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		RGB_SetFilter(rgbSensor, rgbSensor->it.colorFilter);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff febd 	bl	80015c8 <RGB_SetFilter>
		break;
 800184e:	e002      	b.n	8001856 <RGB_IsTheFloorRed+0xe6>
	default:
		printf("RGB - Error setFilter\r\n");
 8001850:	482b      	ldr	r0, [pc, #172]	; (8001900 <RGB_IsTheFloorRed+0x190>)
 8001852:	f00e fb05 	bl	800fe60 <puts>
	}
	if((rgbSensor->red >= (1.5*rgbSensor->green)) & (rgbSensor->red >= (1.5*rgbSensor->blue))){
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe7a 	bl	8000554 <__aeabi_i2d>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe73 	bl	8000554 <__aeabi_i2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <RGB_IsTheFloorRed+0x194>)
 8001874:	f7fe fed8 	bl	8000628 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	2101      	movs	r1, #1
 800187e:	460e      	mov	r6, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7ff f956 	bl	8000b34 <__aeabi_dcmpge>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <RGB_IsTheFloorRed+0x122>
 800188e:	2300      	movs	r3, #0
 8001890:	461e      	mov	r6, r3
 8001892:	b2f6      	uxtb	r6, r6
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe5b 	bl	8000554 <__aeabi_i2d>
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe54 	bl	8000554 <__aeabi_i2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <RGB_IsTheFloorRed+0x194>)
 80018b2:	f7fe feb9 	bl	8000628 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	2101      	movs	r1, #1
 80018bc:	4688      	mov	r8, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7ff f937 	bl	8000b34 <__aeabi_dcmpge>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <RGB_IsTheFloorRed+0x160>
 80018cc:	2300      	movs	r3, #0
 80018ce:	4698      	mov	r8, r3
 80018d0:	fa5f f388 	uxtb.w	r3, r8
 80018d4:	4033      	ands	r3, r6
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <RGB_IsTheFloorRed+0x176>
		rgbSensor->isFloorRed = 1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80018e4:	e003      	b.n	80018ee <RGB_IsTheFloorRed+0x17e>
	}else{
		rgbSensor->isFloorRed = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018fa:	bf00      	nop
 80018fc:	49742400 	.word	0x49742400
 8001900:	080113f4 	.word	0x080113f4
 8001904:	3ff80000 	.word	0x3ff80000

08001908 <TOF_Init_SetI2C>:
 *      Author: jerem
 */

#include "BOTterfly-H/tof_sensor.h"

uint8_t TOF_Init_SetI2C(VL53L0X_Dev_t* device, I2C_HandleTypeDef *hi2c, uint8_t I2cAddr){
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	4613      	mov	r3, r2
 8001914:	71fb      	strb	r3, [r7, #7]
	device->I2cHandle = hi2c;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	device->I2cAddr = I2cAddr;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173

	return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <TOF_Init_SetGPIOs>:

uint8_t TOF_Init_SetGPIOs(VL53L0X_Dev_t* device, GPIO_TypeDef* XSHUT_GPIOx, uint16_t XSHUT_GPIO_Pin,
		GPIO_TypeDef* EXTI_GPIOx, uint16_t EXTI_GPIO_Pin){
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	80fb      	strh	r3, [r7, #6]
	device->XSHUT_GPIOx = XSHUT_GPIOx;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	device->XSHUT_GPIO_Pin = XSHUT_GPIO_Pin;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
	device->EXTI_GPIOx = EXTI_GPIOx;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	device->EXTI_GPIO_Pin = EXTI_GPIO_Pin;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8b3a      	ldrh	r2, [r7, #24]
 8001960:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170

	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <TOF_Init_SetEXTI>:

uint8_t TOF_Init_SetEXTI(VL53L0X_Dev_t* device, IRQn_Type EXTIx_IRQn){
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
	device->EXTI_IRQn = EXTIx_IRQn;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172

	return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <TOF_Init>:

uint8_t TOF_Init(VL53L0X_Dev_t* device){
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<TOF_nbOfSensor; i++){
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e021      	b.n	80019e6 <TOF_Init+0x52>
		device[i].I2cDevAddr = 0x52;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	2252      	movs	r2, #82	; 0x52
 80019b2:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
		device[i].comms_speed_khz = 400;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019c8:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
		device[i].comms_type = 1;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	ddda      	ble.n	80019a2 <TOF_Init+0xe>
	}

	// Disable the interruptions
	// Useful for the INITIALIZATION FLOW before changing the address of each device
	for(int i=0; i<TOF_nbOfSensor; i++){
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	e024      	b.n	8001a3c <TOF_Init+0xa8>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_RESET);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8001a16:	2200      	movs	r2, #0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f003 f887 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_NVIC_DisableIRQ(device[i].EXTI_IRQn);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f993 3172 	ldrsb.w	r3, [r3, #370]	; 0x172
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fad7 	bl	8003fe4 <HAL_NVIC_DisableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	ddd7      	ble.n	80019f2 <TOF_Init+0x5e>
	}
	HAL_Delay(100);
 8001a42:	2064      	movs	r0, #100	; 0x64
 8001a44:	f001 fd28 	bl	8003498 <HAL_Delay>

	// INITIALIZATION FLOW
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e046      	b.n	8001adc <TOF_Init+0x148>
		HAL_GPIO_WritePin(device[i].XSHUT_GPIOx, device[i].XSHUT_GPIO_Pin, GPIO_PIN_SET);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8001a72:	2201      	movs	r2, #1
 8001a74:	4619      	mov	r1, r3
 8001a76:	f003 f859 	bl	8004b2c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a7a:	2064      	movs	r0, #100	; 0x64
 8001a7c:	f001 fd0c 	bl	8003498 <HAL_Delay>
		TOF_InitializationFlow(&device[i], (uint8_t)device[i].EXTI_GPIOx->ODR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	18d0      	adds	r0, r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f000 f824 	bl	8001af2 <TOF_InitializationFlow>
		TOF_SetDeviceAddr(&device[i], device[i].I2cAddr);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	18d0      	adds	r0, r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
 8001aca:	4619      	mov	r1, r3
 8001acc:	f000 f8d8 	bl	8001c80 <TOF_SetDeviceAddr>
		HAL_Delay(100);
 8001ad0:	2064      	movs	r0, #100	; 0x64
 8001ad2:	f001 fce1 	bl	8003498 <HAL_Delay>
	for(int i=0; i<TOF_nbOfSensor; i++){
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	ddb5      	ble.n	8001a4e <TOF_Init+0xba>

	// Enable the Interruptions
//	for(int i=0; i<TOF_nbOfSensor; i++){
//		HAL_NVIC_EnableIRQ(device[i].EXTI_IRQn);
//	}
	HAL_Delay(100);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f001 fcd8 	bl	8003498 <HAL_Delay>

	return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <TOF_InitializationFlow>:

uint8_t TOF_InitializationFlow(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70fb      	strb	r3, [r7, #3]
	// Device initialization (~ 40ms)
	TOF_Initialization(device);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f81a 	bl	8001b38 <TOF_Initialization>
	HAL_Delay(50);
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	f001 fcc7 	bl	8003498 <HAL_Delay>

	// Calibration data loading (~ 1ms)
	TOF_Calibration(device);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f842 	bl	8001b94 <TOF_Calibration>
	HAL_Delay(5);
 8001b10:	2005      	movs	r0, #5
 8001b12:	f001 fcc1 	bl	8003498 <HAL_Delay>

	// System settings (~ 1ms)
	TOF_Settings(device, interruptPin);
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f87a 	bl	8001c14 <TOF_Settings>
	HAL_Delay(5);
 8001b20:	2005      	movs	r0, #5
 8001b22:	f001 fcb9 	bl	8003498 <HAL_Delay>

	VL53L0X_StartMeasurement(device);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f008 f936 	bl	8009d98 <VL53L0X_StartMeasurement>

	return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <TOF_Initialization>:

uint8_t TOF_Initialization(VL53L0X_Dev_t* device){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

	// DataInit
	if((status = VL53L0X_DataInit(device)) != VL53L0X_ERROR_NONE){
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f007 f8cb 	bl	8008ce0 <VL53L0X_DataInit>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <TOF_Initialization+0x2a>
		printf("ToF - Error DataInit : %d\r\n", status);
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <TOF_Initialization+0x54>)
 8001b5a:	f00e f8fb 	bl	800fd54 <iprintf>
		return 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <TOF_Initialization+0x4a>
	}

	// StaticInit
	if((status = VL53L0X_StaticInit(device)) != VL53L0X_ERROR_NONE){
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f007 fa20 	bl	8008fa8 <VL53L0X_StaticInit>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <TOF_Initialization+0x48>
		printf("ToF - Error StaticInit : %d\r\n", status);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <TOF_Initialization+0x58>)
 8001b78:	f00e f8ec 	bl	800fd54 <iprintf>
		return 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <TOF_Initialization+0x4a>
	}

	return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	0801140c 	.word	0x0801140c
 8001b90:	08011428 	.word	0x08011428

08001b94 <TOF_Calibration>:
// SPADs calibration
static uint32_t *refSpadCount; static uint8_t *isApertureSpads;
// Temperature calibration
static uint8_t *pVhvSettings; static uint8_t *pPhaseCal;

uint8_t TOF_Calibration(VL53L0X_Dev_t* device){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]

	// SPADs calibration (~ 10ms)
	if((status = VL53L0X_PerformRefSpadManagement(device, refSpadCount, isApertureSpads)) != VL53L0X_ERROR_NONE){
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <TOF_Calibration+0x68>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <TOF_Calibration+0x6c>)
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f008 fd06 	bl	800a5bc <VL53L0X_PerformRefSpadManagement>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <TOF_Calibration+0x34>
		printf("ToF - Error SPADs calibration : %d\r\n", status);
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <TOF_Calibration+0x70>)
 8001bc0:	f00e f8c8 	bl	800fd54 <iprintf>
		return 1;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e014      	b.n	8001bf2 <TOF_Calibration+0x5e>
	}

	// Temperature calibration (~ 40ms)
	if((status = VL53L0X_PerformRefCalibration(device, pVhvSettings, pPhaseCal)) != VL53L0X_ERROR_NONE){
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <TOF_Calibration+0x74>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <TOF_Calibration+0x78>)
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f008 f864 	bl	8009ca0 <VL53L0X_PerformRefCalibration>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <TOF_Calibration+0x5c>
		printf("ToF - Error Temperature calibration : %d\r\n", status);
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	4619      	mov	r1, r3
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <TOF_Calibration+0x7c>)
 8001be8:	f00e f8b4 	bl	800fd54 <iprintf>
		return 1;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <TOF_Calibration+0x5e>
	}

	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000350 	.word	0x20000350
 8001c00:	20000354 	.word	0x20000354
 8001c04:	08011448 	.word	0x08011448
 8001c08:	20000358 	.word	0x20000358
 8001c0c:	2000035c 	.word	0x2000035c
 8001c10:	08011470 	.word	0x08011470

08001c14 <TOF_Settings>:

uint8_t TOF_Settings(VL53L0X_Dev_t* device, uint8_t interruptPin){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

	// Device mode
	if((status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING)) != VL53L0X_ERROR_NONE){
 8001c24:	2101      	movs	r1, #1
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f007 fbd0 	bl	80093cc <VL53L0X_SetDeviceMode>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <TOF_Settings+0x30>
		printf("ToF - Error SetDeviceMode : %d\r\n", status);
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480f      	ldr	r0, [pc, #60]	; (8001c78 <TOF_Settings+0x64>)
 8001c3c:	f00e f88a 	bl	800fd54 <iprintf>
		return 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e015      	b.n	8001c70 <TOF_Settings+0x5c>
	}

	// Set GPIO : Pour interruptions
	status = VL53L0X_SetGpioConfig(device, interruptPin, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
 8001c44:	78f9      	ldrb	r1, [r7, #3]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f008 faf8 	bl	800a244 <VL53L0X_SetGpioConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
	if(status != VL53L0X_ERROR_NONE){
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <TOF_Settings+0x5a>
		printf("ToF - Error SetGPIO : %d %d\r\n",status,interruptPin);
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <TOF_Settings+0x68>)
 8001c66:	f00e f875 	bl	800fd54 <iprintf>
		return 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <TOF_Settings+0x5c>
	}

	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(Dev, InterMeasurementPeriodMilliSeconds)

	return 0;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0801149c 	.word	0x0801149c
 8001c7c:	080114c0 	.word	0x080114c0

08001c80 <TOF_SetDeviceAddr>:

uint8_t TOF_SetDeviceAddr(VL53L0X_Dev_t* device, uint8_t new_addr){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

	if((status = VL53L0X_SetDeviceAddress(device, new_addr)) != VL53L0X_ERROR_NONE){
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f007 f80a 	bl	8008cae <VL53L0X_SetDeviceAddress>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <TOF_SetDeviceAddr+0x32>
		printf("ToF - Error SetDeviceAddress : %d\r\n", status);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <TOF_SetDeviceAddr+0x44>)
 8001caa:	f00e f853 	bl	800fd54 <iprintf>
		return 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e004      	b.n	8001cbc <TOF_SetDeviceAddr+0x3c>
	}
	device->I2cDevAddr = new_addr;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	080114e0 	.word	0x080114e0

08001cc8 <TOF_SetDistance_mm>:
	printf("ProductRevisionMinor : %d\r\n", deviceInfo->ProductRevisionMinor);

	return 0;
}

uint8_t TOF_SetDistance_mm(VL53L0X_Dev_t* device){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	VL53L0X_GetRangingMeasurementData(device, &VL53L0X_RangingMeasurementData); // ~ 460us
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f008 f960 	bl	8009f9c <VL53L0X_GetRangingMeasurementData>
	device->rangeMillimeter = VL53L0X_RangingMeasurementData.RangeMilliMeter; // ~ 0.25us
 8001cdc:	8aba      	ldrh	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	VL53L0X_ClearInterruptMask(device, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY); // ~ 295us
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f008 fc06 	bl	800a4f8 <VL53L0X_ClearInterruptMask>

	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d0c:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <MX_ADC1_Init+0xf0>)
 8001d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d10:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <MX_ADC1_Init+0xf4>)
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d58:	4822      	ldr	r0, [pc, #136]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d5a:	f001 fbc1 	bl	80034e0 <HAL_ADC_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d64:	f000 fe48 	bl	80029f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	481a      	ldr	r0, [pc, #104]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d7a:	f001 fd7d 	bl	8003878 <HAL_ADC_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d84:	f000 fe38 	bl	80029f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	4619      	mov	r1, r3
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001d96:	f001 fd6f 	bl	8003878 <HAL_ADC_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001da0:	f000 fe2a 	bl	80029f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001da4:	230e      	movs	r3, #14
 8001da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001da8:	2303      	movs	r3, #3
 8001daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001db2:	f001 fd61 	bl	8003878 <HAL_ADC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001dbc:	f000 fe1c 	bl	80029f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4805      	ldr	r0, [pc, #20]	; (8001de4 <MX_ADC1_Init+0xec>)
 8001dce:	f001 fd53 	bl	8003878 <HAL_ADC_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001dd8:	f000 fe0e 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20004930 	.word	0x20004930
 8001de8:	40012000 	.word	0x40012000
 8001dec:	0f000001 	.word	0x0f000001

08001df0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	; (8001f00 <HAL_ADC_MspInit+0x110>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d171      	bne.n	8001ef6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a2c      	ldr	r2, [pc, #176]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_ADC_MspInit+0x114>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = PH_ADC0_Pin|PH_ADC1_Pin;
 8001e66:	2330      	movs	r3, #48	; 0x30
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4823      	ldr	r0, [pc, #140]	; (8001f08 <HAL_ADC_MspInit+0x118>)
 8001e7a:	f002 fcc3 	bl	8004804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PH_ADC2_Pin|PH_ADC3_Pin;
 8001e7e:	2330      	movs	r3, #48	; 0x30
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e82:	2303      	movs	r3, #3
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	481e      	ldr	r0, [pc, #120]	; (8001f0c <HAL_ADC_MspInit+0x11c>)
 8001e92:	f002 fcb7 	bl	8004804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_ADC_MspInit+0x124>)
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001ec0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ecc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001edc:	f002 f890 	bl	8004000 <HAL_DMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ee6:	f000 fd87 	bl	80029f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <HAL_ADC_MspInit+0x120>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40012000 	.word	0x40012000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	20004978 	.word	0x20004978
 8001f14:	40026410 	.word	0x40026410

08001f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_DMA_Init+0x3c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <MX_DMA_Init+0x3c>)
 8001f28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_DMA_Init+0x3c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	2038      	movs	r0, #56	; 0x38
 8001f40:	f002 f826 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f44:	2038      	movs	r0, #56	; 0x38
 8001f46:	f002 f83f 	bl	8003fc8 <HAL_NVIC_EnableIRQ>

}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <vApplicationGetIdleTaskMemory+0x30>)
 8001f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000360 	.word	0x20000360
 8001f88:	20000414 	.word	0x20000414

08001f8c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MX_FREERTOS_Init+0x30>)
 8001f94:	1d3c      	adds	r4, r7, #4
 8001f96:	461d      	mov	r5, r3
 8001f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00b fbe1 	bl	800d770 <osThreadCreate>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <MX_FREERTOS_Init+0x34>)
 8001fb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	080115c0 	.word	0x080115c0
 8001fc0:	200049d8 	.word	0x200049d8

08001fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f00b fc1b 	bl	800d808 <osDelay>
 8001fd2:	e7fb      	b.n	8001fcc <StartDefaultTask+0x8>

08001fd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <MX_GPIO_Init+0x190>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <MX_GPIO_Init+0x190>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <MX_GPIO_Init+0x190>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b56      	ldr	r3, [pc, #344]	; (8002164 <MX_GPIO_Init+0x190>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a55      	ldr	r2, [pc, #340]	; (8002164 <MX_GPIO_Init+0x190>)
 8002010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <MX_GPIO_Init+0x190>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <MX_GPIO_Init+0x190>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <MX_GPIO_Init+0x190>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <MX_GPIO_Init+0x190>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b48      	ldr	r3, [pc, #288]	; (8002164 <MX_GPIO_Init+0x190>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a47      	ldr	r2, [pc, #284]	; (8002164 <MX_GPIO_Init+0x190>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b45      	ldr	r3, [pc, #276]	; (8002164 <MX_GPIO_Init+0x190>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTG_IN2_Pin|MOTG_IN1_Pin|TOF_XSHUT2_Pin|TOF_XSHUT1_Pin
 800205a:	2200      	movs	r2, #0
 800205c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002060:	4841      	ldr	r0, [pc, #260]	; (8002168 <MX_GPIO_Init+0x194>)
 8002062:	f002 fd63 	bl	8004b2c <HAL_GPIO_WritePin>
                          |TOF_XSHUT0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_S3_Pin|RGB_S2_Pin|RGB_S1_Pin|RGB_S0_Pin
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 800206c:	483f      	ldr	r0, [pc, #252]	; (800216c <MX_GPIO_Init+0x198>)
 800206e:	f002 fd5d 	bl	8004b2c <HAL_GPIO_WritePin>
                          |MOTD_IN3_Pin|MOTD_IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_LED_Pin|RGB_OE_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002078:	483d      	ldr	r0, [pc, #244]	; (8002170 <MX_GPIO_Init+0x19c>)
 800207a:	f002 fd57 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002084:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4834      	ldr	r0, [pc, #208]	; (8002168 <MX_GPIO_Init+0x194>)
 8002096:	f002 fbb5 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTG_IN2_Pin|MOTG_IN1_Pin|TOF_XSHUT2_Pin|TOF_XSHUT1_Pin
 800209a:	f240 13c3 	movw	r3, #451	; 0x1c3
 800209e:	617b      	str	r3, [r7, #20]
                          |TOF_XSHUT0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	482d      	ldr	r0, [pc, #180]	; (8002168 <MX_GPIO_Init+0x194>)
 80020b4:	f002 fba6 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_GPIOI1_Pin|TOF_GPIOI2_Pin;
 80020b8:	2303      	movs	r3, #3
 80020ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	4827      	ldr	r0, [pc, #156]	; (800216c <MX_GPIO_Init+0x198>)
 80020ce:	f002 fb99 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RGB_S3_Pin|RGB_S2_Pin|RGB_S1_Pin|RGB_S0_Pin
 80020d2:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 80020d6:	617b      	str	r3, [r7, #20]
                          |MOTD_IN3_Pin|MOTD_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4820      	ldr	r0, [pc, #128]	; (800216c <MX_GPIO_Init+0x198>)
 80020ec:	f002 fb8a 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RGB_LED_Pin|RGB_OE_Pin;
 80020f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <MX_GPIO_Init+0x19c>)
 800210a:	f002 fb7b 	bl	8004804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIOI0_Pin;
 800210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002114:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_GPIOI0_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4812      	ldr	r0, [pc, #72]	; (8002170 <MX_GPIO_Init+0x19c>)
 8002126:	f002 fb6d 	bl	8004804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2105      	movs	r1, #5
 800212e:	2006      	movs	r0, #6
 8002130:	f001 ff2e 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002134:	2006      	movs	r0, #6
 8002136:	f001 ff47 	bl	8003fc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2007      	movs	r0, #7
 8002140:	f001 ff26 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002144:	2007      	movs	r0, #7
 8002146:	f001 ff3f 	bl	8003fc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2105      	movs	r1, #5
 800214e:	2028      	movs	r0, #40	; 0x28
 8002150:	f001 ff1e 	bl	8003f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002154:	2028      	movs	r0, #40	; 0x28
 8002156:	f001 ff37 	bl	8003fc8 <HAL_NVIC_EnableIRQ>

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40020800 	.word	0x40020800
 800216c:	40020400 	.word	0x40020400
 8002170:	40020000 	.word	0x40020000

08002174 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <MX_I2C1_Init+0x50>)
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <MX_I2C1_Init+0x54>)
 800217c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_I2C1_Init+0x50>)
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <MX_I2C1_Init+0x58>)
 8002182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_I2C1_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_I2C1_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_I2C1_Init+0x50>)
 8002192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <MX_I2C1_Init+0x50>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <MX_I2C1_Init+0x50>)
 80021b2:	f002 fced 	bl	8004b90 <HAL_I2C_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021bc:	f000 fc1c 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200049dc 	.word	0x200049dc
 80021c8:	40005400 	.word	0x40005400
 80021cc:	00061a80 	.word	0x00061a80

080021d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_I2C_MspInit+0x84>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d12b      	bne.n	800224a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_I2C_MspInit+0x88>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a17      	ldr	r2, [pc, #92]	; (8002258 <HAL_I2C_MspInit+0x88>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_I2C_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800220e:	23c0      	movs	r3, #192	; 0xc0
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002212:	2312      	movs	r3, #18
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221e:	2304      	movs	r3, #4
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <HAL_I2C_MspInit+0x8c>)
 800222a:	f002 faeb 	bl	8004804 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_I2C_MspInit+0x88>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_I2C_MspInit+0x88>)
 8002238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_I2C_MspInit+0x88>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	; 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40005400 	.word	0x40005400
 8002258:	40023800 	.word	0x40023800
 800225c:	40020400 	.word	0x40020400

08002260 <vTaskSync>:

/*
 * Gère la commande des moteurs en fonction des données des capteurs
 */
void vTaskSync(void* p)
{
 8002260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002264:	b094      	sub	sp, #80	; 0x50
 8002266:	af0c      	add	r7, sp, #48	; 0x30
 8002268:	6178      	str	r0, [r7, #20]
	int i =0;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]

	printf("Wait BTN \r\n");
 800226e:	4854      	ldr	r0, [pc, #336]	; (80023c0 <vTaskSync+0x160>)
 8002270:	f00d fdf6 	bl	800fe60 <puts>
	while(BTN == 0){
 8002274:	bf00      	nop
 8002276:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <vTaskSync+0x164>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0fb      	beq.n	8002276 <vTaskSync+0x16>
		// Ne rien faire
	}
	printf("Start ! \r\n");
 800227e:	4852      	ldr	r0, [pc, #328]	; (80023c8 <vTaskSync+0x168>)
 8002280:	f00d fdee 	bl	800fe60 <puts>

	while(1){

		printf("TOF=%04d %04d %04d PH=%04ld %04ld %04ld NOISE=%04ld %04ld %04ld NORME=%04lu ANGLE=%03ld RED=%d XY=(%05d;%05d) MOY=%04ld\r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter, Ph_Data[0], Ph_Data[1], Ph_Data[2], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_Norma, Ph_Angle, Dir_Red, Dir_X, Dir_Y, Ph_Max_Tr);
 8002284:	4b51      	ldr	r3, [pc, #324]	; (80023cc <vTaskSync+0x16c>)
 8002286:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 800228a:	469c      	mov	ip, r3
 800228c:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <vTaskSync+0x16c>)
 800228e:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 8002292:	469e      	mov	lr, r3
 8002294:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <vTaskSync+0x16c>)
 8002296:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 800229a:	4698      	mov	r8, r3
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <vTaskSync+0x170>)
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	4b4b      	ldr	r3, [pc, #300]	; (80023d0 <vTaskSync+0x170>)
 80022a2:	6858      	ldr	r0, [r3, #4]
 80022a4:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <vTaskSync+0x170>)
 80022a6:	689c      	ldr	r4, [r3, #8]
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <vTaskSync+0x174>)
 80022aa:	681d      	ldr	r5, [r3, #0]
 80022ac:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <vTaskSync+0x174>)
 80022ae:	685e      	ldr	r6, [r3, #4]
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <vTaskSync+0x174>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <vTaskSync+0x178>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	4b47      	ldr	r3, [pc, #284]	; (80023dc <vTaskSync+0x17c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <vTaskSync+0x180>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <vTaskSync+0x184>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	603a      	str	r2, [r7, #0]
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <vTaskSync+0x188>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b46      	ldr	r3, [pc, #280]	; (80023ec <vTaskSync+0x18c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80022d8:	920a      	str	r2, [sp, #40]	; 0x28
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	9209      	str	r2, [sp, #36]	; 0x24
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	9208      	str	r2, [sp, #32]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	9307      	str	r3, [sp, #28]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	9206      	str	r2, [sp, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	9305      	str	r3, [sp, #20]
 80022ee:	9604      	str	r6, [sp, #16]
 80022f0:	9503      	str	r5, [sp, #12]
 80022f2:	9402      	str	r4, [sp, #8]
 80022f4:	9001      	str	r0, [sp, #4]
 80022f6:	9100      	str	r1, [sp, #0]
 80022f8:	4643      	mov	r3, r8
 80022fa:	4672      	mov	r2, lr
 80022fc:	4661      	mov	r1, ip
 80022fe:	483c      	ldr	r0, [pc, #240]	; (80023f0 <vTaskSync+0x190>)
 8002300:	f00d fd28 	bl	800fd54 <iprintf>

		if(i%20 == 0){
 8002304:	69f9      	ldr	r1, [r7, #28]
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <vTaskSync+0x194>)
 8002308:	fb83 2301 	smull	r2, r3, r3, r1
 800230c:	10da      	asrs	r2, r3, #3
 800230e:	17cb      	asrs	r3, r1, #31
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	1aca      	subs	r2, r1, r3
 800231c:	2a00      	cmp	r2, #0
 800231e:	d107      	bne.n	8002330 <vTaskSync+0xd0>
			xSemaphoreGive(semBinary_CMD);
 8002320:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <vTaskSync+0x198>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	f00b fc29 	bl	800db80 <xQueueGenericSend>
 800232e:	e040      	b.n	80023b2 <vTaskSync+0x152>
		}else if(i%20 == 12){
 8002330:	69f9      	ldr	r1, [r7, #28]
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <vTaskSync+0x194>)
 8002334:	fb83 2301 	smull	r2, r3, r3, r1
 8002338:	10da      	asrs	r2, r3, #3
 800233a:	17cb      	asrs	r3, r1, #31
 800233c:	1ad2      	subs	r2, r2, r3
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	1aca      	subs	r2, r1, r3
 8002348:	2a0c      	cmp	r2, #12
 800234a:	d107      	bne.n	800235c <vTaskSync+0xfc>
			xSemaphoreGive(semBinary_TOF);
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <vTaskSync+0x19c>)
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	2300      	movs	r3, #0
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	f00b fc13 	bl	800db80 <xQueueGenericSend>
 800235a:	e02a      	b.n	80023b2 <vTaskSync+0x152>
		}else if(i%20 == 4){
 800235c:	69f9      	ldr	r1, [r7, #28]
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <vTaskSync+0x194>)
 8002360:	fb83 2301 	smull	r2, r3, r3, r1
 8002364:	10da      	asrs	r2, r3, #3
 8002366:	17cb      	asrs	r3, r1, #31
 8002368:	1ad2      	subs	r2, r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	1aca      	subs	r2, r1, r3
 8002374:	2a04      	cmp	r2, #4
 8002376:	d107      	bne.n	8002388 <vTaskSync+0x128>
			xSemaphoreGive(semBinary_Ph);
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <vTaskSync+0x1a0>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	f00b fbfd 	bl	800db80 <xQueueGenericSend>
 8002386:	e014      	b.n	80023b2 <vTaskSync+0x152>
		}else if(i%20 == 8){
 8002388:	69f9      	ldr	r1, [r7, #28]
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <vTaskSync+0x194>)
 800238c:	fb83 2301 	smull	r2, r3, r3, r1
 8002390:	10da      	asrs	r2, r3, #3
 8002392:	17cb      	asrs	r3, r1, #31
 8002394:	1ad2      	subs	r2, r2, r3
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	1aca      	subs	r2, r1, r3
 80023a0:	2a08      	cmp	r2, #8
 80023a2:	d106      	bne.n	80023b2 <vTaskSync+0x152>
			xSemaphoreGive(semBinary_RGB);
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <vTaskSync+0x1a4>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	f00b fbe7 	bl	800db80 <xQueueGenericSend>
		}

		i++;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]

		vTaskDelay(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f00c f89f 	bl	800e4fc <vTaskDelay>
		printf("TOF=%04d %04d %04d PH=%04ld %04ld %04ld NOISE=%04ld %04ld %04ld NORME=%04lu ANGLE=%03ld RED=%d XY=(%05d;%05d) MOY=%04ld\r\n",TOF_Sensor[0].rangeMillimeter,TOF_Sensor[1].rangeMillimeter,TOF_Sensor[2].rangeMillimeter, Ph_Data[0], Ph_Data[1], Ph_Data[2], Ph_DataNoise[0], Ph_DataNoise[1], Ph_DataNoise[2], Ph_Norma, Ph_Angle, Dir_Red, Dir_X, Dir_Y, Ph_Max_Tr);
 80023be:	e761      	b.n	8002284 <vTaskSync+0x24>
 80023c0:	080115dc 	.word	0x080115dc
 80023c4:	20000614 	.word	0x20000614
 80023c8:	080115e8 	.word	0x080115e8
 80023cc:	20004478 	.word	0x20004478
 80023d0:	20004378 	.word	0x20004378
 80023d4:	200048f4 	.word	0x200048f4
 80023d8:	20004924 	.word	0x20004924
 80023dc:	20004928 	.word	0x20004928
 80023e0:	20004904 	.word	0x20004904
 80023e4:	200048f0 	.word	0x200048f0
 80023e8:	20004908 	.word	0x20004908
 80023ec:	2000492c 	.word	0x2000492c
 80023f0:	080115f4 	.word	0x080115f4
 80023f4:	66666667 	.word	0x66666667
 80023f8:	20004a30 	.word	0x20004a30
 80023fc:	20004a50 	.word	0x20004a50
 8002400:	20004a48 	.word	0x20004a48
 8002404:	20004a34 	.word	0x20004a34

08002408 <vTaskControl>:
	}
}


void vTaskControl(void * p)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(semBinary_CMD,portMAX_DELAY);
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <vTaskControl+0x18>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	4618      	mov	r0, r3
 800241a:	f00b fcaf 	bl	800dd7c <xQueueSemaphoreTake>
 800241e:	e7f7      	b.n	8002410 <vTaskControl+0x8>
 8002420:	20004a30 	.word	0x20004a30

08002424 <vTaskToF>:
 * TOF_Sensor[0].rangeMillimeter
 * TOF_Sensor[1].rangeMillimeter
 * TOF_Sensor[2].rangeMillimeter
 */
void vTaskToF(void * p)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_TOF_1 = uxTaskGetStackHighWaterMark(NULL);
 800242c:	2000      	movs	r0, #0
 800242e:	f00c fc73 	bl	800ed18 <uxTaskGetStackHighWaterMark>
 8002432:	4603      	mov	r3, r0
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <vTaskToF+0x60>)
 8002436:	6013      	str	r3, [r2, #0]

	for(int i=0; i<TOF_nbOfSensor; i++){
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e010      	b.n	8002460 <vTaskToF+0x3c>
		HAL_NVIC_EnableIRQ(TOF_Sensor[i].EXTI_IRQn);
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <vTaskToF+0x64>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	f503 73b9 	add.w	r3, r3, #370	; 0x172
 8002450:	f993 3000 	ldrsb.w	r3, [r3]
 8002454:	4618      	mov	r0, r3
 8002456:	f001 fdb7 	bl	8003fc8 <HAL_NVIC_EnableIRQ>
	for(int i=0; i<TOF_nbOfSensor; i++){
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b02      	cmp	r3, #2
 8002464:	ddeb      	ble.n	800243e <vTaskToF+0x1a>
	}

	while(1){
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <vTaskToF+0x68>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f04f 31ff 	mov.w	r1, #4294967295
 800246e:	4618      	mov	r0, r3
 8002470:	f00b fc84 	bl	800dd7c <xQueueSemaphoreTake>
		//			if(TOF_Sensor[i].it.flag){
		//				TOF_SetDistance_mm(&TOF_Sensor[i]);
		//				TOF_Sensor[i].it.flag = 0;
		//			}
		//		}
		uxHighWaterMark_TOF_2 = uxTaskGetStackHighWaterMark(NULL);
 8002474:	2000      	movs	r0, #0
 8002476:	f00c fc4f 	bl	800ed18 <uxTaskGetStackHighWaterMark>
 800247a:	4603      	mov	r3, r0
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <vTaskToF+0x6c>)
 800247e:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_TOF,portMAX_DELAY);
 8002480:	e7f1      	b.n	8002466 <vTaskToF+0x42>
 8002482:	bf00      	nop
 8002484:	20004a38 	.word	0x20004a38
 8002488:	20004478 	.word	0x20004478
 800248c:	20004a50 	.word	0x20004a50
 8002490:	20004a44 	.word	0x20004a44

08002494 <vTaskPhotodiodes>:
	}
}


void vTaskPhotodiodes(void * p)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	// Orientation
	//vTaskDelay(5);
	//Ph_Init();

	while(1){
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <vTaskPhotodiodes+0x2c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00b fc69 	bl	800dd7c <xQueueSemaphoreTake>

		Ph_GetMeasure(Ph_Data);
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <vTaskPhotodiodes+0x30>)
 80024ac:	f7fe fd7e 	bl	8000fac <Ph_GetMeasure>
		//printf("--PH_DataNoise : %04lu, %04lu, %04lu\r\n", Ph_Data[0], Ph_Data[1], Ph_Data[2]);
		Ph_GetBestAngle(Ph_Data);
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <vTaskPhotodiodes+0x30>)
 80024b2:	f7fe fe65 	bl	8001180 <Ph_GetBestAngle>
		Ph_GetNorma(Ph_Data);
 80024b6:	4803      	ldr	r0, [pc, #12]	; (80024c4 <vTaskPhotodiodes+0x30>)
 80024b8:	f7fe ff7e 	bl	80013b8 <Ph_GetNorma>
		xSemaphoreTake(semBinary_Ph,portMAX_DELAY);
 80024bc:	e7ee      	b.n	800249c <vTaskPhotodiodes+0x8>
 80024be:	bf00      	nop
 80024c0:	20004a48 	.word	0x20004a48
 80024c4:	20004378 	.word	0x20004378

080024c8 <vTaskCouleur>:
 * Réalise les mesures de couleur
 * Indique si le sol est rouge avec la variable globale :
 * RGB_Sensor.isFloorRed
 */
void vTaskCouleur(void * p)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	uxHighWaterMark_RGB_1 = uxTaskGetStackHighWaterMark(NULL);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f00c fc21 	bl	800ed18 <uxTaskGetStackHighWaterMark>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a11      	ldr	r2, [pc, #68]	; (8002520 <vTaskCouleur+0x58>)
 80024da:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(RGB_Sensor.Timer_Handle, RGB_Sensor.Timer_Channel);
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <vTaskCouleur+0x5c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <vTaskCouleur+0x5c>)
 80024e2:	6852      	ldr	r2, [r2, #4]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 f9ec 	bl	80068c4 <HAL_TIM_IC_Start_IT>

	//HAL_GPIO_WritePin(RGB_Sensor.LED_GPIOx, RGB_Sensor.LED_GPIO_Pin, RESET);

	while(1){
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <vTaskCouleur+0x60>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	4618      	mov	r0, r3
 80024f6:	f00b fc41 	bl	800dd7c <xQueueSemaphoreTake>

		//printf("vTask_RGB \r\n");

		if(RGB_Sensor.it.flag){
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <vTaskCouleur+0x5c>)
 80024fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <vTaskCouleur+0x4a>
			// Bloc traitement IT : 10.15 us
			RGB_IsTheFloorRed(&RGB_Sensor);
 8002504:	4807      	ldr	r0, [pc, #28]	; (8002524 <vTaskCouleur+0x5c>)
 8002506:	f7ff f933 	bl	8001770 <RGB_IsTheFloorRed>
			RGB_Sensor.it.flag = 0;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <vTaskCouleur+0x5c>)
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			//
		}
		uxHighWaterMark_RGB_2 = uxTaskGetStackHighWaterMark(NULL);
 8002512:	2000      	movs	r0, #0
 8002514:	f00c fc00 	bl	800ed18 <uxTaskGetStackHighWaterMark>
 8002518:	4603      	mov	r3, r0
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <vTaskCouleur+0x64>)
 800251c:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(semBinary_RGB,portMAX_DELAY);
 800251e:	e7e5      	b.n	80024ec <vTaskCouleur+0x24>
 8002520:	20004a3c 	.word	0x20004a3c
 8002524:	20004428 	.word	0x20004428
 8002528:	20004a34 	.word	0x20004a34
 800252c:	20004a4c 	.word	0x20004a4c

08002530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t xHandle = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253a:	f000 ff6b 	bl	8003414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800253e:	f000 f945 	bl	80027cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002542:	f7ff fd47 	bl	8001fd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002546:	f000 fec1 	bl	80032cc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800254a:	f000 fbef 	bl	8002d2c <MX_TIM1_Init>
  MX_TIM2_Init();
 800254e:	f000 fc99 	bl	8002e84 <MX_TIM2_Init>
  MX_DMA_Init();
 8002552:	f7ff fce1 	bl	8001f18 <MX_DMA_Init>
  MX_ADC1_Init();
 8002556:	f7ff fbcf 	bl	8001cf8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800255a:	f000 fce7 	bl	8002f2c <MX_TIM3_Init>
  MX_I2C1_Init();
 800255e:	f7ff fe09 	bl	8002174 <MX_I2C1_Init>
  MX_TIM8_Init();
 8002562:	f000 fd37 	bl	8002fd4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

	printf("\r\n --------------- BOTterfly --------------- \r\n");
 8002566:	4878      	ldr	r0, [pc, #480]	; (8002748 <main+0x218>)
 8002568:	f00d fc7a 	bl	800fe60 <puts>

	// INITIALISATION DES CAPTEURS ET DU MOTEUR :
	printf("Initialization \r\n");
 800256c:	4877      	ldr	r0, [pc, #476]	; (800274c <main+0x21c>)
 800256e:	f00d fc77 	bl	800fe60 <puts>

	// Bloc TOF_Init : 1735.410150 ms
	TOF_Init_SetI2C(&TOF_Sensor[0], &hi2c1, 0x55);
 8002572:	2255      	movs	r2, #85	; 0x55
 8002574:	4976      	ldr	r1, [pc, #472]	; (8002750 <main+0x220>)
 8002576:	4877      	ldr	r0, [pc, #476]	; (8002754 <main+0x224>)
 8002578:	f7ff f9c6 	bl	8001908 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[0], TOF_XSHUT0_GPIO_Port, TOF_XSHUT0_Pin, TOF_GPIOI0_GPIO_Port, TOF_GPIOI0_Pin);
 800257c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4b75      	ldr	r3, [pc, #468]	; (8002758 <main+0x228>)
 8002584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002588:	4974      	ldr	r1, [pc, #464]	; (800275c <main+0x22c>)
 800258a:	4872      	ldr	r0, [pc, #456]	; (8002754 <main+0x224>)
 800258c:	f7ff f9d2 	bl	8001934 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[0], TOF_GPIOI0_EXTI_IRQn);
 8002590:	2128      	movs	r1, #40	; 0x28
 8002592:	4870      	ldr	r0, [pc, #448]	; (8002754 <main+0x224>)
 8002594:	f7ff f9ed 	bl	8001972 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[1], &hi2c1, 0x58);
 8002598:	2258      	movs	r2, #88	; 0x58
 800259a:	496d      	ldr	r1, [pc, #436]	; (8002750 <main+0x220>)
 800259c:	4870      	ldr	r0, [pc, #448]	; (8002760 <main+0x230>)
 800259e:	f7ff f9b3 	bl	8001908 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[1], TOF_XSHUT1_GPIO_Port, TOF_XSHUT1_Pin, TOF_GPIOI1_GPIO_Port, TOF_GPIOI1_Pin);
 80025a2:	2301      	movs	r3, #1
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <main+0x234>)
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	496c      	ldr	r1, [pc, #432]	; (800275c <main+0x22c>)
 80025ac:	486c      	ldr	r0, [pc, #432]	; (8002760 <main+0x230>)
 80025ae:	f7ff f9c1 	bl	8001934 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[1], TOF_GPIOI1_EXTI_IRQn);
 80025b2:	2106      	movs	r1, #6
 80025b4:	486a      	ldr	r0, [pc, #424]	; (8002760 <main+0x230>)
 80025b6:	f7ff f9dc 	bl	8001972 <TOF_Init_SetEXTI>

	TOF_Init_SetI2C(&TOF_Sensor[2], &hi2c1, 0x5b);
 80025ba:	225b      	movs	r2, #91	; 0x5b
 80025bc:	4964      	ldr	r1, [pc, #400]	; (8002750 <main+0x220>)
 80025be:	486a      	ldr	r0, [pc, #424]	; (8002768 <main+0x238>)
 80025c0:	f7ff f9a2 	bl	8001908 <TOF_Init_SetI2C>
	TOF_Init_SetGPIOs(&TOF_Sensor[2], TOF_XSHUT2_GPIO_Port, TOF_XSHUT2_Pin, TOF_GPIOI2_GPIO_Port, TOF_GPIOI2_Pin);
 80025c4:	2302      	movs	r3, #2
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <main+0x234>)
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	4963      	ldr	r1, [pc, #396]	; (800275c <main+0x22c>)
 80025ce:	4866      	ldr	r0, [pc, #408]	; (8002768 <main+0x238>)
 80025d0:	f7ff f9b0 	bl	8001934 <TOF_Init_SetGPIOs>
	TOF_Init_SetEXTI(&TOF_Sensor[2], TOF_GPIOI2_EXTI_IRQn);
 80025d4:	2107      	movs	r1, #7
 80025d6:	4864      	ldr	r0, [pc, #400]	; (8002768 <main+0x238>)
 80025d8:	f7ff f9cb 	bl	8001972 <TOF_Init_SetEXTI>

	TOF_Init(TOF_Sensor);
 80025dc:	485d      	ldr	r0, [pc, #372]	; (8002754 <main+0x224>)
 80025de:	f7ff f9d9 	bl	8001994 <TOF_Init>
	//

	// Bloc RGB_Init : 401.954350 ms
	RGB_Init_SetTimer(&RGB_Sensor, &htim3, TIM_CHANNEL_1);
 80025e2:	2200      	movs	r2, #0
 80025e4:	4961      	ldr	r1, [pc, #388]	; (800276c <main+0x23c>)
 80025e6:	4862      	ldr	r0, [pc, #392]	; (8002770 <main+0x240>)
 80025e8:	f7fe ff42 	bl	8001470 <RGB_Init_SetTimer>

	RGB_Init_SetParamGPIOs(&RGB_Sensor, RGB_OE_GPIO_Port, RGB_OE_Pin, RGB_LED_GPIO_Port, RGB_LED_Pin);
 80025ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4b59      	ldr	r3, [pc, #356]	; (8002758 <main+0x228>)
 80025f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025f8:	4957      	ldr	r1, [pc, #348]	; (8002758 <main+0x228>)
 80025fa:	485d      	ldr	r0, [pc, #372]	; (8002770 <main+0x240>)
 80025fc:	f7fe ff4b 	bl	8001496 <RGB_Init_SetParamGPIOs>
	RGB_Init_SetOutFreqGPIOs(&RGB_Sensor, RGB_S0_GPIO_Port, RGB_S0_Pin, RGB_S1_GPIO_Port, RGB_S1_Pin);
 8002600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <main+0x234>)
 8002608:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800260c:	4955      	ldr	r1, [pc, #340]	; (8002764 <main+0x234>)
 800260e:	4858      	ldr	r0, [pc, #352]	; (8002770 <main+0x240>)
 8002610:	f7fe ff5c 	bl	80014cc <RGB_Init_SetOutFreqGPIOs>
	RGB_Init_SetColorFilterGPIOs(&RGB_Sensor, RGB_S2_GPIO_Port, RGB_S2_Pin, RGB_S3_GPIO_Port, RGB_S3_Pin);
 8002614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <main+0x234>)
 800261c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002620:	4950      	ldr	r1, [pc, #320]	; (8002764 <main+0x234>)
 8002622:	4853      	ldr	r0, [pc, #332]	; (8002770 <main+0x240>)
 8002624:	f7fe ff6d 	bl	8001502 <RGB_Init_SetColorFilterGPIOs>

	RGB_Init(&RGB_Sensor);
 8002628:	4851      	ldr	r0, [pc, #324]	; (8002770 <main+0x240>)
 800262a:	f7fe ff85 	bl	8001538 <RGB_Init>

	Ph_Init();
 800262e:	f7fe fc81 	bl	8000f34 <Ph_Init>

	Dir_Init();
 8002632:	f7fe fc45 	bl	8000ec0 <Dir_Init>

	// Init Motor

	// CRÉATION DES SÉMAPHORES :
	printf("Creation Semaphore \r\n");
 8002636:	484f      	ldr	r0, [pc, #316]	; (8002774 <main+0x244>)
 8002638:	f00d fc12 	bl	800fe60 <puts>

	semBinary_CMD = xSemaphoreCreateBinary();
 800263c:	2203      	movs	r2, #3
 800263e:	2100      	movs	r1, #0
 8002640:	2001      	movs	r0, #1
 8002642:	f00b fa11 	bl	800da68 <xQueueGenericCreate>
 8002646:	4603      	mov	r3, r0
 8002648:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <main+0x248>)
 800264a:	6013      	str	r3, [r2, #0]
	semBinary_TOF = xSemaphoreCreateBinary();
 800264c:	2203      	movs	r2, #3
 800264e:	2100      	movs	r1, #0
 8002650:	2001      	movs	r0, #1
 8002652:	f00b fa09 	bl	800da68 <xQueueGenericCreate>
 8002656:	4603      	mov	r3, r0
 8002658:	4a48      	ldr	r2, [pc, #288]	; (800277c <main+0x24c>)
 800265a:	6013      	str	r3, [r2, #0]
	semBinary_Ph = xSemaphoreCreateBinary();
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	2001      	movs	r0, #1
 8002662:	f00b fa01 	bl	800da68 <xQueueGenericCreate>
 8002666:	4603      	mov	r3, r0
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <main+0x250>)
 800266a:	6013      	str	r3, [r2, #0]
	semBinary_RGB = xSemaphoreCreateBinary();
 800266c:	2203      	movs	r2, #3
 800266e:	2100      	movs	r1, #0
 8002670:	2001      	movs	r0, #1
 8002672:	f00b f9f9 	bl	800da68 <xQueueGenericCreate>
 8002676:	4603      	mov	r3, r0
 8002678:	4a42      	ldr	r2, [pc, #264]	; (8002784 <main+0x254>)
 800267a:	6013      	str	r3, [r2, #0]

	semMutex = xSemaphoreCreateMutex();
 800267c:	2001      	movs	r0, #1
 800267e:	f00b fa66 	bl	800db4e <xQueueCreateMutex>
 8002682:	4603      	mov	r3, r0
 8002684:	4a40      	ldr	r2, [pc, #256]	; (8002788 <main+0x258>)
 8002686:	6013      	str	r3, [r2, #0]

	// CRÉATION DES BOÎTES AUX LETTRES :


	// CRÉATION DES TÂCHES :
	printf("Creation Task \r\n");
 8002688:	4840      	ldr	r0, [pc, #256]	; (800278c <main+0x25c>)
 800268a:	f00d fbe9 	bl	800fe60 <puts>

	if (xTaskCreate(vTaskSync, "Sync", SYNC_STACK_SIZE, (void *)NULL, 100, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	2364      	movs	r3, #100	; 0x64
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2300      	movs	r3, #0
 8002698:	22fa      	movs	r2, #250	; 0xfa
 800269a:	493d      	ldr	r1, [pc, #244]	; (8002790 <main+0x260>)
 800269c:	483d      	ldr	r0, [pc, #244]	; (8002794 <main+0x264>)
 800269e:	f00b fdd8 	bl	800e252 <xTaskCreate>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d102      	bne.n	80026b0 <main+0x180>
	{
		printf("Task Sync Creation error : Could not allocate required memory\r\n");
 80026aa:	483b      	ldr	r0, [pc, #236]	; (8002798 <main+0x268>)
 80026ac:	f00d fbd8 	bl	800fe60 <puts>
	}
	if (xTaskCreate(vTaskControl, "Control", CMD_STACK_SIZE, (void *)NULL, 80, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2350      	movs	r3, #80	; 0x50
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2300      	movs	r3, #0
 80026ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026be:	4937      	ldr	r1, [pc, #220]	; (800279c <main+0x26c>)
 80026c0:	4837      	ldr	r0, [pc, #220]	; (80027a0 <main+0x270>)
 80026c2:	f00b fdc6 	bl	800e252 <xTaskCreate>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d102      	bne.n	80026d4 <main+0x1a4>
	{
		printf("Task Control Creation error : Could not allocate required memory\r\n");
 80026ce:	4835      	ldr	r0, [pc, #212]	; (80027a4 <main+0x274>)
 80026d0:	f00d fbc6 	bl	800fe60 <puts>
	}
	if (xTaskCreate(vTaskToF, "ToF", TOF_STACK_SIZE, (void *)NULL, 60, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	233c      	movs	r3, #60	; 0x3c
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026e2:	4931      	ldr	r1, [pc, #196]	; (80027a8 <main+0x278>)
 80026e4:	4831      	ldr	r0, [pc, #196]	; (80027ac <main+0x27c>)
 80026e6:	f00b fdb4 	bl	800e252 <xTaskCreate>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d102      	bne.n	80026f8 <main+0x1c8>
	{
		printf("Task ToF Creation error : Could not allocate required memory\r\n");
 80026f2:	482f      	ldr	r0, [pc, #188]	; (80027b0 <main+0x280>)
 80026f4:	f00d fbb4 	bl	800fe60 <puts>
	}
	if (xTaskCreate(vTaskPhotodiodes, "Photodiodes", Ph_STACK_SIZE, (void *)NULL, 40, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2328      	movs	r3, #40	; 0x28
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002706:	492b      	ldr	r1, [pc, #172]	; (80027b4 <main+0x284>)
 8002708:	482b      	ldr	r0, [pc, #172]	; (80027b8 <main+0x288>)
 800270a:	f00b fda2 	bl	800e252 <xTaskCreate>
 800270e:	4603      	mov	r3, r0
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d102      	bne.n	800271c <main+0x1ec>
	{
		printf("Task Photodiode Creation error : Could not allocate required memory\r\n");
 8002716:	4829      	ldr	r0, [pc, #164]	; (80027bc <main+0x28c>)
 8002718:	f00d fba2 	bl	800fe60 <puts>
	}
	if (xTaskCreate(vTaskCouleur, "Couleur", RGB_STACK_SIZE, (void *)NULL, 20, &xHandle) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	2314      	movs	r3, #20
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2300      	movs	r3, #0
 8002726:	2250      	movs	r2, #80	; 0x50
 8002728:	4925      	ldr	r1, [pc, #148]	; (80027c0 <main+0x290>)
 800272a:	4826      	ldr	r0, [pc, #152]	; (80027c4 <main+0x294>)
 800272c:	f00b fd91 	bl	800e252 <xTaskCreate>
 8002730:	4603      	mov	r3, r0
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d102      	bne.n	800273e <main+0x20e>
	{
		printf("Task Couleur Creation error : Could not allocate required memory\r\n");
 8002738:	4823      	ldr	r0, [pc, #140]	; (80027c8 <main+0x298>)
 800273a:	f00d fb91 	bl	800fe60 <puts>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800273e:	f7ff fc25 	bl	8001f8c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002742:	f00b f80e 	bl	800d762 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002746:	e7fe      	b.n	8002746 <main+0x216>
 8002748:	08011670 	.word	0x08011670
 800274c:	080116a0 	.word	0x080116a0
 8002750:	200049dc 	.word	0x200049dc
 8002754:	20004478 	.word	0x20004478
 8002758:	40020000 	.word	0x40020000
 800275c:	40020800 	.word	0x40020800
 8002760:	200045f4 	.word	0x200045f4
 8002764:	40020400 	.word	0x40020400
 8002768:	20004770 	.word	0x20004770
 800276c:	20004ae4 	.word	0x20004ae4
 8002770:	20004428 	.word	0x20004428
 8002774:	080116b4 	.word	0x080116b4
 8002778:	20004a30 	.word	0x20004a30
 800277c:	20004a50 	.word	0x20004a50
 8002780:	20004a48 	.word	0x20004a48
 8002784:	20004a34 	.word	0x20004a34
 8002788:	20004a40 	.word	0x20004a40
 800278c:	080116cc 	.word	0x080116cc
 8002790:	080116dc 	.word	0x080116dc
 8002794:	08002261 	.word	0x08002261
 8002798:	080116e4 	.word	0x080116e4
 800279c:	08011724 	.word	0x08011724
 80027a0:	08002409 	.word	0x08002409
 80027a4:	0801172c 	.word	0x0801172c
 80027a8:	08011770 	.word	0x08011770
 80027ac:	08002425 	.word	0x08002425
 80027b0:	08011774 	.word	0x08011774
 80027b4:	080117b4 	.word	0x080117b4
 80027b8:	08002495 	.word	0x08002495
 80027bc:	080117c0 	.word	0x080117c0
 80027c0:	08011808 	.word	0x08011808
 80027c4:	080024c9 	.word	0x080024c9
 80027c8:	08011810 	.word	0x08011810

080027cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b094      	sub	sp, #80	; 0x50
 80027d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	2234      	movs	r2, #52	; 0x34
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f00d fa57 	bl	800fc8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	4b29      	ldr	r3, [pc, #164]	; (800289c <SystemClock_Config+0xd0>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <SystemClock_Config+0xd0>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <SystemClock_Config+0xd0>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800280c:	2300      	movs	r3, #0
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <SystemClock_Config+0xd4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <SystemClock_Config+0xd4>)
 800281a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <SystemClock_Config+0xd4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800282c:	2302      	movs	r3, #2
 800282e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002830:	2301      	movs	r3, #1
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002834:	2310      	movs	r3, #16
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002838:	2302      	movs	r3, #2
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283c:	2300      	movs	r3, #0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002840:	2308      	movs	r3, #8
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002844:	2350      	movs	r3, #80	; 0x50
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002848:	2302      	movs	r3, #2
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800284c:	2302      	movs	r3, #2
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fc2d 	bl	80060b8 <HAL_RCC_OscConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002864:	f000 f8c8 	bl	80029f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002868:	230f      	movs	r3, #15
 800286a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286c:	2302      	movs	r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 f919 	bl	8005abc <HAL_RCC_ClockConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002890:	f000 f8b2 	bl	80029f8 <Error_Handler>
  }
}
 8002894:	bf00      	nop
 8002896:	3750      	adds	r7, #80	; 0x50
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_TIM_IC_CaptureCallback>:

uint8_t countTime = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	// Durée de l'IT : 1.550000us ou 1.325000us
	if(htim->Instance == RGB_Sensor.Timer_Handle->Instance)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d12f      	bne.n	800291a <HAL_TIM_IC_CaptureCallback+0x76>
	{
		if(RGB_Sensor.it.isFirstCaptured == 0){
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10e      	bne.n	80028e2 <HAL_TIM_IC_CaptureCallback+0x3e>
			icVal01 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f004 fcf6 	bl	80072bc <HAL_TIM_ReadCapturedValue>
 80028d0:	4603      	mov	r3, r0
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x84>)
 80028d6:	801a      	strh	r2, [r3, #0]
			RGB_Sensor.it.isFirstCaptured = 1;
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);

			RGB_Sensor.it.flag = 1;
		}
	}
}
 80028e0:	e01b      	b.n	800291a <HAL_TIM_IC_CaptureCallback+0x76>
			RGB_Sensor.it.icVal1 = icVal01;
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_TIM_IC_CaptureCallback+0x84>)
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			RGB_Sensor.it.icVal2 = HAL_TIM_ReadCapturedValue(htim, RGB_Sensor.Timer_Channel);
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f004 fce2 	bl	80072bc <HAL_TIM_ReadCapturedValue>
 80028f8:	4603      	mov	r3, r0
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 80028fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			RGB_Sensor.it.isFirstCaptured = 0;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			__HAL_TIM_SET_COUNTER(htim, 0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
			RGB_Sensor.it.flag = 1;
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20004428 	.word	0x20004428
 8002928:	20000616 	.word	0x20000616

0800292c <HAL_GPIO_EXTI_Callback>:


// VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
	// Durée de l'IT : 0.500000us
	if(GPIO_Pin == TOF_Sensor[0].EXTI_GPIO_Pin){
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8002938:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	429a      	cmp	r2, r3
 8002940:	d107      	bne.n	8002952 <HAL_GPIO_EXTI_Callback+0x26>
		// IT toutes les 33ms
		TOF_Sensor[0].it.flag = 1;
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
		TOF_SetDistance_mm(&TOF_Sensor[0]);
 800294a:	4815      	ldr	r0, [pc, #84]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800294c:	f7ff f9bc 	bl	8001cc8 <TOF_SetDistance_mm>
	}

	else if(GPIO_Pin == BTN_Pin){
		BTN = 1;
	}
}
 8002950:	e022      	b.n	8002998 <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == TOF_Sensor[1].EXTI_GPIO_Pin){
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8002954:	f8b3 32ec 	ldrh.w	r3, [r3, #748]	; 0x2ec
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	429a      	cmp	r2, r3
 800295c:	d107      	bne.n	800296e <HAL_GPIO_EXTI_Callback+0x42>
		TOF_Sensor[1].it.flag = 1;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8002960:	2201      	movs	r2, #1
 8002962:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
		TOF_SetDistance_mm(&TOF_Sensor[1]);
 8002966:	480f      	ldr	r0, [pc, #60]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x78>)
 8002968:	f7ff f9ae 	bl	8001cc8 <TOF_SetDistance_mm>
}
 800296c:	e014      	b.n	8002998 <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == TOF_Sensor[2].EXTI_GPIO_Pin){
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8002970:	f8b3 3468 	ldrh.w	r3, [r3, #1128]	; 0x468
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	429a      	cmp	r2, r3
 8002978:	d107      	bne.n	800298a <HAL_GPIO_EXTI_Callback+0x5e>
		TOF_Sensor[2].it.flag = 1;
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		TOF_SetDistance_mm(&TOF_Sensor[2]);
 8002982:	4809      	ldr	r0, [pc, #36]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002984:	f7ff f9a0 	bl	8001cc8 <TOF_SetDistance_mm>
}
 8002988:	e006      	b.n	8002998 <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == BTN_Pin){
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d102      	bne.n	8002998 <HAL_GPIO_EXTI_Callback+0x6c>
		BTN = 1;
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_GPIO_EXTI_Callback+0x80>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20004478 	.word	0x20004478
 80029a4:	200045f4 	.word	0x200045f4
 80029a8:	20004770 	.word	0x20004770
 80029ac:	20000614 	.word	0x20000614

080029b0 <__io_putchar>:

int __io_putchar(int ch)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80029b8:	1d39      	adds	r1, r7, #4
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	2201      	movs	r2, #1
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <__io_putchar+0x20>)
 80029c2:	f005 fa46 	bl	8007e52 <HAL_UART_Transmit>
	return ch;
 80029c6:	687b      	ldr	r3, [r7, #4]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20004bbc 	.word	0x20004bbc

080029d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029e6:	f000 fd37 	bl	8003458 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40001000 	.word	0x40001000

080029f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029fc:	b672      	cpsid	i
}
 80029fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a00:	e7fe      	b.n	8002a00 <Error_Handler+0x8>
	...

08002a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_MspInit+0x54>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <HAL_MspInit+0x54>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_MspInit+0x54>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_MspInit+0x54>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_MspInit+0x54>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_MspInit+0x54>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	210f      	movs	r1, #15
 8002a46:	f06f 0001 	mvn.w	r0, #1
 8002a4a:	f001 faa1 	bl	8003f90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	2036      	movs	r0, #54	; 0x36
 8002a72:	f001 fa8d 	bl	8003f90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a76:	2036      	movs	r0, #54	; 0x36
 8002a78:	f001 faa6 	bl	8003fc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <HAL_InitTick+0xa4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_InitTick+0xa4>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_InitTick+0xa4>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a98:	f107 0210 	add.w	r2, r7, #16
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 f924 	bl	8005cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002aa8:	f003 f8fa 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 8002aac:	4603      	mov	r3, r0
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_InitTick+0xa8>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9b      	lsrs	r3, r3, #18
 8002abc:	3b01      	subs	r3, #1
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_InitTick+0xac>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_InitTick+0xb0>)
 8002ac4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_InitTick+0xac>)
 8002ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002acc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <HAL_InitTick+0xac>)
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <HAL_InitTick+0xac>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_InitTick+0xac>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <HAL_InitTick+0xac>)
 8002ae2:	f003 fd87 	bl	80065f4 <HAL_TIM_Base_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002aec:	4806      	ldr	r0, [pc, #24]	; (8002b08 <HAL_InitTick+0xac>)
 8002aee:	f003 fdd1 	bl	8006694 <HAL_TIM_Base_Start_IT>
 8002af2:	4603      	mov	r3, r0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3730      	adds	r7, #48	; 0x30
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	431bde83 	.word	0x431bde83
 8002b08:	20004a54 	.word	0x20004a54
 8002b0c:	40001000 	.word	0x40001000

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <NMI_Handler+0x4>

08002b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <HardFault_Handler+0x4>

08002b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <MemManage_Handler+0x4>

08002b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f002 f80d 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f002 f806 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <USART2_IRQHandler+0x10>)
 8002b5e:	f005 fa0b 	bl	8007f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20004bbc 	.word	0x20004bbc

08002b6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b74:	f001 fff4 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002b78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b7c:	f001 fff0 	bl	8004b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <TIM8_CC_IRQHandler+0x10>)
 8002b8a:	f004 f869 	bl	8006c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20004a9c 	.word	0x20004a9c

08002b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <TIM6_DAC_IRQHandler+0x10>)
 8002b9e:	f004 f85f 	bl	8006c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20004a54 	.word	0x20004a54

08002bac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <DMA2_Stream0_IRQHandler+0x10>)
 8002bb2:	f001 fbbd 	bl	8004330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20004978 	.word	0x20004978

08002bc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e00a      	b.n	8002be8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bd2:	f3af 8000 	nop.w
 8002bd6:	4601      	mov	r1, r0
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	60ba      	str	r2, [r7, #8]
 8002bde:	b2ca      	uxtb	r2, r1
 8002be0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	dbf0      	blt.n	8002bd2 <_read+0x12>
	}

return len;
 8002bf0:	687b      	ldr	r3, [r7, #4]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e009      	b.n	8002c20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	60ba      	str	r2, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fecb 	bl	80029b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dbf1      	blt.n	8002c0c <_write+0x12>
	}
	return len;
 8002c28:	687b      	ldr	r3, [r7, #4]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_close>:

int _close(int file)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
	return -1;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_isatty>:

int _isatty(int file)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
	return 1;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <_sbrk+0x5c>)
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <_sbrk+0x60>)
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <_sbrk+0x64>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <_sbrk+0x68>)
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d207      	bcs.n	8002cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ccc:	f00c feae 	bl	800fa2c <__errno>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	e009      	b.n	8002cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <_sbrk+0x64>)
 8002cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20020000 	.word	0x20020000
 8002cfc:	00000400 	.word	0x00000400
 8002d00:	20000618 	.word	0x20000618
 8002d04:	20004c58 	.word	0x20004c58

08002d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <SystemInit+0x20>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <SystemInit+0x20>)
 8002d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b096      	sub	sp, #88	; 0x58
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	611a      	str	r2, [r3, #16]
 8002d5a:	615a      	str	r2, [r3, #20]
 8002d5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	2220      	movs	r2, #32
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00c ff92 	bl	800fc8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d6c:	4a44      	ldr	r2, [pc, #272]	; (8002e80 <MX_TIM1_Init+0x154>)
 8002d6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3360-1;
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d7e:	f640 521f 	movw	r2, #3359	; 0xd1f
 8002d82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d96:	4839      	ldr	r0, [pc, #228]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002d98:	f003 fc2c 	bl	80065f4 <HAL_TIM_Base_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002da2:	f7ff fe29 	bl	80029f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002db0:	4619      	mov	r1, r3
 8002db2:	4832      	ldr	r0, [pc, #200]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002db4:	f004 f9ba 	bl	800712c <HAL_TIM_ConfigClockSource>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002dbe:	f7ff fe1b 	bl	80029f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dc2:	482e      	ldr	r0, [pc, #184]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002dc4:	f003 fcd6 	bl	8006774 <HAL_TIM_PWM_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002dce:	f7ff fe13 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dde:	4619      	mov	r1, r3
 8002de0:	4826      	ldr	r0, [pc, #152]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002de2:	f004 ff07 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002dec:	f7ff fe04 	bl	80029f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df0:	2360      	movs	r3, #96	; 0x60
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e10:	2200      	movs	r2, #0
 8002e12:	4619      	mov	r1, r3
 8002e14:	4819      	ldr	r0, [pc, #100]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002e16:	f004 f8c7 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002e20:	f7ff fdea 	bl	80029f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e28:	2204      	movs	r2, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4813      	ldr	r0, [pc, #76]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002e2e:	f004 f8bb 	bl	8006fa8 <HAL_TIM_PWM_ConfigChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002e38:	f7ff fdde 	bl	80029f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002e60:	f004 ff44 	bl	8007cec <HAL_TIMEx_ConfigBreakDeadTime>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002e6a:	f7ff fdc5 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e6e:	4803      	ldr	r0, [pc, #12]	; (8002e7c <MX_TIM1_Init+0x150>)
 8002e70:	f000 f9f2 	bl	8003258 <HAL_TIM_MspPostInit>

}
 8002e74:	bf00      	nop
 8002e76:	3758      	adds	r7, #88	; 0x58
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20004b2c 	.word	0x20004b2c
 8002e80:	40010000 	.word	0x40010000

08002e84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	; 0x30
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f00c fefb 	bl	800fc8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ea0:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ea6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002ef4:	f003 fe0e 	bl	8006b14 <HAL_TIM_Encoder_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002efe:	f7ff fd7b 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <MX_TIM2_Init+0xa4>)
 8002f10:	f004 fe70 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f1a:	f7ff fd6d 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	3730      	adds	r7, #48	; 0x30
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20004b74 	.word	0x20004b74

08002f2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00c fea7 	bl	800fc8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <MX_TIM3_Init+0xa4>)
 8002f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f76:	2301      	movs	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f86:	2301      	movs	r3, #1
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	4619      	mov	r1, r3
 8002f98:	480c      	ldr	r0, [pc, #48]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002f9a:	f003 fdbb 	bl	8006b14 <HAL_TIM_Encoder_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002fa4:	f7ff fd28 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_TIM3_Init+0xa0>)
 8002fb6:	f004 fe1d 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002fc0:	f7ff fd1a 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20004ae4 	.word	0x20004ae4
 8002fd0:	40000400 	.word	0x40000400

08002fd4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fda:	f107 0310 	add.w	r3, r7, #16
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <MX_TIM8_Init+0xa4>)
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <MX_TIM8_Init+0xa8>)
 8002ff4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <MX_TIM8_Init+0xa4>)
 8002ff8:	224f      	movs	r2, #79	; 0x4f
 8002ffa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <MX_TIM8_Init+0xa4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <MX_TIM8_Init+0xa4>)
 8003004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003008:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <MX_TIM8_Init+0xa4>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <MX_TIM8_Init+0xa4>)
 8003012:	2200      	movs	r2, #0
 8003014:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <MX_TIM8_Init+0xa4>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800301c:	4816      	ldr	r0, [pc, #88]	; (8003078 <MX_TIM8_Init+0xa4>)
 800301e:	f003 fc02 	bl	8006826 <HAL_TIM_IC_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8003028:	f7ff fce6 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	4619      	mov	r1, r3
 800303a:	480f      	ldr	r0, [pc, #60]	; (8003078 <MX_TIM8_Init+0xa4>)
 800303c:	f004 fdda 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003046:	f7ff fcd7 	bl	80029f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800304a:	2300      	movs	r3, #0
 800304c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800304e:	2301      	movs	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800305a:	463b      	mov	r3, r7
 800305c:	220c      	movs	r2, #12
 800305e:	4619      	mov	r1, r3
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <MX_TIM8_Init+0xa4>)
 8003062:	f003 ff05 	bl	8006e70 <HAL_TIM_IC_ConfigChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 800306c:	f7ff fcc4 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20004a9c 	.word	0x20004a9c
 800307c:	40010400 	.word	0x40010400

08003080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <HAL_TIM_Base_MspInit+0x3c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10d      	bne.n	80030ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_TIM_Base_MspInit+0x40>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <HAL_TIM_Base_MspInit+0x40>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_TIM_Base_MspInit+0x40>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08c      	sub	sp, #48	; 0x30
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e4:	d12c      	bne.n	8003140 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	4b30      	ldr	r3, [pc, #192]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4b29      	ldr	r3, [pc, #164]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a28      	ldr	r2, [pc, #160]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCG_A_Pin|ENCG_B_Pin;
 800311e:	2303      	movs	r3, #3
 8003120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800312e:	2301      	movs	r3, #1
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f107 031c 	add.w	r3, r7, #28
 8003136:	4619      	mov	r1, r3
 8003138:	481d      	ldr	r0, [pc, #116]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800313a:	f001 fb63 	bl	8004804 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800313e:	e030      	b.n	80031a2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12b      	bne.n	80031a2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_TIM_Encoder_MspInit+0xe8>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCD_A_Pin|ENCD_B_Pin;
 8003182:	23c0      	movs	r3, #192	; 0xc0
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003192:	2302      	movs	r3, #2
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4619      	mov	r1, r3
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800319e:	f001 fb31 	bl	8004804 <HAL_GPIO_Init>
}
 80031a2:	bf00      	nop
 80031a4:	3730      	adds	r7, #48	; 0x30
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40000400 	.word	0x40000400

080031b8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM8)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_TIM_IC_MspInit+0x94>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d134      	bne.n	8003244 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_TIM_IC_MspInit+0x98>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_TIM_IC_MspInit+0x98>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_TIM_IC_MspInit+0x98>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_TIM_IC_MspInit+0x98>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_TIM_IC_MspInit+0x98>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_TIM_IC_MspInit+0x98>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = RGB_TIM_Pin;
 8003212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003224:	2303      	movs	r3, #3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RGB_TIM_GPIO_Port, &GPIO_InitStruct);
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	4619      	mov	r1, r3
 800322e:	4809      	ldr	r0, [pc, #36]	; (8003254 <HAL_TIM_IC_MspInit+0x9c>)
 8003230:	f001 fae8 	bl	8004804 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2105      	movs	r1, #5
 8003238:	202e      	movs	r0, #46	; 0x2e
 800323a:	f000 fea9 	bl	8003f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800323e:	202e      	movs	r0, #46	; 0x2e
 8003240:	f000 fec2 	bl	8003fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003244:	bf00      	nop
 8003246:	3728      	adds	r7, #40	; 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40010400 	.word	0x40010400
 8003250:	40023800 	.word	0x40023800
 8003254:	40020800 	.word	0x40020800

08003258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIM_MspPostInit+0x68>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d11e      	bne.n	80032b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_TIM_MspPostInit+0x6c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIM_MspPostInit+0x6c>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_TIM_MspPostInit+0x6c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTG_PWM_Pin|MOTD_PWM_Pin;
 8003296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800329a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	4619      	mov	r1, r3
 80032b2:	4805      	ldr	r0, [pc, #20]	; (80032c8 <HAL_TIM_MspPostInit+0x70>)
 80032b4:	f001 faa6 	bl	8004804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032b8:	bf00      	nop
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000

080032cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <MX_USART2_UART_Init+0x50>)
 80032d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032f2:	220c      	movs	r2, #12
 80032f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <MX_USART2_UART_Init+0x4c>)
 8003304:	f004 fd58 	bl	8007db8 <HAL_UART_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800330e:	f7ff fb73 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20004bbc 	.word	0x20004bbc
 800331c:	40004400 	.word	0x40004400

08003320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <HAL_UART_MspInit+0x94>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d133      	bne.n	80033aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <HAL_UART_MspInit+0x98>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_UART_MspInit+0x98>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_UART_MspInit+0x98>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <HAL_UART_MspInit+0x98>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_UART_MspInit+0x98>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_UART_MspInit+0x98>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800337a:	230c      	movs	r3, #12
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800338a:	2307      	movs	r3, #7
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	4809      	ldr	r0, [pc, #36]	; (80033bc <HAL_UART_MspInit+0x9c>)
 8003396:	f001 fa35 	bl	8004804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	2105      	movs	r1, #5
 800339e:	2026      	movs	r0, #38	; 0x26
 80033a0:	f000 fdf6 	bl	8003f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033a4:	2026      	movs	r0, #38	; 0x26
 80033a6:	f000 fe0f 	bl	8003fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033aa:	bf00      	nop
 80033ac:	3728      	adds	r7, #40	; 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40020000 	.word	0x40020000

080033c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033c6:	490e      	ldr	r1, [pc, #56]	; (8003400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033c8:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033cc:	e002      	b.n	80033d4 <LoopCopyDataInit>

080033ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d2:	3304      	adds	r3, #4

080033d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d8:	d3f9      	bcc.n	80033ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033dc:	4c0b      	ldr	r4, [pc, #44]	; (800340c <LoopFillZerobss+0x26>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e0:	e001      	b.n	80033e6 <LoopFillZerobss>

080033e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e4:	3204      	adds	r2, #4

080033e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e8:	d3fb      	bcc.n	80033e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ea:	f7ff fc8d 	bl	8002d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ee:	f00c fc19 	bl	800fc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033f2:	f7ff f89d 	bl	8002530 <main>
  bx  lr    
 80033f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003400:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8003404:	08011924 	.word	0x08011924
  ldr r2, =_sbss
 8003408:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 800340c:	20004c54 	.word	0x20004c54

08003410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003410:	e7fe      	b.n	8003410 <ADC_IRQHandler>
	...

08003414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_Init+0x40>)
 800341e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_Init+0x40>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <HAL_Init+0x40>)
 800342a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_Init+0x40>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a07      	ldr	r2, [pc, #28]	; (8003454 <HAL_Init+0x40>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800343c:	2003      	movs	r0, #3
 800343e:	f000 fd9c 	bl	8003f7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003442:	200f      	movs	r0, #15
 8003444:	f7ff fb0a 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003448:	f7ff fadc 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00

08003458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_IncTick+0x20>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_IncTick+0x24>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_IncTick+0x24>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000008 	.word	0x20000008
 800347c:	20004c00 	.word	0x20004c00

08003480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return uwTick;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_GetTick+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20004c00 	.word	0x20004c00

08003498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a0:	f7ff ffee 	bl	8003480 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d005      	beq.n	80034be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_Delay+0x44>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034be:	bf00      	nop
 80034c0:	f7ff ffde 	bl	8003480 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d8f7      	bhi.n	80034c0 <HAL_Delay+0x28>
  {
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008

080034e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e033      	b.n	800355e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fc76 	bl	8001df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d118      	bne.n	8003550 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003526:	f023 0302 	bic.w	r3, r3, #2
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fad2 	bl	8003adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
 800354e:	e001      	b.n	8003554 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Start_DMA+0x1e>
 8003582:	2302      	movs	r3, #2
 8003584:	e0e9      	b.n	800375a <HAL_ADC_Start_DMA+0x1f2>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d018      	beq.n	80035ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_ADC_Start_DMA+0x1fc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6d      	ldr	r2, [pc, #436]	; (8003768 <HAL_ADC_Start_DMA+0x200>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9a      	lsrs	r2, r3, #18
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035c0:	e002      	b.n	80035c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f9      	bne.n	80035c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 80a1 	bne.w	8003740 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003628:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363c:	d106      	bne.n	800364c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f023 0206 	bic.w	r2, r3, #6
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
 800364a:	e002      	b.n	8003652 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365a:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_ADC_Start_DMA+0x204>)
 800365c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	4a43      	ldr	r2, [pc, #268]	; (8003770 <HAL_ADC_Start_DMA+0x208>)
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	4a42      	ldr	r2, [pc, #264]	; (8003774 <HAL_ADC_Start_DMA+0x20c>)
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	4a41      	ldr	r2, [pc, #260]	; (8003778 <HAL_ADC_Start_DMA+0x210>)
 8003674:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800367e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800368e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	334c      	adds	r3, #76	; 0x4c
 80036aa:	4619      	mov	r1, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f000 fd54 	bl	800415c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d12a      	bne.n	8003716 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2d      	ldr	r2, [pc, #180]	; (800377c <HAL_ADC_Start_DMA+0x214>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d015      	beq.n	80036f6 <HAL_ADC_Start_DMA+0x18e>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <HAL_ADC_Start_DMA+0x218>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d105      	bne.n	80036e0 <HAL_ADC_Start_DMA+0x178>
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_ADC_Start_DMA+0x204>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a27      	ldr	r2, [pc, #156]	; (8003784 <HAL_ADC_Start_DMA+0x21c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d136      	bne.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_ADC_Start_DMA+0x204>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d130      	bne.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d129      	bne.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	e020      	b.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_ADC_Start_DMA+0x214>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d11b      	bne.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d114      	bne.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	e00b      	b.n	8003758 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000
 8003768:	431bde83 	.word	0x431bde83
 800376c:	40012300 	.word	0x40012300
 8003770:	08003cd5 	.word	0x08003cd5
 8003774:	08003d8f 	.word	0x08003d8f
 8003778:	08003dab 	.word	0x08003dab
 800377c:	40012000 	.word	0x40012000
 8003780:	40012100 	.word	0x40012100
 8003784:	40012200 	.word	0x40012200

08003788 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_Stop_DMA+0x1a>
 800379e:	2302      	movs	r3, #2
 80037a0:	e048      	b.n	8003834 <HAL_ADC_Stop_DMA+0xac>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d130      	bne.n	800382a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d10f      	bne.n	8003806 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd0e 	bl	800420c <HAL_DMA_Abort>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003814:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1c>
 8003890:	2302      	movs	r3, #2
 8003892:	e113      	b.n	8003abc <HAL_ADC_ConfigChannel+0x244>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	d925      	bls.n	80038f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68d9      	ldr	r1, [r3, #12]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	4613      	mov	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	3b1e      	subs	r3, #30
 80038ba:	2207      	movs	r2, #7
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43da      	mvns	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	400a      	ands	r2, r1
 80038c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68d9      	ldr	r1, [r3, #12]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	4603      	mov	r3, r0
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4403      	add	r3, r0
 80038e2:	3b1e      	subs	r3, #30
 80038e4:	409a      	lsls	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	e022      	b.n	8003936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6919      	ldr	r1, [r3, #16]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	2207      	movs	r2, #7
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	400a      	ands	r2, r1
 8003912:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6919      	ldr	r1, [r3, #16]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	4603      	mov	r3, r0
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4403      	add	r3, r0
 800392c:	409a      	lsls	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b06      	cmp	r3, #6
 800393c:	d824      	bhi.n	8003988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	3b05      	subs	r3, #5
 8003950:	221f      	movs	r2, #31
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	400a      	ands	r2, r1
 800395e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	4618      	mov	r0, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b05      	subs	r3, #5
 800397a:	fa00 f203 	lsl.w	r2, r0, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	635a      	str	r2, [r3, #52]	; 0x34
 8003986:	e04c      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d824      	bhi.n	80039da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	3b23      	subs	r3, #35	; 0x23
 80039a2:	221f      	movs	r2, #31
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43da      	mvns	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	400a      	ands	r2, r1
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	4618      	mov	r0, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	3b23      	subs	r3, #35	; 0x23
 80039cc:	fa00 f203 	lsl.w	r2, r0, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
 80039d8:	e023      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	3b41      	subs	r3, #65	; 0x41
 80039ec:	221f      	movs	r2, #31
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	400a      	ands	r2, r1
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	3b41      	subs	r3, #65	; 0x41
 8003a16:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <HAL_ADC_ConfigChannel+0x250>)
 8003a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a28      	ldr	r2, [pc, #160]	; (8003acc <HAL_ADC_ConfigChannel+0x254>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10f      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x1d8>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b12      	cmp	r3, #18
 8003a36:	d10b      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <HAL_ADC_ConfigChannel+0x254>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d12b      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x23a>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <HAL_ADC_ConfigChannel+0x258>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <HAL_ADC_ConfigChannel+0x1f4>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b11      	cmp	r3, #17
 8003a6a:	d122      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <HAL_ADC_ConfigChannel+0x258>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d111      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_ADC_ConfigChannel+0x25c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_ADC_ConfigChannel+0x260>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	0c9a      	lsrs	r2, r3, #18
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003aa4:	e002      	b.n	8003aac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f9      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40012300 	.word	0x40012300
 8003acc:	40012000 	.word	0x40012000
 8003ad0:	10000012 	.word	0x10000012
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	431bde83 	.word	0x431bde83

08003adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <ADC_Init+0x1f0>)
 8003ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	021a      	lsls	r2, r3, #8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6899      	ldr	r1, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <ADC_Init+0x1f4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d022      	beq.n	8003bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6899      	ldr	r1, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6899      	ldr	r1, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e00f      	b.n	8003bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0202 	bic.w	r2, r2, #2
 8003be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7e1b      	ldrb	r3, [r3, #24]
 8003bf4:	005a      	lsls	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01b      	beq.n	8003c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	3b01      	subs	r3, #1
 8003c34:	035a      	lsls	r2, r3, #13
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	e007      	b.n	8003c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	051a      	lsls	r2, r3, #20
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c92:	025a      	lsls	r2, r3, #9
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6899      	ldr	r1, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	029a      	lsls	r2, r3, #10
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40012300 	.word	0x40012300
 8003cd0:	0f000001 	.word	0x0f000001

08003cd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d13c      	bne.n	8003d68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d12b      	bne.n	8003d60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d127      	bne.n	8003d60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d119      	bne.n	8003d60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0220 	bic.w	r2, r2, #32
 8003d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f043 0201 	orr.w	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fd6b 	bl	800383c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d66:	e00e      	b.n	8003d86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff fd75 	bl	8003864 <HAL_ADC_ErrorCallback>
}
 8003d7a:	e004      	b.n	8003d86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff fd57 	bl	8003850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff fd4a 	bl	8003864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e0a:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60d3      	str	r3, [r2, #12]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <__NVIC_GetPriorityGrouping+0x18>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	f003 0307 	and.w	r3, r3, #7
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db0b      	blt.n	8003e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4907      	ldr	r1, [pc, #28]	; (8003e74 <__NVIC_EnableIRQ+0x38>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000e100 	.word	0xe000e100

08003e78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	db12      	blt.n	8003eb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	f003 021f 	and.w	r2, r3, #31
 8003e90:	490a      	ldr	r1, [pc, #40]	; (8003ebc <__NVIC_DisableIRQ+0x44>)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2001      	movs	r0, #1
 8003e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e9e:	3320      	adds	r3, #32
 8003ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea4:	f3bf 8f4f 	dsb	sy
}
 8003ea8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003eaa:	f3bf 8f6f 	isb	sy
}
 8003eae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000e100 	.word	0xe000e100

08003ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	db0a      	blt.n	8003eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	490c      	ldr	r1, [pc, #48]	; (8003f0c <__NVIC_SetPriority+0x4c>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee8:	e00a      	b.n	8003f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4908      	ldr	r1, [pc, #32]	; (8003f10 <__NVIC_SetPriority+0x50>)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3b04      	subs	r3, #4
 8003ef8:	0112      	lsls	r2, r2, #4
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	440b      	add	r3, r1
 8003efe:	761a      	strb	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e100 	.word	0xe000e100
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f1c3 0307 	rsb	r3, r3, #7
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	bf28      	it	cs
 8003f32:	2304      	movcs	r3, #4
 8003f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d902      	bls.n	8003f44 <NVIC_EncodePriority+0x30>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	3b03      	subs	r3, #3
 8003f42:	e000      	b.n	8003f46 <NVIC_EncodePriority+0x32>
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	401a      	ands	r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	43d9      	mvns	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	4313      	orrs	r3, r2
         );
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff28 	bl	8003dd8 <__NVIC_SetPriorityGrouping>
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa2:	f7ff ff3d 	bl	8003e20 <__NVIC_GetPriorityGrouping>
 8003fa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	6978      	ldr	r0, [r7, #20]
 8003fae:	f7ff ffb1 	bl	8003f14 <NVIC_EncodePriority>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff80 	bl	8003ec0 <__NVIC_SetPriority>
}
 8003fc0:	bf00      	nop
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ff30 	bl	8003e3c <__NVIC_EnableIRQ>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff40 	bl	8003e78 <__NVIC_DisableIRQ>
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800400c:	f7ff fa38 	bl	8003480 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e099      	b.n	8004150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403c:	e00f      	b.n	800405e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800403e:	f7ff fa1f 	bl	8003480 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b05      	cmp	r3, #5
 800404a:	d908      	bls.n	800405e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2203      	movs	r2, #3
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e078      	b.n	8004150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e8      	bne.n	800403e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_DMA_Init+0x158>)
 8004078:	4013      	ands	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800408a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d107      	bne.n	80040c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	4313      	orrs	r3, r2
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0307 	bic.w	r3, r3, #7
 80040de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d117      	bne.n	8004122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb01 	bl	800470c <DMA_CheckFifoParam>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800411e:	2301      	movs	r3, #1
 8004120:	e016      	b.n	8004150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fab8 	bl	80046a0 <DMA_CalcBaseAndBitshift>
 8004130:	4603      	mov	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	223f      	movs	r2, #63	; 0x3f
 800413a:	409a      	lsls	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	f010803f 	.word	0xf010803f

0800415c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_DMA_Start_IT+0x26>
 800417e:	2302      	movs	r3, #2
 8004180:	e040      	b.n	8004204 <HAL_DMA_Start_IT+0xa8>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d12f      	bne.n	80041f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fa4a 	bl	8004644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	223f      	movs	r2, #63	; 0x3f
 80041b6:	409a      	lsls	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0216 	orr.w	r2, r2, #22
 80041ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e005      	b.n	8004202 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004202:	7dfb      	ldrb	r3, [r7, #23]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800421a:	f7ff f931 	bl	8003480 <HAL_GetTick>
 800421e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d008      	beq.n	800423e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e052      	b.n	80042e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0216 	bic.w	r2, r2, #22
 800424c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_DMA_Abort+0x62>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0208 	bic.w	r2, r2, #8
 800427c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428e:	e013      	b.n	80042b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004290:	f7ff f8f6 	bl	8003480 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b05      	cmp	r3, #5
 800429c:	d90c      	bls.n	80042b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2203      	movs	r2, #3
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e015      	b.n	80042e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e4      	bne.n	8004290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	223f      	movs	r2, #63	; 0x3f
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d004      	beq.n	800430a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e00c      	b.n	8004324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2205      	movs	r2, #5
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800433c:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_DMA_IRQHandler+0x258>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a92      	ldr	r2, [pc, #584]	; (800458c <HAL_DMA_IRQHandler+0x25c>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0a9b      	lsrs	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	2208      	movs	r2, #8
 800435c:	409a      	lsls	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01a      	beq.n	800439c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	2208      	movs	r2, #8
 800438a:	409a      	lsls	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d012      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	2201      	movs	r2, #1
 80043c0:	409a      	lsls	r2, r3
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f043 0202 	orr.w	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	2204      	movs	r2, #4
 80043d8:	409a      	lsls	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	2204      	movs	r2, #4
 80043f6:	409a      	lsls	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2210      	movs	r2, #16
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d043      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03c      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2210      	movs	r2, #16
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d018      	beq.n	8004472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d024      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
 800445e:	e01f      	b.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e016      	b.n	80044a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0208 	bic.w	r2, r2, #8
 800448e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2220      	movs	r2, #32
 80044a6:	409a      	lsls	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 808e 	beq.w	80045ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8086 	beq.w	80045ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	2220      	movs	r2, #32
 80044c8:	409a      	lsls	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d136      	bne.n	8004548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0216 	bic.w	r2, r2, #22
 80044e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_DMA_IRQHandler+0x1da>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0208 	bic.w	r2, r2, #8
 8004518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	223f      	movs	r2, #63	; 0x3f
 8004520:	409a      	lsls	r2, r3
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	2b00      	cmp	r3, #0
 800453c:	d07d      	beq.n	800463a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
        }
        return;
 8004546:	e078      	b.n	800463a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01c      	beq.n	8004590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	2b00      	cmp	r3, #0
 800456a:	d030      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
 8004574:	e02b      	b.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4798      	blx	r3
 8004586:	e022      	b.n	80045ce <HAL_DMA_IRQHandler+0x29e>
 8004588:	20000000 	.word	0x20000000
 800458c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0210 	bic.w	r2, r2, #16
 80045ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d032      	beq.n	800463c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2205      	movs	r2, #5
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d307      	bcc.n	8004616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f2      	bne.n	80045fa <HAL_DMA_IRQHandler+0x2ca>
 8004614:	e000      	b.n	8004618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004616:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
 8004638:	e000      	b.n	800463c <HAL_DMA_IRQHandler+0x30c>
        return;
 800463a:	bf00      	nop
    }
  }
}
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d108      	bne.n	8004684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004682:	e007      	b.n	8004694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	3b10      	subs	r3, #16
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <DMA_CalcBaseAndBitshift+0x64>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <DMA_CalcBaseAndBitshift+0x68>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d909      	bls.n	80046e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	659a      	str	r2, [r3, #88]	; 0x58
 80046e0:	e007      	b.n	80046f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	aaaaaaab 	.word	0xaaaaaaab
 8004708:	08011874 	.word	0x08011874

0800470c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11f      	bne.n	8004766 <DMA_CheckFifoParam+0x5a>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d856      	bhi.n	80047da <DMA_CheckFifoParam+0xce>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <DMA_CheckFifoParam+0x28>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004745 	.word	0x08004745
 8004738:	08004757 	.word	0x08004757
 800473c:	08004745 	.word	0x08004745
 8004740:	080047db 	.word	0x080047db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d046      	beq.n	80047de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e043      	b.n	80047de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800475e:	d140      	bne.n	80047e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e03d      	b.n	80047e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d121      	bne.n	80047b4 <DMA_CheckFifoParam+0xa8>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d837      	bhi.n	80047e6 <DMA_CheckFifoParam+0xda>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <DMA_CheckFifoParam+0x70>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800478d 	.word	0x0800478d
 8004780:	08004793 	.word	0x08004793
 8004784:	0800478d 	.word	0x0800478d
 8004788:	080047a5 	.word	0x080047a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e030      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d025      	beq.n	80047ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a2:	e022      	b.n	80047ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047ac:	d11f      	bne.n	80047ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047b2:	e01c      	b.n	80047ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d903      	bls.n	80047c2 <DMA_CheckFifoParam+0xb6>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d003      	beq.n	80047c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047c0:	e018      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
      break;
 80047c6:	e015      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e00b      	b.n	80047f2 <DMA_CheckFifoParam+0xe6>
      break;
 80047da:	bf00      	nop
 80047dc:	e00a      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e008      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e006      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
 80047e8:	e004      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e002      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <DMA_CheckFifoParam+0xe8>
      break;
 80047f2:	bf00      	nop
    }
  } 
  
  return status; 
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop

08004804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e165      	b.n	8004aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004820:	2201      	movs	r2, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	f040 8154 	bne.w	8004ae6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d005      	beq.n	8004856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004852:	2b02      	cmp	r3, #2
 8004854:	d130      	bne.n	80048b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800488c:	2201      	movs	r2, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 0201 	and.w	r2, r3, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d017      	beq.n	80048f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d123      	bne.n	8004948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	08da      	lsrs	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3208      	adds	r2, #8
 8004908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	220f      	movs	r2, #15
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	08da      	lsrs	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3208      	adds	r2, #8
 8004942:	69b9      	ldr	r1, [r7, #24]
 8004944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ae 	beq.w	8004ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	4b5d      	ldr	r3, [pc, #372]	; (8004b04 <HAL_GPIO_Init+0x300>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	4a5c      	ldr	r2, [pc, #368]	; (8004b04 <HAL_GPIO_Init+0x300>)
 8004994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004998:	6453      	str	r3, [r2, #68]	; 0x44
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_GPIO_Init+0x300>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049a6:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <HAL_GPIO_Init+0x304>)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	3302      	adds	r3, #2
 80049ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4f      	ldr	r2, [pc, #316]	; (8004b0c <HAL_GPIO_Init+0x308>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d025      	beq.n	8004a1e <HAL_GPIO_Init+0x21a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <HAL_GPIO_Init+0x30c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01f      	beq.n	8004a1a <HAL_GPIO_Init+0x216>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4d      	ldr	r2, [pc, #308]	; (8004b14 <HAL_GPIO_Init+0x310>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d019      	beq.n	8004a16 <HAL_GPIO_Init+0x212>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4c      	ldr	r2, [pc, #304]	; (8004b18 <HAL_GPIO_Init+0x314>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_GPIO_Init+0x20e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4b      	ldr	r2, [pc, #300]	; (8004b1c <HAL_GPIO_Init+0x318>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00d      	beq.n	8004a0e <HAL_GPIO_Init+0x20a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4a      	ldr	r2, [pc, #296]	; (8004b20 <HAL_GPIO_Init+0x31c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <HAL_GPIO_Init+0x206>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_GPIO_Init+0x320>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_GPIO_Init+0x202>
 8004a02:	2306      	movs	r3, #6
 8004a04:	e00c      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a06:	2307      	movs	r3, #7
 8004a08:	e00a      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a0a:	2305      	movs	r3, #5
 8004a0c:	e008      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a0e:	2304      	movs	r3, #4
 8004a10:	e006      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a12:	2303      	movs	r3, #3
 8004a14:	e004      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e002      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <HAL_GPIO_Init+0x21c>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	f002 0203 	and.w	r2, r2, #3
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	4093      	lsls	r3, r2
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a30:	4935      	ldr	r1, [pc, #212]	; (8004b08 <HAL_GPIO_Init+0x304>)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	3302      	adds	r3, #2
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a62:	4a31      	ldr	r2, [pc, #196]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a92:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <HAL_GPIO_Init+0x324>)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	f67f ae96 	bls.w	8004820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40013800 	.word	0x40013800
 8004b0c:	40020000 	.word	0x40020000
 8004b10:	40020400 	.word	0x40020400
 8004b14:	40020800 	.word	0x40020800
 8004b18:	40020c00 	.word	0x40020c00
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40021400 	.word	0x40021400
 8004b24:	40021800 	.word	0x40021800
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b48:	e003      	b.n	8004b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	041a      	lsls	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd fed4 	bl	800292c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e12b      	b.n	8004dfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fb0a 	bl	80021d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2224      	movs	r2, #36	; 0x24
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f001 f854 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4a81      	ldr	r2, [pc, #516]	; (8004e04 <HAL_I2C_Init+0x274>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d807      	bhi.n	8004c14 <HAL_I2C_Init+0x84>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a80      	ldr	r2, [pc, #512]	; (8004e08 <HAL_I2C_Init+0x278>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf94      	ite	ls
 8004c0c:	2301      	movls	r3, #1
 8004c0e:	2300      	movhi	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e006      	b.n	8004c22 <HAL_I2C_Init+0x92>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a7d      	ldr	r2, [pc, #500]	; (8004e0c <HAL_I2C_Init+0x27c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	bf94      	ite	ls
 8004c1c:	2301      	movls	r3, #1
 8004c1e:	2300      	movhi	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0e7      	b.n	8004dfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a78      	ldr	r2, [pc, #480]	; (8004e10 <HAL_I2C_Init+0x280>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	0c9b      	lsrs	r3, r3, #18
 8004c34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a6a      	ldr	r2, [pc, #424]	; (8004e04 <HAL_I2C_Init+0x274>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d802      	bhi.n	8004c64 <HAL_I2C_Init+0xd4>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3301      	adds	r3, #1
 8004c62:	e009      	b.n	8004c78 <HAL_I2C_Init+0xe8>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	4a69      	ldr	r2, [pc, #420]	; (8004e14 <HAL_I2C_Init+0x284>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	3301      	adds	r3, #1
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	495c      	ldr	r1, [pc, #368]	; (8004e04 <HAL_I2C_Init+0x274>)
 8004c94:	428b      	cmp	r3, r1
 8004c96:	d819      	bhi.n	8004ccc <HAL_I2C_Init+0x13c>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1e59      	subs	r1, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cac:	400b      	ands	r3, r1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_I2C_Init+0x138>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1e59      	subs	r1, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc6:	e051      	b.n	8004d6c <HAL_I2C_Init+0x1dc>
 8004cc8:	2304      	movs	r3, #4
 8004cca:	e04f      	b.n	8004d6c <HAL_I2C_Init+0x1dc>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d111      	bne.n	8004cf8 <HAL_I2C_Init+0x168>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1e58      	subs	r0, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	440b      	add	r3, r1
 8004ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e012      	b.n	8004d1e <HAL_I2C_Init+0x18e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1e58      	subs	r0, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	0099      	lsls	r1, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Init+0x196>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e022      	b.n	8004d6c <HAL_I2C_Init+0x1dc>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10e      	bne.n	8004d4c <HAL_I2C_Init+0x1bc>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1e58      	subs	r0, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	440b      	add	r3, r1
 8004d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d40:	3301      	adds	r3, #1
 8004d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4a:	e00f      	b.n	8004d6c <HAL_I2C_Init+0x1dc>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1e58      	subs	r0, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	0099      	lsls	r1, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d62:	3301      	adds	r3, #1
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	6809      	ldr	r1, [r1, #0]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6911      	ldr	r1, [r2, #16]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68d2      	ldr	r2, [r2, #12]
 8004da6:	4311      	orrs	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	000186a0 	.word	0x000186a0
 8004e08:	001e847f 	.word	0x001e847f
 8004e0c:	003d08ff 	.word	0x003d08ff
 8004e10:	431bde83 	.word	0x431bde83
 8004e14:	10624dd3 	.word	0x10624dd3

08004e18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	607a      	str	r2, [r7, #4]
 8004e22:	461a      	mov	r2, r3
 8004e24:	460b      	mov	r3, r1
 8004e26:	817b      	strh	r3, [r7, #10]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e2c:	f7fe fb28 	bl	8003480 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	f040 80e0 	bne.w	8005000 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2319      	movs	r3, #25
 8004e46:	2201      	movs	r2, #1
 8004e48:	4970      	ldr	r1, [pc, #448]	; (800500c <HAL_I2C_Master_Transmit+0x1f4>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fc58 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0d3      	b.n	8005002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_I2C_Master_Transmit+0x50>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e0cc      	b.n	8005002 <HAL_I2C_Master_Transmit+0x1ea>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d007      	beq.n	8004e8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2221      	movs	r2, #33	; 0x21
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	893a      	ldrh	r2, [r7, #8]
 8004ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a50      	ldr	r2, [pc, #320]	; (8005010 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fac2 	bl	8005460 <I2C_MasterRequestWrite>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e08d      	b.n	8005002 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004efc:	e066      	b.n	8004fcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	6a39      	ldr	r1, [r7, #32]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fcd2 	bl	80058ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d107      	bne.n	8004f26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e06b      	b.n	8005002 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d11b      	bne.n	8004fa0 <HAL_I2C_Master_Transmit+0x188>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d017      	beq.n	8004fa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	6a39      	ldr	r1, [r7, #32]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fcc2 	bl	800592e <I2C_WaitOnBTFFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d107      	bne.n	8004fc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e01a      	b.n	8005002 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d194      	bne.n	8004efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e000      	b.n	8005002 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005000:	2302      	movs	r3, #2
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	00100002 	.word	0x00100002
 8005010:	ffff0000 	.word	0xffff0000

08005014 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	461a      	mov	r2, r3
 8005020:	460b      	mov	r3, r1
 8005022:	817b      	strh	r3, [r7, #10]
 8005024:	4613      	mov	r3, r2
 8005026:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005028:	f7fe fa2a 	bl	8003480 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b20      	cmp	r3, #32
 8005038:	f040 820b 	bne.w	8005452 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2319      	movs	r3, #25
 8005042:	2201      	movs	r2, #1
 8005044:	497c      	ldr	r1, [pc, #496]	; (8005238 <HAL_I2C_Master_Receive+0x224>)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fb5a 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
 8005054:	e1fe      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_I2C_Master_Receive+0x50>
 8005060:	2302      	movs	r3, #2
 8005062:	e1f7      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d007      	beq.n	800508a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005098:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2222      	movs	r2, #34	; 0x22
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2210      	movs	r2, #16
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	893a      	ldrh	r2, [r7, #8]
 80050ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a5c      	ldr	r2, [pc, #368]	; (800523c <HAL_I2C_Master_Receive+0x228>)
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050cc:	8979      	ldrh	r1, [r7, #10]
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa46 	bl	8005564 <I2C_MasterRequestRead>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e1b8      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d113      	bne.n	8005112 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e18c      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	2b01      	cmp	r3, #1
 8005118:	d11b      	bne.n	8005152 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e16c      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	2b02      	cmp	r3, #2
 8005158:	d11b      	bne.n	8005192 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	e14c      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051b8:	e138      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	2b03      	cmp	r3, #3
 80051c0:	f200 80f1 	bhi.w	80053a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d123      	bne.n	8005214 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fbed 	bl	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e139      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005212:	e10b      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	2b02      	cmp	r3, #2
 800521a:	d14e      	bne.n	80052ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	4906      	ldr	r1, [pc, #24]	; (8005240 <HAL_I2C_Master_Receive+0x22c>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fa6a 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e10e      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
 8005236:	bf00      	nop
 8005238:	00100002 	.word	0x00100002
 800523c:	ffff0000 	.word	0xffff0000
 8005240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b8:	e0b8      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	2200      	movs	r2, #0
 80052c2:	4966      	ldr	r1, [pc, #408]	; (800545c <HAL_I2C_Master_Receive+0x448>)
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fa1b 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0bf      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	494f      	ldr	r1, [pc, #316]	; (800545c <HAL_I2C_Master_Receive+0x448>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f9ed 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e091      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a4:	e042      	b.n	800542c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fb00 	bl	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e04c      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d118      	bne.n	800542c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	f47f aec2 	bne.w	80051ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005452:	2302      	movs	r3, #2
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	3728      	adds	r7, #40	; 0x28
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	00010004 	.word	0x00010004

08005460 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	460b      	mov	r3, r1
 800546e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d006      	beq.n	800548a <I2C_MasterRequestWrite+0x2a>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d003      	beq.n	800548a <I2C_MasterRequestWrite+0x2a>
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005488:	d108      	bne.n	800549c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e00b      	b.n	80054b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	2b12      	cmp	r3, #18
 80054a2:	d107      	bne.n	80054b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f91d 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054da:	d103      	bne.n	80054e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e035      	b.n	8005554 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f0:	d108      	bne.n	8005504 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054f2:	897b      	ldrh	r3, [r7, #10]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005500:	611a      	str	r2, [r3, #16]
 8005502:	e01b      	b.n	800553c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005504:	897b      	ldrh	r3, [r7, #10]
 8005506:	11db      	asrs	r3, r3, #7
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 0306 	and.w	r3, r3, #6
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f063 030f 	orn	r3, r3, #15
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	490e      	ldr	r1, [pc, #56]	; (800555c <I2C_MasterRequestWrite+0xfc>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f943 	bl	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e010      	b.n	8005554 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005532:	897b      	ldrh	r3, [r7, #10]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4907      	ldr	r1, [pc, #28]	; (8005560 <I2C_MasterRequestWrite+0x100>)
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f933 	bl	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	00010008 	.word	0x00010008
 8005560:	00010002 	.word	0x00010002

08005564 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	460b      	mov	r3, r1
 8005572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005588:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d006      	beq.n	800559e <I2C_MasterRequestRead+0x3a>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d003      	beq.n	800559e <I2C_MasterRequestRead+0x3a>
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800559c:	d108      	bne.n	80055b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e00b      	b.n	80055c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	2b11      	cmp	r3, #17
 80055b6:	d107      	bne.n	80055c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f893 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ee:	d103      	bne.n	80055f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e079      	b.n	80056f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005604:	d108      	bne.n	8005618 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	611a      	str	r2, [r3, #16]
 8005616:	e05f      	b.n	80056d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	11db      	asrs	r3, r3, #7
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 0306 	and.w	r3, r3, #6
 8005622:	b2db      	uxtb	r3, r3
 8005624:	f063 030f 	orn	r3, r3, #15
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4930      	ldr	r1, [pc, #192]	; (80056f8 <I2C_MasterRequestRead+0x194>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f8b9 	bl	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e054      	b.n	80056f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005646:	897b      	ldrh	r3, [r7, #10]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4929      	ldr	r1, [pc, #164]	; (80056fc <I2C_MasterRequestRead+0x198>)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 f8a9 	bl	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e044      	b.n	80056f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005666:	2300      	movs	r3, #0
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f831 	bl	8005700 <I2C_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00d      	beq.n	80056c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b2:	d103      	bne.n	80056bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e017      	b.n	80056f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056c0:	897b      	ldrh	r3, [r7, #10]
 80056c2:	11db      	asrs	r3, r3, #7
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0306 	and.w	r3, r3, #6
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f063 030e 	orn	r3, r3, #14
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4907      	ldr	r1, [pc, #28]	; (80056fc <I2C_MasterRequestRead+0x198>)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f865 	bl	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	00010008 	.word	0x00010008
 80056fc:	00010002 	.word	0x00010002

08005700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005710:	e025      	b.n	800575e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d021      	beq.n	800575e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571a:	f7fd feb1 	bl	8003480 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d116      	bne.n	800575e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e023      	b.n	80057a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	0c1b      	lsrs	r3, r3, #16
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d10d      	bne.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	43da      	mvns	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	e00c      	b.n	800579e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	43da      	mvns	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d0b6      	beq.n	8005712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057bc:	e051      	b.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d123      	bne.n	8005816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f043 0204 	orr.w	r2, r3, #4
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e046      	b.n	80058a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d021      	beq.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581e:	f7fd fe2f 	bl	8003480 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d302      	bcc.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d116      	bne.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f043 0220 	orr.w	r2, r3, #32
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e020      	b.n	80058a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d10c      	bne.n	8005886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	43da      	mvns	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e00b      	b.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	43da      	mvns	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4013      	ands	r3, r2
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d18d      	bne.n	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b8:	e02d      	b.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f8ce 	bl	8005a5c <I2C_IsAcknowledgeFailed>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e02d      	b.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d021      	beq.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7fd fdd5 	bl	8003480 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d116      	bne.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e007      	b.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d1ca      	bne.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800593a:	e02d      	b.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f88d 	bl	8005a5c <I2C_IsAcknowledgeFailed>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e02d      	b.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d021      	beq.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005954:	f7fd fd94 	bl	8003480 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d116      	bne.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e007      	b.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d1ca      	bne.n	800593c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059bc:	e042      	b.n	8005a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b10      	cmp	r3, #16
 80059ca:	d119      	bne.n	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0210 	mvn.w	r2, #16
 80059d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e029      	b.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a00:	f7fd fd3e 	bl	8003480 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d116      	bne.n	8005a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e007      	b.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d1b5      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d11b      	bne.n	8005aac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	f043 0204 	orr.w	r2, r3, #4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0cc      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d90c      	bls.n	8005af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae6:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0b8      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d020      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a58      	ldr	r2, [pc, #352]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b28:	4b53      	ldr	r3, [pc, #332]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4a52      	ldr	r2, [pc, #328]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b34:	4b50      	ldr	r3, [pc, #320]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	494d      	ldr	r1, [pc, #308]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d044      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d107      	bne.n	8005b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d119      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e07f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d003      	beq.n	8005b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d107      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7a:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e06f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e067      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b9a:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4934      	ldr	r1, [pc, #208]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fd fc68 	bl	8003480 <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb2:	e00a      	b.n	8005bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb4:	f7fd fc64 	bl	8003480 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e04f      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bca:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 020c 	and.w	r2, r3, #12
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d1eb      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d20c      	bcs.n	8005c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e032      	b.n	8005c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4916      	ldr	r1, [pc, #88]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	490e      	ldr	r1, [pc, #56]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c42:	f000 f887 	bl	8005d54 <HAL_RCC_GetSysClockFreq>
 8005c46:	4602      	mov	r2, r0
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	490a      	ldr	r1, [pc, #40]	; (8005c7c <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	5ccb      	ldrb	r3, [r1, r3]
 8005c56:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <HAL_RCC_ClockConfig+0x1c8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fc fefa 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023c00 	.word	0x40023c00
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	0801185c 	.word	0x0801185c
 8005c80:	20000000 	.word	0x20000000
 8005c84:	20000004 	.word	0x20000004

08005c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000000 	.word	0x20000000

08005ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ca4:	f7ff fff0 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0a9b      	lsrs	r3, r3, #10
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4903      	ldr	r1, [pc, #12]	; (8005cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	0801186c 	.word	0x0801186c

08005cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ccc:	f7ff ffdc 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	0b5b      	lsrs	r3, r3, #13
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	; (8005cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	0801186c 	.word	0x0801186c

08005cf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d00:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <HAL_RCC_GetClockConfig+0x5c>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0203 	and.w	r2, r3, #3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <HAL_RCC_GetClockConfig+0x5c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d18:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <HAL_RCC_GetClockConfig+0x5c>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <HAL_RCC_GetClockConfig+0x5c>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <HAL_RCC_GetClockConfig+0x60>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40023c00 	.word	0x40023c00

08005d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d70:	4bce      	ldr	r3, [pc, #824]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b0c      	cmp	r3, #12
 8005d7a:	f200 818d 	bhi.w	8006098 <HAL_RCC_GetSysClockFreq+0x344>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <HAL_RCC_GetSysClockFreq+0x30>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005db9 	.word	0x08005db9
 8005d88:	08006099 	.word	0x08006099
 8005d8c:	08006099 	.word	0x08006099
 8005d90:	08006099 	.word	0x08006099
 8005d94:	08005dbf 	.word	0x08005dbf
 8005d98:	08006099 	.word	0x08006099
 8005d9c:	08006099 	.word	0x08006099
 8005da0:	08006099 	.word	0x08006099
 8005da4:	08005dc5 	.word	0x08005dc5
 8005da8:	08006099 	.word	0x08006099
 8005dac:	08006099 	.word	0x08006099
 8005db0:	08006099 	.word	0x08006099
 8005db4:	08005f39 	.word	0x08005f39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005db8:	4bbd      	ldr	r3, [pc, #756]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005dba:	61bb      	str	r3, [r7, #24]
       break;
 8005dbc:	e16f      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dbe:	4bbd      	ldr	r3, [pc, #756]	; (80060b4 <HAL_RCC_GetSysClockFreq+0x360>)
 8005dc0:	61bb      	str	r3, [r7, #24]
      break;
 8005dc2:	e16c      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dc4:	4bb9      	ldr	r3, [pc, #740]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dcc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dce:	4bb7      	ldr	r3, [pc, #732]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d053      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dda:	4bb4      	ldr	r3, [pc, #720]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	461a      	mov	r2, r3
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	ea02 0400 	and.w	r4, r2, r0
 8005df2:	603c      	str	r4, [r7, #0]
 8005df4:	400b      	ands	r3, r1
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	014b      	lsls	r3, r1, #5
 8005e0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e0e:	0142      	lsls	r2, r0, #5
 8005e10:	4610      	mov	r0, r2
 8005e12:	4619      	mov	r1, r3
 8005e14:	4623      	mov	r3, r4
 8005e16:	1ac0      	subs	r0, r0, r3
 8005e18:	462b      	mov	r3, r5
 8005e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	018b      	lsls	r3, r1, #6
 8005e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e2c:	0182      	lsls	r2, r0, #6
 8005e2e:	1a12      	subs	r2, r2, r0
 8005e30:	eb63 0301 	sbc.w	r3, r3, r1
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	00d9      	lsls	r1, r3, #3
 8005e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e42:	00d0      	lsls	r0, r2, #3
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4621      	mov	r1, r4
 8005e4a:	1852      	adds	r2, r2, r1
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	eb43 0101 	adc.w	r1, r3, r1
 8005e52:	460b      	mov	r3, r1
 8005e54:	f04f 0000 	mov.w	r0, #0
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	0259      	lsls	r1, r3, #9
 8005e5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005e62:	0250      	lsls	r0, r2, #9
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	f7fa fea8 	bl	8000bc8 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e04c      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e82:	4b8a      	ldr	r3, [pc, #552]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f04f 0300 	mov.w	r3, #0
 8005e8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e92:	f04f 0100 	mov.w	r1, #0
 8005e96:	ea02 0a00 	and.w	sl, r2, r0
 8005e9a:	ea03 0b01 	and.w	fp, r3, r1
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	014b      	lsls	r3, r1, #5
 8005eac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005eb0:	0142      	lsls	r2, r0, #5
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	ebb0 000a 	subs.w	r0, r0, sl
 8005eba:	eb61 010b 	sbc.w	r1, r1, fp
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	018b      	lsls	r3, r1, #6
 8005ec8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ecc:	0182      	lsls	r2, r0, #6
 8005ece:	1a12      	subs	r2, r2, r0
 8005ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8005ed4:	f04f 0000 	mov.w	r0, #0
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	00d9      	lsls	r1, r3, #3
 8005ede:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ee2:	00d0      	lsls	r0, r2, #3
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	eb12 020a 	adds.w	r2, r2, sl
 8005eec:	eb43 030b 	adc.w	r3, r3, fp
 8005ef0:	f04f 0000 	mov.w	r0, #0
 8005ef4:	f04f 0100 	mov.w	r1, #0
 8005ef8:	0299      	lsls	r1, r3, #10
 8005efa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005efe:	0290      	lsls	r0, r2, #10
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	f7fa fe5a 	bl	8000bc8 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4613      	mov	r3, r2
 8005f1a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f1c:	4b63      	ldr	r3, [pc, #396]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	3301      	adds	r3, #1
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f34:	61bb      	str	r3, [r7, #24]
      break;
 8005f36:	e0b2      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f38:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f42:	4b5a      	ldr	r3, [pc, #360]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d04d      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4e:	4b57      	ldr	r3, [pc, #348]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	ea02 0800 	and.w	r8, r2, r0
 8005f66:	ea03 0901 	and.w	r9, r3, r1
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	014b      	lsls	r3, r1, #5
 8005f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f7c:	0142      	lsls	r2, r0, #5
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	ebb0 0008 	subs.w	r0, r0, r8
 8005f86:	eb61 0109 	sbc.w	r1, r1, r9
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	018b      	lsls	r3, r1, #6
 8005f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f98:	0182      	lsls	r2, r0, #6
 8005f9a:	1a12      	subs	r2, r2, r0
 8005f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	00d9      	lsls	r1, r3, #3
 8005faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fae:	00d0      	lsls	r0, r2, #3
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	eb12 0208 	adds.w	r2, r2, r8
 8005fb8:	eb43 0309 	adc.w	r3, r3, r9
 8005fbc:	f04f 0000 	mov.w	r0, #0
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	0259      	lsls	r1, r3, #9
 8005fc6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005fca:	0250      	lsls	r0, r2, #9
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	f7fa fdf4 	bl	8000bc8 <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e04a      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fea:	4b30      	ldr	r3, [pc, #192]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	099b      	lsrs	r3, r3, #6
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ffa:	f04f 0100 	mov.w	r1, #0
 8005ffe:	ea02 0400 	and.w	r4, r2, r0
 8006002:	ea03 0501 	and.w	r5, r3, r1
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	014b      	lsls	r3, r1, #5
 8006014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006018:	0142      	lsls	r2, r0, #5
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	1b00      	subs	r0, r0, r4
 8006020:	eb61 0105 	sbc.w	r1, r1, r5
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	018b      	lsls	r3, r1, #6
 800602e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006032:	0182      	lsls	r2, r0, #6
 8006034:	1a12      	subs	r2, r2, r0
 8006036:	eb63 0301 	sbc.w	r3, r3, r1
 800603a:	f04f 0000 	mov.w	r0, #0
 800603e:	f04f 0100 	mov.w	r1, #0
 8006042:	00d9      	lsls	r1, r3, #3
 8006044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006048:	00d0      	lsls	r0, r2, #3
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	1912      	adds	r2, r2, r4
 8006050:	eb45 0303 	adc.w	r3, r5, r3
 8006054:	f04f 0000 	mov.w	r0, #0
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	0299      	lsls	r1, r3, #10
 800605e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006062:	0290      	lsls	r0, r2, #10
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	461a      	mov	r2, r3
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	f7fa fda8 	bl	8000bc8 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4613      	mov	r3, r2
 800607e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <HAL_RCC_GetSysClockFreq+0x358>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	0f1b      	lsrs	r3, r3, #28
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	61bb      	str	r3, [r7, #24]
      break;
 8006096:	e002      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800609a:	61bb      	str	r3, [r7, #24]
      break;
 800609c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609e:	69bb      	ldr	r3, [r7, #24]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3720      	adds	r7, #32
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060aa:	bf00      	nop
 80060ac:	40023800 	.word	0x40023800
 80060b0:	00f42400 	.word	0x00f42400
 80060b4:	007a1200 	.word	0x007a1200

080060b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e28d      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8083 	beq.w	80061de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80060d8:	4b94      	ldr	r3, [pc, #592]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d019      	beq.n	8006118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060e4:	4b91      	ldr	r3, [pc, #580]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d106      	bne.n	80060fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060f0:	4b8e      	ldr	r3, [pc, #568]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060fc:	d00c      	beq.n	8006118 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060fe:	4b8b      	ldr	r3, [pc, #556]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d112      	bne.n	8006130 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610a:	4b88      	ldr	r3, [pc, #544]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006116:	d10b      	bne.n	8006130 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	4b84      	ldr	r3, [pc, #528]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d05b      	beq.n	80061dc <HAL_RCC_OscConfig+0x124>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d157      	bne.n	80061dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e25a      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d106      	bne.n	8006148 <HAL_RCC_OscConfig+0x90>
 800613a:	4b7c      	ldr	r3, [pc, #496]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a7b      	ldr	r2, [pc, #492]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e01d      	b.n	8006184 <HAL_RCC_OscConfig+0xcc>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006150:	d10c      	bne.n	800616c <HAL_RCC_OscConfig+0xb4>
 8006152:	4b76      	ldr	r3, [pc, #472]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a75      	ldr	r2, [pc, #468]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	4b73      	ldr	r3, [pc, #460]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a72      	ldr	r2, [pc, #456]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e00b      	b.n	8006184 <HAL_RCC_OscConfig+0xcc>
 800616c:	4b6f      	ldr	r3, [pc, #444]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a6e      	ldr	r2, [pc, #440]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	4b6c      	ldr	r3, [pc, #432]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6b      	ldr	r2, [pc, #428]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800617e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d013      	beq.n	80061b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fd f978 	bl	8003480 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006194:	f7fd f974 	bl	8003480 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	; 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e21f      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a6:	4b61      	ldr	r3, [pc, #388]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0xdc>
 80061b2:	e014      	b.n	80061de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fd f964 	bl	8003480 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061bc:	f7fd f960 	bl	8003480 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b64      	cmp	r3, #100	; 0x64
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e20b      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ce:	4b57      	ldr	r3, [pc, #348]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x104>
 80061da:	e000      	b.n	80061de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d06f      	beq.n	80062ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061ea:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d017      	beq.n	8006226 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061f6:	4b4d      	ldr	r3, [pc, #308]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d105      	bne.n	800620e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006202:	4b4a      	ldr	r3, [pc, #296]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800620e:	4b47      	ldr	r3, [pc, #284]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d11c      	bne.n	8006254 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800621a:	4b44      	ldr	r3, [pc, #272]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d116      	bne.n	8006254 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006226:	4b41      	ldr	r3, [pc, #260]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_RCC_OscConfig+0x186>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d001      	beq.n	800623e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e1d3      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623e:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4937      	ldr	r1, [pc, #220]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006252:	e03a      	b.n	80062ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d020      	beq.n	800629e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800625c:	4b34      	ldr	r3, [pc, #208]	; (8006330 <HAL_RCC_OscConfig+0x278>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006262:	f7fd f90d 	bl	8003480 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800626a:	f7fd f909 	bl	8003480 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e1b4      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006288:	4b28      	ldr	r3, [pc, #160]	; (800632c <HAL_RCC_OscConfig+0x274>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4925      	ldr	r1, [pc, #148]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006298:	4313      	orrs	r3, r2
 800629a:	600b      	str	r3, [r1, #0]
 800629c:	e015      	b.n	80062ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800629e:	4b24      	ldr	r3, [pc, #144]	; (8006330 <HAL_RCC_OscConfig+0x278>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fd f8ec 	bl	8003480 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ac:	f7fd f8e8 	bl	8003480 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e193      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d036      	beq.n	8006344 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <HAL_RCC_OscConfig+0x27c>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e4:	f7fd f8cc 	bl	8003480 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ec:	f7fd f8c8 	bl	8003480 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e173      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062fe:	4b0b      	ldr	r3, [pc, #44]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0x234>
 800630a:	e01b      	b.n	8006344 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <HAL_RCC_OscConfig+0x27c>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006312:	f7fd f8b5 	bl	8003480 <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006318:	e00e      	b.n	8006338 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800631a:	f7fd f8b1 	bl	8003480 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d907      	bls.n	8006338 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e15c      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
 800632c:	40023800 	.word	0x40023800
 8006330:	42470000 	.word	0x42470000
 8006334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006338:	4b8a      	ldr	r3, [pc, #552]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800633a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ea      	bne.n	800631a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8097 	beq.w	8006480 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006352:	2300      	movs	r3, #0
 8006354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006356:	4b83      	ldr	r3, [pc, #524]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10f      	bne.n	8006382 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	4b7f      	ldr	r3, [pc, #508]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	4a7e      	ldr	r2, [pc, #504]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800636c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006370:	6413      	str	r3, [r2, #64]	; 0x40
 8006372:	4b7c      	ldr	r3, [pc, #496]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006382:	4b79      	ldr	r3, [pc, #484]	; (8006568 <HAL_RCC_OscConfig+0x4b0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d118      	bne.n	80063c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800638e:	4b76      	ldr	r3, [pc, #472]	; (8006568 <HAL_RCC_OscConfig+0x4b0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a75      	ldr	r2, [pc, #468]	; (8006568 <HAL_RCC_OscConfig+0x4b0>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800639a:	f7fd f871 	bl	8003480 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a2:	f7fd f86d 	bl	8003480 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e118      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b4:	4b6c      	ldr	r3, [pc, #432]	; (8006568 <HAL_RCC_OscConfig+0x4b0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d106      	bne.n	80063d6 <HAL_RCC_OscConfig+0x31e>
 80063c8:	4b66      	ldr	r3, [pc, #408]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a65      	ldr	r2, [pc, #404]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
 80063d4:	e01c      	b.n	8006410 <HAL_RCC_OscConfig+0x358>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d10c      	bne.n	80063f8 <HAL_RCC_OscConfig+0x340>
 80063de:	4b61      	ldr	r3, [pc, #388]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	4a60      	ldr	r2, [pc, #384]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ea:	4b5e      	ldr	r3, [pc, #376]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	4a5d      	ldr	r2, [pc, #372]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	6713      	str	r3, [r2, #112]	; 0x70
 80063f6:	e00b      	b.n	8006410 <HAL_RCC_OscConfig+0x358>
 80063f8:	4b5a      	ldr	r3, [pc, #360]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fc:	4a59      	ldr	r2, [pc, #356]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	6713      	str	r3, [r2, #112]	; 0x70
 8006404:	4b57      	ldr	r3, [pc, #348]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006408:	4a56      	ldr	r2, [pc, #344]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800640a:	f023 0304 	bic.w	r3, r3, #4
 800640e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d015      	beq.n	8006444 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006418:	f7fd f832 	bl	8003480 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800641e:	e00a      	b.n	8006436 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006420:	f7fd f82e 	bl	8003480 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	; 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e0d7      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006436:	4b4b      	ldr	r3, [pc, #300]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0ee      	beq.n	8006420 <HAL_RCC_OscConfig+0x368>
 8006442:	e014      	b.n	800646e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006444:	f7fd f81c 	bl	8003480 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644a:	e00a      	b.n	8006462 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800644c:	f7fd f818 	bl	8003480 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f241 3288 	movw	r2, #5000	; 0x1388
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e0c1      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006462:	4b40      	ldr	r3, [pc, #256]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ee      	bne.n	800644c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006474:	4b3b      	ldr	r3, [pc, #236]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	4a3a      	ldr	r2, [pc, #232]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800647a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80ad 	beq.w	80065e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b08      	cmp	r3, #8
 8006494:	d060      	beq.n	8006558 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d145      	bne.n	800652a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800649e:	4b33      	ldr	r3, [pc, #204]	; (800656c <HAL_RCC_OscConfig+0x4b4>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a4:	f7fc ffec 	bl	8003480 <HAL_GetTick>
 80064a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ac:	f7fc ffe8 	bl	8003480 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e093      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064be:	4b29      	ldr	r3, [pc, #164]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f0      	bne.n	80064ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	019b      	lsls	r3, r3, #6
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	3b01      	subs	r3, #1
 80064e4:	041b      	lsls	r3, r3, #16
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	061b      	lsls	r3, r3, #24
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	071b      	lsls	r3, r3, #28
 80064f6:	491b      	ldr	r1, [pc, #108]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064fc:	4b1b      	ldr	r3, [pc, #108]	; (800656c <HAL_RCC_OscConfig+0x4b4>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006502:	f7fc ffbd 	bl	8003480 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800650a:	f7fc ffb9 	bl	8003480 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e064      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x452>
 8006528:	e05c      	b.n	80065e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652a:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_RCC_OscConfig+0x4b4>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fc ffa6 	bl	8003480 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006538:	f7fc ffa2 	bl	8003480 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e04d      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800654a:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_RCC_OscConfig+0x4ac>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <HAL_RCC_OscConfig+0x480>
 8006556:	e045      	b.n	80065e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e040      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
 8006564:	40023800 	.word	0x40023800
 8006568:	40007000 	.word	0x40007000
 800656c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006570:	4b1f      	ldr	r3, [pc, #124]	; (80065f0 <HAL_RCC_OscConfig+0x538>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d030      	beq.n	80065e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d129      	bne.n	80065e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d122      	bne.n	80065e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d119      	bne.n	80065e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	3b01      	subs	r3, #1
 80065ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d10f      	bne.n	80065e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800

080065f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e041      	b.n	800668a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fc fd30 	bl	8003080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f000 fea4 	bl	8007380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d001      	beq.n	80066ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e04e      	b.n	800674a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a23      	ldr	r2, [pc, #140]	; (8006758 <HAL_TIM_Base_Start_IT+0xc4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d6:	d01d      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1f      	ldr	r2, [pc, #124]	; (800675c <HAL_TIM_Base_Start_IT+0xc8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d018      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <HAL_TIM_Base_Start_IT+0xcc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1c      	ldr	r2, [pc, #112]	; (8006764 <HAL_TIM_Base_Start_IT+0xd0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00e      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <HAL_TIM_Base_Start_IT+0xd4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a19      	ldr	r2, [pc, #100]	; (800676c <HAL_TIM_Base_Start_IT+0xd8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0x80>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a18      	ldr	r2, [pc, #96]	; (8006770 <HAL_TIM_Base_Start_IT+0xdc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d111      	bne.n	8006738 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b06      	cmp	r3, #6
 8006724:	d010      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006736:	e007      	b.n	8006748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40010400 	.word	0x40010400
 800676c:	40014000 	.word	0x40014000
 8006770:	40001800 	.word	0x40001800

08006774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e041      	b.n	800680a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f839 	bl	8006812 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f000 fde4 	bl	8007380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e041      	b.n	80068bc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fc fcb3 	bl	80031b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f000 fd8b 	bl	8007380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_IC_Start_IT+0x1e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	e013      	b.n	800690a <HAL_TIM_IC_Start_IT+0x46>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_IC_Start_IT+0x2e>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e00b      	b.n	800690a <HAL_TIM_IC_Start_IT+0x46>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_IC_Start_IT+0x3e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	e003      	b.n	800690a <HAL_TIM_IC_Start_IT+0x46>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006908:	b2db      	uxtb	r3, r3
 800690a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <HAL_TIM_IC_Start_IT+0x58>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e013      	b.n	8006944 <HAL_TIM_IC_Start_IT+0x80>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b04      	cmp	r3, #4
 8006920:	d104      	bne.n	800692c <HAL_TIM_IC_Start_IT+0x68>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e00b      	b.n	8006944 <HAL_TIM_IC_Start_IT+0x80>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d104      	bne.n	800693c <HAL_TIM_IC_Start_IT+0x78>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e003      	b.n	8006944 <HAL_TIM_IC_Start_IT+0x80>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006942:	b2db      	uxtb	r3, r3
 8006944:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d102      	bne.n	8006952 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800694c:	7b7b      	ldrb	r3, [r7, #13]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d001      	beq.n	8006956 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0cc      	b.n	8006af0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <HAL_TIM_IC_Start_IT+0xa2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006964:	e013      	b.n	800698e <HAL_TIM_IC_Start_IT+0xca>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b04      	cmp	r3, #4
 800696a:	d104      	bne.n	8006976 <HAL_TIM_IC_Start_IT+0xb2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006974:	e00b      	b.n	800698e <HAL_TIM_IC_Start_IT+0xca>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d104      	bne.n	8006986 <HAL_TIM_IC_Start_IT+0xc2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006984:	e003      	b.n	800698e <HAL_TIM_IC_Start_IT+0xca>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Start_IT+0xda>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800699c:	e013      	b.n	80069c6 <HAL_TIM_IC_Start_IT+0x102>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Start_IT+0xea>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ac:	e00b      	b.n	80069c6 <HAL_TIM_IC_Start_IT+0x102>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Start_IT+0xfa>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069bc:	e003      	b.n	80069c6 <HAL_TIM_IC_Start_IT+0x102>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	d841      	bhi.n	8006a50 <HAL_TIM_IC_Start_IT+0x18c>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <HAL_TIM_IC_Start_IT+0x110>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	08006a09 	.word	0x08006a09
 80069d8:	08006a51 	.word	0x08006a51
 80069dc:	08006a51 	.word	0x08006a51
 80069e0:	08006a51 	.word	0x08006a51
 80069e4:	08006a1b 	.word	0x08006a1b
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	08006a51 	.word	0x08006a51
 80069f0:	08006a51 	.word	0x08006a51
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a51 	.word	0x08006a51
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	08006a51 	.word	0x08006a51
 8006a04:	08006a3f 	.word	0x08006a3f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0202 	orr.w	r2, r2, #2
 8006a16:	60da      	str	r2, [r3, #12]
      break;
 8006a18:	e01d      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0204 	orr.w	r2, r2, #4
 8006a28:	60da      	str	r2, [r3, #12]
      break;
 8006a2a:	e014      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0208 	orr.w	r2, r2, #8
 8006a3a:	60da      	str	r2, [r3, #12]
      break;
 8006a3c:	e00b      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0210 	orr.w	r2, r2, #16
 8006a4c:	60da      	str	r2, [r3, #12]
      break;
 8006a4e:	e002      	b.n	8006a56 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d148      	bne.n	8006aee <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2201      	movs	r2, #1
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 f89f 	bl	8007ba8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <HAL_TIM_IC_Start_IT+0x234>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <HAL_TIM_IC_Start_IT+0x238>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <HAL_TIM_IC_Start_IT+0x23c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <HAL_TIM_IC_Start_IT+0x240>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <HAL_TIM_IC_Start_IT+0x244>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <HAL_TIM_IC_Start_IT+0x248>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIM_IC_Start_IT+0x1f6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <HAL_TIM_IC_Start_IT+0x24c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d111      	bne.n	8006ade <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d010      	beq.n	8006aee <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006adc:	e007      	b.n	8006aee <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40010400 	.word	0x40010400
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40001800 	.word	0x40001800

08006b14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e097      	b.n	8006c58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fc fac1 	bl	80030c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b58:	f023 0307 	bic.w	r3, r3, #7
 8006b5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f000 fc09 	bl	8007380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bb4:	f023 030c 	bic.w	r3, r3, #12
 8006bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	011a      	lsls	r2, r3, #4
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	031b      	lsls	r3, r3, #12
 8006be4:	4313      	orrs	r3, r2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	4313      	orrs	r3, r2
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d122      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d11b      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0202 	mvn.w	r2, #2
 8006c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fb fdfe 	bl	80028a4 <HAL_TIM_IC_CaptureCallback>
 8006ca8:	e005      	b.n	8006cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb4a 	bl	8007344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fb51 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d122      	bne.n	8006d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d11b      	bne.n	8006d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0204 	mvn.w	r2, #4
 8006ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb fdd4 	bl	80028a4 <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fb20 	bl	8007344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb27 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d122      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d11b      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0208 	mvn.w	r2, #8
 8006d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb fdaa 	bl	80028a4 <HAL_TIM_IC_CaptureCallback>
 8006d50:	e005      	b.n	8006d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 faf6 	bl	8007344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fafd 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b10      	cmp	r3, #16
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0210 	mvn.w	r2, #16
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb fd80 	bl	80028a4 <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 facc 	bl	8007344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fad3 	bl	8007358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10e      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d107      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0201 	mvn.w	r2, #1
 8006ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fb fdf8 	bl	80029d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dee:	2b80      	cmp	r3, #128	; 0x80
 8006df0:	d10e      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 ffca 	bl	8007da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d10e      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e28:	2b40      	cmp	r3, #64	; 0x40
 8006e2a:	d107      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa98 	bl	800736c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d10e      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d107      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0220 	mvn.w	r2, #32
 8006e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 ff94 	bl	8007d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e088      	b.n	8006fa0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d11b      	bne.n	8006ed4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f000 fcb8 	bl	8007820 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 020c 	bic.w	r2, r2, #12
 8006ebe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6999      	ldr	r1, [r3, #24]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	619a      	str	r2, [r3, #24]
 8006ed2:	e060      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d11c      	bne.n	8006f14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f000 fd3c 	bl	8007966 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006efc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6999      	ldr	r1, [r3, #24]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	021a      	lsls	r2, r3, #8
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	619a      	str	r2, [r3, #24]
 8006f12:	e040      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d11b      	bne.n	8006f52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6819      	ldr	r1, [r3, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f000 fd89 	bl	8007a40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 020c 	bic.w	r2, r2, #12
 8006f3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69d9      	ldr	r1, [r3, #28]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	61da      	str	r2, [r3, #28]
 8006f50:	e021      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d11c      	bne.n	8006f92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f000 fda6 	bl	8007ab8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69da      	ldr	r2, [r3, #28]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69d9      	ldr	r1, [r3, #28]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	021a      	lsls	r2, r3, #8
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	61da      	str	r2, [r3, #28]
 8006f90:	e001      	b.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e0ae      	b.n	8007124 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b0c      	cmp	r3, #12
 8006fd2:	f200 809f 	bhi.w	8007114 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007011 	.word	0x08007011
 8006fe0:	08007115 	.word	0x08007115
 8006fe4:	08007115 	.word	0x08007115
 8006fe8:	08007115 	.word	0x08007115
 8006fec:	08007051 	.word	0x08007051
 8006ff0:	08007115 	.word	0x08007115
 8006ff4:	08007115 	.word	0x08007115
 8006ff8:	08007115 	.word	0x08007115
 8006ffc:	08007093 	.word	0x08007093
 8007000:	08007115 	.word	0x08007115
 8007004:	08007115 	.word	0x08007115
 8007008:	08007115 	.word	0x08007115
 800700c:	080070d3 	.word	0x080070d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fa52 	bl	80074c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0208 	orr.w	r2, r2, #8
 800702a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0204 	bic.w	r2, r2, #4
 800703a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6999      	ldr	r1, [r3, #24]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	691a      	ldr	r2, [r3, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	619a      	str	r2, [r3, #24]
      break;
 800704e:	e064      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	4618      	mov	r0, r3
 8007058:	f000 faa2 	bl	80075a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800706a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800707a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6999      	ldr	r1, [r3, #24]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	021a      	lsls	r2, r3, #8
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	619a      	str	r2, [r3, #24]
      break;
 8007090:	e043      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	4618      	mov	r0, r3
 800709a:	f000 faf7 	bl	800768c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0208 	orr.w	r2, r2, #8
 80070ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0204 	bic.w	r2, r2, #4
 80070bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69d9      	ldr	r1, [r3, #28]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	61da      	str	r2, [r3, #28]
      break;
 80070d0:	e023      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fb4b 	bl	8007774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69d9      	ldr	r1, [r3, #28]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	021a      	lsls	r2, r3, #8
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	61da      	str	r2, [r3, #28]
      break;
 8007112:	e002      	b.n	800711a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	75fb      	strb	r3, [r7, #23]
      break;
 8007118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIM_ConfigClockSource+0x1c>
 8007144:	2302      	movs	r3, #2
 8007146:	e0b4      	b.n	80072b2 <HAL_TIM_ConfigClockSource+0x186>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007180:	d03e      	beq.n	8007200 <HAL_TIM_ConfigClockSource+0xd4>
 8007182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007186:	f200 8087 	bhi.w	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718e:	f000 8086 	beq.w	800729e <HAL_TIM_ConfigClockSource+0x172>
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d87f      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b70      	cmp	r3, #112	; 0x70
 800719a:	d01a      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0xa6>
 800719c:	2b70      	cmp	r3, #112	; 0x70
 800719e:	d87b      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071a0:	2b60      	cmp	r3, #96	; 0x60
 80071a2:	d050      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0x11a>
 80071a4:	2b60      	cmp	r3, #96	; 0x60
 80071a6:	d877      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071a8:	2b50      	cmp	r3, #80	; 0x50
 80071aa:	d03c      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0xfa>
 80071ac:	2b50      	cmp	r3, #80	; 0x50
 80071ae:	d873      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d058      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x13a>
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d86f      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071b8:	2b30      	cmp	r3, #48	; 0x30
 80071ba:	d064      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071bc:	2b30      	cmp	r3, #48	; 0x30
 80071be:	d86b      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d060      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d867      	bhi.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d05c      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d05a      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x15a>
 80071d0:	e062      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6899      	ldr	r1, [r3, #8]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f000 fcc1 	bl	8007b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	609a      	str	r2, [r3, #8]
      break;
 80071fe:	e04f      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	6899      	ldr	r1, [r3, #8]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f000 fcaa 	bl	8007b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007222:	609a      	str	r2, [r3, #8]
      break;
 8007224:	e03c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	6859      	ldr	r1, [r3, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	461a      	mov	r2, r3
 8007234:	f000 fb68 	bl	8007908 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2150      	movs	r1, #80	; 0x50
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fc77 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007244:	e02c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	f000 fbc4 	bl	80079e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2160      	movs	r1, #96	; 0x60
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fc67 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007264:	e01c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6859      	ldr	r1, [r3, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	461a      	mov	r2, r3
 8007274:	f000 fb48 	bl	8007908 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2140      	movs	r1, #64	; 0x40
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fc57 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007284:	e00c      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f000 fc4e 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 8007296:	e003      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
      break;
 800729c:	e000      	b.n	80072a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800729e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d831      	bhi.n	8007334 <HAL_TIM_ReadCapturedValue+0x78>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	0800730d 	.word	0x0800730d
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007335 	.word	0x08007335
 80072e4:	08007335 	.word	0x08007335
 80072e8:	08007317 	.word	0x08007317
 80072ec:	08007335 	.word	0x08007335
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007335 	.word	0x08007335
 80072f8:	08007321 	.word	0x08007321
 80072fc:	08007335 	.word	0x08007335
 8007300:	08007335 	.word	0x08007335
 8007304:	08007335 	.word	0x08007335
 8007308:	0800732b 	.word	0x0800732b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	60fb      	str	r3, [r7, #12]

      break;
 8007314:	e00f      	b.n	8007336 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	60fb      	str	r3, [r7, #12]

      break;
 800731e:	e00a      	b.n	8007336 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	60fb      	str	r3, [r7, #12]

      break;
 8007328:	e005      	b.n	8007336 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	60fb      	str	r3, [r7, #12]

      break;
 8007332:	e000      	b.n	8007336 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007334:	bf00      	nop
  }

  return tmpreg;
 8007336:	68fb      	ldr	r3, [r7, #12]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a40      	ldr	r2, [pc, #256]	; (8007494 <TIM_Base_SetConfig+0x114>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d013      	beq.n	80073c0 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739e:	d00f      	beq.n	80073c0 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a3d      	ldr	r2, [pc, #244]	; (8007498 <TIM_Base_SetConfig+0x118>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00b      	beq.n	80073c0 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a3c      	ldr	r2, [pc, #240]	; (800749c <TIM_Base_SetConfig+0x11c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d007      	beq.n	80073c0 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a3b      	ldr	r2, [pc, #236]	; (80074a0 <TIM_Base_SetConfig+0x120>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_Base_SetConfig+0x40>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a3a      	ldr	r2, [pc, #232]	; (80074a4 <TIM_Base_SetConfig+0x124>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d108      	bne.n	80073d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <TIM_Base_SetConfig+0x114>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d02b      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e0:	d027      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a2c      	ldr	r2, [pc, #176]	; (8007498 <TIM_Base_SetConfig+0x118>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d023      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2b      	ldr	r2, [pc, #172]	; (800749c <TIM_Base_SetConfig+0x11c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01f      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a2a      	ldr	r2, [pc, #168]	; (80074a0 <TIM_Base_SetConfig+0x120>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d01b      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a29      	ldr	r2, [pc, #164]	; (80074a4 <TIM_Base_SetConfig+0x124>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d017      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a28      	ldr	r2, [pc, #160]	; (80074a8 <TIM_Base_SetConfig+0x128>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a27      	ldr	r2, [pc, #156]	; (80074ac <TIM_Base_SetConfig+0x12c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a26      	ldr	r2, [pc, #152]	; (80074b0 <TIM_Base_SetConfig+0x130>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a25      	ldr	r2, [pc, #148]	; (80074b4 <TIM_Base_SetConfig+0x134>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a24      	ldr	r2, [pc, #144]	; (80074b8 <TIM_Base_SetConfig+0x138>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a23      	ldr	r2, [pc, #140]	; (80074bc <TIM_Base_SetConfig+0x13c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a0a      	ldr	r2, [pc, #40]	; (8007494 <TIM_Base_SetConfig+0x114>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_Base_SetConfig+0xf8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a0c      	ldr	r2, [pc, #48]	; (80074a4 <TIM_Base_SetConfig+0x124>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d103      	bne.n	8007480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	615a      	str	r2, [r3, #20]
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40010000 	.word	0x40010000
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40010400 	.word	0x40010400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800
 80074b4:	40001800 	.word	0x40001800
 80074b8:	40001c00 	.word	0x40001c00
 80074bc:	40002000 	.word	0x40002000

080074c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0201 	bic.w	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 0302 	bic.w	r3, r3, #2
 8007508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a20      	ldr	r2, [pc, #128]	; (8007598 <TIM_OC1_SetConfig+0xd8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_OC1_SetConfig+0x64>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a1f      	ldr	r2, [pc, #124]	; (800759c <TIM_OC1_SetConfig+0xdc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d10c      	bne.n	800753e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f023 0308 	bic.w	r3, r3, #8
 800752a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f023 0304 	bic.w	r3, r3, #4
 800753c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a15      	ldr	r2, [pc, #84]	; (8007598 <TIM_OC1_SetConfig+0xd8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d003      	beq.n	800754e <TIM_OC1_SetConfig+0x8e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a14      	ldr	r2, [pc, #80]	; (800759c <TIM_OC1_SetConfig+0xdc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d111      	bne.n	8007572 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800755c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	621a      	str	r2, [r3, #32]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	40010000 	.word	0x40010000
 800759c:	40010400 	.word	0x40010400

080075a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0210 	bic.w	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f023 0320 	bic.w	r3, r3, #32
 80075ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a22      	ldr	r2, [pc, #136]	; (8007684 <TIM_OC2_SetConfig+0xe4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_OC2_SetConfig+0x68>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <TIM_OC2_SetConfig+0xe8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d10d      	bne.n	8007624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a17      	ldr	r2, [pc, #92]	; (8007684 <TIM_OC2_SetConfig+0xe4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC2_SetConfig+0x94>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a16      	ldr	r2, [pc, #88]	; (8007688 <TIM_OC2_SetConfig+0xe8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d113      	bne.n	800765c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800763a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40010000 	.word	0x40010000
 8007688:	40010400 	.word	0x40010400

0800768c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a21      	ldr	r2, [pc, #132]	; (800776c <TIM_OC3_SetConfig+0xe0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_OC3_SetConfig+0x66>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a20      	ldr	r2, [pc, #128]	; (8007770 <TIM_OC3_SetConfig+0xe4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d10d      	bne.n	800770e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800770c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a16      	ldr	r2, [pc, #88]	; (800776c <TIM_OC3_SetConfig+0xe0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_OC3_SetConfig+0x92>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a15      	ldr	r2, [pc, #84]	; (8007770 <TIM_OC3_SetConfig+0xe4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d113      	bne.n	8007746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800772c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40010000 	.word	0x40010000
 8007770:	40010400 	.word	0x40010400

08007774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a12      	ldr	r2, [pc, #72]	; (8007818 <TIM_OC4_SetConfig+0xa4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC4_SetConfig+0x68>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a11      	ldr	r2, [pc, #68]	; (800781c <TIM_OC4_SetConfig+0xa8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d109      	bne.n	80077f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	019b      	lsls	r3, r3, #6
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40010000 	.word	0x40010000
 800781c:	40010400 	.word	0x40010400

08007820 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a28      	ldr	r2, [pc, #160]	; (80078ec <TIM_TI1_SetConfig+0xcc>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01b      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007854:	d017      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4a25      	ldr	r2, [pc, #148]	; (80078f0 <TIM_TI1_SetConfig+0xd0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d013      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a24      	ldr	r2, [pc, #144]	; (80078f4 <TIM_TI1_SetConfig+0xd4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00f      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <TIM_TI1_SetConfig+0xd8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00b      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4a22      	ldr	r2, [pc, #136]	; (80078fc <TIM_TI1_SetConfig+0xdc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d007      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4a21      	ldr	r2, [pc, #132]	; (8007900 <TIM_TI1_SetConfig+0xe0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d003      	beq.n	8007886 <TIM_TI1_SetConfig+0x66>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4a20      	ldr	r2, [pc, #128]	; (8007904 <TIM_TI1_SetConfig+0xe4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d101      	bne.n	800788a <TIM_TI1_SetConfig+0x6a>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <TIM_TI1_SetConfig+0x6c>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e003      	b.n	80078aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f023 030a 	bic.w	r3, r3, #10
 80078c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f003 030a 	and.w	r3, r3, #10
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40010000 	.word	0x40010000
 80078f0:	40000400 	.word	0x40000400
 80078f4:	40000800 	.word	0x40000800
 80078f8:	40000c00 	.word	0x40000c00
 80078fc:	40010400 	.word	0x40010400
 8007900:	40014000 	.word	0x40014000
 8007904:	40001800 	.word	0x40001800

08007908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f023 0201 	bic.w	r2, r3, #1
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f023 030a 	bic.w	r3, r3, #10
 8007944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007966:	b480      	push	{r7}
 8007968:	b087      	sub	sp, #28
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	607a      	str	r2, [r7, #4]
 8007972:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	f023 0210 	bic.w	r2, r3, #16
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007992:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	031b      	lsls	r3, r3, #12
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	621a      	str	r2, [r3, #32]
}
 80079d4:	bf00      	nop
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	f023 0210 	bic.w	r2, r3, #16
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	031b      	lsls	r3, r3, #12
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	621a      	str	r2, [r3, #32]
}
 8007a34:	bf00      	nop
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f023 0303 	bic.w	r3, r3, #3
 8007a6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007a90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	621a      	str	r2, [r3, #32]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	031b      	lsls	r3, r3, #12
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	031b      	lsls	r3, r3, #12
 8007b10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f043 0307 	orr.w	r3, r3, #7
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	021a      	lsls	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	2201      	movs	r2, #1
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	401a      	ands	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1a      	ldr	r2, [r3, #32]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e05a      	b.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a21      	ldr	r2, [pc, #132]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d022      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c58:	d01d      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d018      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d013      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00e      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a17      	ldr	r2, [pc, #92]	; (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10c      	bne.n	8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40010000 	.word	0x40010000
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	40010400 	.word	0x40010400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40001800 	.word	0x40001800

08007cec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e03d      	b.n	8007d84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e03f      	b.n	8007e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fb fa9e 	bl	8003320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2224      	movs	r2, #36	; 0x24
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fd7b 	bl	80088f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b08a      	sub	sp, #40	; 0x28
 8007e56:	af02      	add	r7, sp, #8
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	603b      	str	r3, [r7, #0]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d17c      	bne.n	8007f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_UART_Transmit+0x2c>
 8007e78:	88fb      	ldrh	r3, [r7, #6]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e075      	b.n	8007f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_UART_Transmit+0x3e>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e06e      	b.n	8007f6e <HAL_UART_Transmit+0x11c>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2221      	movs	r2, #33	; 0x21
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ea6:	f7fb faeb 	bl	8003480 <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	88fa      	ldrh	r2, [r7, #6]
 8007eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec0:	d108      	bne.n	8007ed4 <HAL_UART_Transmit+0x82>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d104      	bne.n	8007ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e003      	b.n	8007edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ee4:	e02a      	b.n	8007f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2200      	movs	r2, #0
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 faf9 	bl	80084e8 <UART_WaitOnFlagUntilTimeout>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e036      	b.n	8007f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	3302      	adds	r3, #2
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	e007      	b.n	8007f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1cf      	bne.n	8007ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2140      	movs	r1, #64	; 0x40
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fac9 	bl	80084e8 <UART_WaitOnFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e006      	b.n	8007f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e000      	b.n	8007f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f6c:	2302      	movs	r3, #2
  }
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3720      	adds	r7, #32
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b0ba      	sub	sp, #232	; 0xe8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10f      	bne.n	8007fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <HAL_UART_IRQHandler+0x66>
 8007fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fbd3 	bl	8008782 <UART_Receive_IT>
      return;
 8007fdc:	e256      	b.n	800848c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 80de 	beq.w	80081a4 <HAL_UART_IRQHandler+0x22c>
 8007fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80d1 	beq.w	80081a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <HAL_UART_IRQHandler+0xae>
 800800e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f043 0201 	orr.w	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <HAL_UART_IRQHandler+0xd2>
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f043 0202 	orr.w	r2, r3, #2
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800804a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <HAL_UART_IRQHandler+0xf6>
 8008056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f043 0204 	orr.w	r2, r3, #4
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800806e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d011      	beq.n	800809e <HAL_UART_IRQHandler+0x126>
 800807a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	d105      	bne.n	8008092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f043 0208 	orr.w	r2, r3, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 81ed 	beq.w	8008482 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <HAL_UART_IRQHandler+0x14e>
 80080b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b8:	f003 0320 	and.w	r3, r3, #32
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb5e 	bl	8008782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b40      	cmp	r3, #64	; 0x40
 80080d2:	bf0c      	ite	eq
 80080d4:	2301      	moveq	r3, #1
 80080d6:	2300      	movne	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <HAL_UART_IRQHandler+0x17a>
 80080ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d04f      	beq.n	8008192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa66 	bl	80085c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d141      	bne.n	800818a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3314      	adds	r3, #20
 800810c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800811c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3314      	adds	r3, #20
 800812e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800813e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800814a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1d9      	bne.n	8008106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	2b00      	cmp	r3, #0
 8008158:	d013      	beq.n	8008182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	4a7d      	ldr	r2, [pc, #500]	; (8008354 <HAL_UART_IRQHandler+0x3dc>)
 8008160:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	4618      	mov	r0, r3
 8008168:	f7fc f8c0 	bl	80042ec <HAL_DMA_Abort_IT>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d016      	beq.n	80081a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008180:	e00e      	b.n	80081a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f99a 	bl	80084bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008188:	e00a      	b.n	80081a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f996 	bl	80084bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008190:	e006      	b.n	80081a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f992 	bl	80084bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800819e:	e170      	b.n	8008482 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a0:	bf00      	nop
    return;
 80081a2:	e16e      	b.n	8008482 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	f040 814a 	bne.w	8008442 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0310 	and.w	r3, r3, #16
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8143 	beq.w	8008442 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 813c 	beq.w	8008442 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081ca:	2300      	movs	r3, #0
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	f040 80b4 	bne.w	8008358 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8140 	beq.w	8008486 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800820a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800820e:	429a      	cmp	r2, r3
 8008210:	f080 8139 	bcs.w	8008486 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800821a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008226:	f000 8088 	beq.w	800833a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	330c      	adds	r3, #12
 8008252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800825a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800826e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1d9      	bne.n	800822a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3314      	adds	r3, #20
 800827c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008288:	f023 0301 	bic.w	r3, r3, #1
 800828c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3314      	adds	r3, #20
 8008296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800829a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800829e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e1      	bne.n	8008276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3314      	adds	r3, #20
 80082b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3314      	adds	r3, #20
 80082d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e3      	bne.n	80082b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830a:	f023 0310 	bic.w	r3, r3, #16
 800830e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	330c      	adds	r3, #12
 8008318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800831c:	65ba      	str	r2, [r7, #88]	; 0x58
 800831e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800832a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e3      	bne.n	80082f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	4618      	mov	r0, r3
 8008336:	f7fb ff69 	bl	800420c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008342:	b29b      	uxth	r3, r3
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	b29b      	uxth	r3, r3
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8c0 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008350:	e099      	b.n	8008486 <HAL_UART_IRQHandler+0x50e>
 8008352:	bf00      	nop
 8008354:	0800868b 	.word	0x0800868b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008360:	b29b      	uxth	r3, r3
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800836c:	b29b      	uxth	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 808b 	beq.w	800848a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8086 	beq.w	800848a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	330c      	adds	r3, #12
 800839e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083a2:	647a      	str	r2, [r7, #68]	; 0x44
 80083a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e3      	bne.n	800837e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3314      	adds	r3, #20
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	623b      	str	r3, [r7, #32]
   return(result);
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f023 0301 	bic.w	r3, r3, #1
 80083cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3314      	adds	r3, #20
 80083d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083da:	633a      	str	r2, [r7, #48]	; 0x30
 80083dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e3      	bne.n	80083b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	60fb      	str	r3, [r7, #12]
   return(result);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0310 	bic.w	r3, r3, #16
 8008412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	330c      	adds	r3, #12
 800841c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008420:	61fa      	str	r2, [r7, #28]
 8008422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	69b9      	ldr	r1, [r7, #24]
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	617b      	str	r3, [r7, #20]
   return(result);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e3      	bne.n	80083fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f848 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008440:	e023      	b.n	800848a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <HAL_UART_IRQHandler+0x4ea>
 800844e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f929 	bl	80086b2 <UART_Transmit_IT>
    return;
 8008460:	e014      	b.n	800848c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00e      	beq.n	800848c <HAL_UART_IRQHandler+0x514>
 800846e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d008      	beq.n	800848c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f969 	bl	8008752 <UART_EndTransmit_IT>
    return;
 8008480:	e004      	b.n	800848c <HAL_UART_IRQHandler+0x514>
    return;
 8008482:	bf00      	nop
 8008484:	e002      	b.n	800848c <HAL_UART_IRQHandler+0x514>
      return;
 8008486:	bf00      	nop
 8008488:	e000      	b.n	800848c <HAL_UART_IRQHandler+0x514>
      return;
 800848a:	bf00      	nop
  }
}
 800848c:	37e8      	adds	r7, #232	; 0xe8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop

08008494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b090      	sub	sp, #64	; 0x40
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f8:	e050      	b.n	800859c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d04c      	beq.n	800859c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <UART_WaitOnFlagUntilTimeout+0x30>
 8008508:	f7fa ffba 	bl	8003480 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008514:	429a      	cmp	r2, r3
 8008516:	d241      	bcs.n	800859c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	330c      	adds	r3, #12
 8008536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008538:	637a      	str	r2, [r7, #52]	; 0x34
 800853a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800853e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e5      	bne.n	8008518 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3314      	adds	r3, #20
 8008552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	613b      	str	r3, [r7, #16]
   return(result);
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800856c:	623a      	str	r2, [r7, #32]
 800856e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	69f9      	ldr	r1, [r7, #28]
 8008572:	6a3a      	ldr	r2, [r7, #32]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	61bb      	str	r3, [r7, #24]
   return(result);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e5      	bne.n	800854c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e00f      	b.n	80085bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4013      	ands	r3, r2
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d09f      	beq.n	80084fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3740      	adds	r7, #64	; 0x40
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b095      	sub	sp, #84	; 0x54
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	330c      	adds	r3, #12
 80085ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ec:	643a      	str	r2, [r7, #64]	; 0x40
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e5      	bne.n	80085cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f023 0301 	bic.w	r3, r3, #1
 8008616:	64bb      	str	r3, [r7, #72]	; 0x48
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3314      	adds	r3, #20
 800861e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e5      	bne.n	8008600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	2b01      	cmp	r3, #1
 800863a:	d119      	bne.n	8008670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	60bb      	str	r3, [r7, #8]
   return(result);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f023 0310 	bic.w	r3, r3, #16
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800865c:	61ba      	str	r2, [r7, #24]
 800865e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6979      	ldr	r1, [r7, #20]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	613b      	str	r3, [r7, #16]
   return(result);
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800867e:	bf00      	nop
 8008680:	3754      	adds	r7, #84	; 0x54
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff ff09 	bl	80084bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086aa:	bf00      	nop
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b21      	cmp	r3, #33	; 0x21
 80086c4:	d13e      	bne.n	8008744 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ce:	d114      	bne.n	80086fa <UART_Transmit_IT+0x48>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d110      	bne.n	80086fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	1c9a      	adds	r2, r3, #2
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	621a      	str	r2, [r3, #32]
 80086f8:	e008      	b.n	800870c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	1c59      	adds	r1, r3, #1
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6211      	str	r1, [r2, #32]
 8008704:	781a      	ldrb	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29b      	uxth	r3, r3
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4619      	mov	r1, r3
 800871a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10f      	bne.n	8008740 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800872e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800873e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	e000      	b.n	8008746 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008744:	2302      	movs	r3, #2
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff fe8e 	bl	8008494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b08c      	sub	sp, #48	; 0x30
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b22      	cmp	r3, #34	; 0x22
 8008794:	f040 80ab 	bne.w	80088ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a0:	d117      	bne.n	80087d2 <UART_Receive_IT+0x50>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d113      	bne.n	80087d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	1c9a      	adds	r2, r3, #2
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	629a      	str	r2, [r3, #40]	; 0x28
 80087d0:	e026      	b.n	8008820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e4:	d007      	beq.n	80087f6 <UART_Receive_IT+0x74>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <UART_Receive_IT+0x82>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	e008      	b.n	8008816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008810:	b2da      	uxtb	r2, r3
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008824:	b29b      	uxth	r3, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	b29b      	uxth	r3, r3
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4619      	mov	r1, r3
 800882e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008830:	2b00      	cmp	r3, #0
 8008832:	d15a      	bne.n	80088ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0220 	bic.w	r2, r2, #32
 8008842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0201 	bic.w	r2, r2, #1
 8008862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	2b01      	cmp	r3, #1
 8008872:	d135      	bne.n	80088e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	613b      	str	r3, [r7, #16]
   return(result);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f023 0310 	bic.w	r3, r3, #16
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	330c      	adds	r3, #12
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	623a      	str	r2, [r7, #32]
 800889c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	69f9      	ldr	r1, [r7, #28]
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e5      	bne.n	800887a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b10      	cmp	r3, #16
 80088ba:	d10a      	bne.n	80088d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fdf9 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
 80088de:	e002      	b.n	80088e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fde1 	bl	80084a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e002      	b.n	80088f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e000      	b.n	80088f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3730      	adds	r7, #48	; 0x30
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	b09f      	sub	sp, #124	; 0x7c
 80088fe:	af00      	add	r7, sp, #0
 8008900:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800890c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890e:	68d9      	ldr	r1, [r3, #12]
 8008910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	ea40 0301 	orr.w	r3, r0, r1
 8008918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800891a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	431a      	orrs	r2, r3
 8008924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	431a      	orrs	r2, r3
 800892a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	4313      	orrs	r3, r2
 8008930:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800893c:	f021 010c 	bic.w	r1, r1, #12
 8008940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008946:	430b      	orrs	r3, r1
 8008948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800894a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008956:	6999      	ldr	r1, [r3, #24]
 8008958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	ea40 0301 	orr.w	r3, r0, r1
 8008960:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4bc5      	ldr	r3, [pc, #788]	; (8008c7c <UART_SetConfig+0x384>)
 8008968:	429a      	cmp	r2, r3
 800896a:	d004      	beq.n	8008976 <UART_SetConfig+0x7e>
 800896c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4bc3      	ldr	r3, [pc, #780]	; (8008c80 <UART_SetConfig+0x388>)
 8008972:	429a      	cmp	r2, r3
 8008974:	d103      	bne.n	800897e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008976:	f7fd f9a7 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 800897a:	6778      	str	r0, [r7, #116]	; 0x74
 800897c:	e002      	b.n	8008984 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800897e:	f7fd f98f 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 8008982:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898c:	f040 80b6 	bne.w	8008afc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008992:	461c      	mov	r4, r3
 8008994:	f04f 0500 	mov.w	r5, #0
 8008998:	4622      	mov	r2, r4
 800899a:	462b      	mov	r3, r5
 800899c:	1891      	adds	r1, r2, r2
 800899e:	6439      	str	r1, [r7, #64]	; 0x40
 80089a0:	415b      	adcs	r3, r3
 80089a2:	647b      	str	r3, [r7, #68]	; 0x44
 80089a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089a8:	1912      	adds	r2, r2, r4
 80089aa:	eb45 0303 	adc.w	r3, r5, r3
 80089ae:	f04f 0000 	mov.w	r0, #0
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	00d9      	lsls	r1, r3, #3
 80089b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089bc:	00d0      	lsls	r0, r2, #3
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	1911      	adds	r1, r2, r4
 80089c4:	6639      	str	r1, [r7, #96]	; 0x60
 80089c6:	416b      	adcs	r3, r5
 80089c8:	667b      	str	r3, [r7, #100]	; 0x64
 80089ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	1891      	adds	r1, r2, r2
 80089d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80089d8:	415b      	adcs	r3, r3
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089e4:	f7f8 f8f0 	bl	8000bc8 <__aeabi_uldivmod>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4ba5      	ldr	r3, [pc, #660]	; (8008c84 <UART_SetConfig+0x38c>)
 80089ee:	fba3 2302 	umull	r2, r3, r3, r2
 80089f2:	095b      	lsrs	r3, r3, #5
 80089f4:	011e      	lsls	r6, r3, #4
 80089f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f8:	461c      	mov	r4, r3
 80089fa:	f04f 0500 	mov.w	r5, #0
 80089fe:	4622      	mov	r2, r4
 8008a00:	462b      	mov	r3, r5
 8008a02:	1891      	adds	r1, r2, r2
 8008a04:	6339      	str	r1, [r7, #48]	; 0x30
 8008a06:	415b      	adcs	r3, r3
 8008a08:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a0e:	1912      	adds	r2, r2, r4
 8008a10:	eb45 0303 	adc.w	r3, r5, r3
 8008a14:	f04f 0000 	mov.w	r0, #0
 8008a18:	f04f 0100 	mov.w	r1, #0
 8008a1c:	00d9      	lsls	r1, r3, #3
 8008a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a22:	00d0      	lsls	r0, r2, #3
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	1911      	adds	r1, r2, r4
 8008a2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a2c:	416b      	adcs	r3, r5
 8008a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	461a      	mov	r2, r3
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	1891      	adds	r1, r2, r2
 8008a3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a3e:	415b      	adcs	r3, r3
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a4a:	f7f8 f8bd 	bl	8000bc8 <__aeabi_uldivmod>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4b8c      	ldr	r3, [pc, #560]	; (8008c84 <UART_SetConfig+0x38c>)
 8008a54:	fba3 1302 	umull	r1, r3, r3, r2
 8008a58:	095b      	lsrs	r3, r3, #5
 8008a5a:	2164      	movs	r1, #100	; 0x64
 8008a5c:	fb01 f303 	mul.w	r3, r1, r3
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	3332      	adds	r3, #50	; 0x32
 8008a66:	4a87      	ldr	r2, [pc, #540]	; (8008c84 <UART_SetConfig+0x38c>)
 8008a68:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a74:	441e      	add	r6, r3
 8008a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f04f 0100 	mov.w	r1, #0
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	1894      	adds	r4, r2, r2
 8008a84:	623c      	str	r4, [r7, #32]
 8008a86:	415b      	adcs	r3, r3
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a8e:	1812      	adds	r2, r2, r0
 8008a90:	eb41 0303 	adc.w	r3, r1, r3
 8008a94:	f04f 0400 	mov.w	r4, #0
 8008a98:	f04f 0500 	mov.w	r5, #0
 8008a9c:	00dd      	lsls	r5, r3, #3
 8008a9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008aa2:	00d4      	lsls	r4, r2, #3
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	462b      	mov	r3, r5
 8008aa8:	1814      	adds	r4, r2, r0
 8008aaa:	653c      	str	r4, [r7, #80]	; 0x50
 8008aac:	414b      	adcs	r3, r1
 8008aae:	657b      	str	r3, [r7, #84]	; 0x54
 8008ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f04f 0300 	mov.w	r3, #0
 8008aba:	1891      	adds	r1, r2, r2
 8008abc:	61b9      	str	r1, [r7, #24]
 8008abe:	415b      	adcs	r3, r3
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ac6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008aca:	f7f8 f87d 	bl	8000bc8 <__aeabi_uldivmod>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4b6c      	ldr	r3, [pc, #432]	; (8008c84 <UART_SetConfig+0x38c>)
 8008ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ad8:	095b      	lsrs	r3, r3, #5
 8008ada:	2164      	movs	r1, #100	; 0x64
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	3332      	adds	r3, #50	; 0x32
 8008ae6:	4a67      	ldr	r2, [pc, #412]	; (8008c84 <UART_SetConfig+0x38c>)
 8008ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	f003 0207 	and.w	r2, r3, #7
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4432      	add	r2, r6
 8008af8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008afa:	e0b9      	b.n	8008c70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008afe:	461c      	mov	r4, r3
 8008b00:	f04f 0500 	mov.w	r5, #0
 8008b04:	4622      	mov	r2, r4
 8008b06:	462b      	mov	r3, r5
 8008b08:	1891      	adds	r1, r2, r2
 8008b0a:	6139      	str	r1, [r7, #16]
 8008b0c:	415b      	adcs	r3, r3
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b14:	1912      	adds	r2, r2, r4
 8008b16:	eb45 0303 	adc.w	r3, r5, r3
 8008b1a:	f04f 0000 	mov.w	r0, #0
 8008b1e:	f04f 0100 	mov.w	r1, #0
 8008b22:	00d9      	lsls	r1, r3, #3
 8008b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b28:	00d0      	lsls	r0, r2, #3
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	eb12 0804 	adds.w	r8, r2, r4
 8008b32:	eb43 0905 	adc.w	r9, r3, r5
 8008b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f04f 0100 	mov.w	r1, #0
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	008b      	lsls	r3, r1, #2
 8008b4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b4e:	0082      	lsls	r2, r0, #2
 8008b50:	4640      	mov	r0, r8
 8008b52:	4649      	mov	r1, r9
 8008b54:	f7f8 f838 	bl	8000bc8 <__aeabi_uldivmod>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4b49      	ldr	r3, [pc, #292]	; (8008c84 <UART_SetConfig+0x38c>)
 8008b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	011e      	lsls	r6, r3, #4
 8008b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f04f 0100 	mov.w	r1, #0
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	1894      	adds	r4, r2, r2
 8008b74:	60bc      	str	r4, [r7, #8]
 8008b76:	415b      	adcs	r3, r3
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b7e:	1812      	adds	r2, r2, r0
 8008b80:	eb41 0303 	adc.w	r3, r1, r3
 8008b84:	f04f 0400 	mov.w	r4, #0
 8008b88:	f04f 0500 	mov.w	r5, #0
 8008b8c:	00dd      	lsls	r5, r3, #3
 8008b8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b92:	00d4      	lsls	r4, r2, #3
 8008b94:	4622      	mov	r2, r4
 8008b96:	462b      	mov	r3, r5
 8008b98:	1814      	adds	r4, r2, r0
 8008b9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b9c:	414b      	adcs	r3, r1
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f04f 0100 	mov.w	r1, #0
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	008b      	lsls	r3, r1, #2
 8008bb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bb8:	0082      	lsls	r2, r0, #2
 8008bba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008bbe:	f7f8 f803 	bl	8000bc8 <__aeabi_uldivmod>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4b2f      	ldr	r3, [pc, #188]	; (8008c84 <UART_SetConfig+0x38c>)
 8008bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	2164      	movs	r1, #100	; 0x64
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	3332      	adds	r3, #50	; 0x32
 8008bda:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <UART_SetConfig+0x38c>)
 8008bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008be0:	095b      	lsrs	r3, r3, #5
 8008be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008be6:	441e      	add	r6, r3
 8008be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bea:	4618      	mov	r0, r3
 8008bec:	f04f 0100 	mov.w	r1, #0
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	1894      	adds	r4, r2, r2
 8008bf6:	603c      	str	r4, [r7, #0]
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	607b      	str	r3, [r7, #4]
 8008bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c00:	1812      	adds	r2, r2, r0
 8008c02:	eb41 0303 	adc.w	r3, r1, r3
 8008c06:	f04f 0400 	mov.w	r4, #0
 8008c0a:	f04f 0500 	mov.w	r5, #0
 8008c0e:	00dd      	lsls	r5, r3, #3
 8008c10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c14:	00d4      	lsls	r4, r2, #3
 8008c16:	4622      	mov	r2, r4
 8008c18:	462b      	mov	r3, r5
 8008c1a:	eb12 0a00 	adds.w	sl, r2, r0
 8008c1e:	eb43 0b01 	adc.w	fp, r3, r1
 8008c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f04f 0100 	mov.w	r1, #0
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	008b      	lsls	r3, r1, #2
 8008c36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c3a:	0082      	lsls	r2, r0, #2
 8008c3c:	4650      	mov	r0, sl
 8008c3e:	4659      	mov	r1, fp
 8008c40:	f7f7 ffc2 	bl	8000bc8 <__aeabi_uldivmod>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <UART_SetConfig+0x38c>)
 8008c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	2164      	movs	r1, #100	; 0x64
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	3332      	adds	r3, #50	; 0x32
 8008c5c:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <UART_SetConfig+0x38c>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	f003 020f 	and.w	r2, r3, #15
 8008c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4432      	add	r2, r6
 8008c6e:	609a      	str	r2, [r3, #8]
}
 8008c70:	bf00      	nop
 8008c72:	377c      	adds	r7, #124	; 0x7c
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40011000 	.word	0x40011000
 8008c80:	40011400 	.word	0x40011400
 8008c84:	51eb851f 	.word	0x51eb851f

08008c88 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 fca4 	bl	800a5e6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	218a      	movs	r1, #138	; 0x8a
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f004 fc03 	bl	800d4d4 <VL53L0X_WrByte>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8008cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008ce0:	b5b0      	push	{r4, r5, r7, lr}
 8008ce2:	b096      	sub	sp, #88	; 0x58
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008cee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d107      	bne.n	8008d06 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2188      	movs	r1, #136	; 0x88
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f004 fbea 	bl	800d4d4 <VL53L0X_WrByte>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d14:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008d1e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a9e      	ldr	r2, [pc, #632]	; (8008fa0 <VL53L0X_DataInit+0x2c0>)
 8008d26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a9d      	ldr	r2, [pc, #628]	; (8008fa4 <VL53L0X_DataInit+0x2c4>)
 8008d2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008d38:	f107 0310 	add.w	r3, r7, #16
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fab4 	bl	80092ac <VL53L0X_GetDeviceParameters>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8008d4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d112      	bne.n	8008d78 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008d52:	2300      	movs	r3, #0
 8008d54:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008d56:	2300      	movs	r3, #0
 8008d58:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f103 0410 	add.w	r4, r3, #16
 8008d60:	f107 0510 	add.w	r5, r7, #16
 8008d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2264      	movs	r2, #100	; 0x64
 8008d7c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008d86:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d90:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008d9a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008da6:	2201      	movs	r2, #1
 8008da8:	2180      	movs	r1, #128	; 0x80
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f004 fb92 	bl	800d4d4 <VL53L0X_WrByte>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	21ff      	movs	r1, #255	; 0xff
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f004 fb86 	bl	800d4d4 <VL53L0X_WrByte>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f004 fb7a 	bl	800d4d4 <VL53L0X_WrByte>
 8008de0:	4603      	mov	r3, r0
 8008de2:	461a      	mov	r2, r3
 8008de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008de8:	4313      	orrs	r3, r2
 8008dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008dee:	f107 030f 	add.w	r3, r7, #15
 8008df2:	461a      	mov	r2, r3
 8008df4:	2191      	movs	r1, #145	; 0x91
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f004 fbee 	bl	800d5d8 <VL53L0X_RdByte>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008e12:	2201      	movs	r2, #1
 8008e14:	2100      	movs	r1, #0
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f004 fb5c 	bl	800d4d4 <VL53L0X_WrByte>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e24:	4313      	orrs	r3, r2
 8008e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	21ff      	movs	r1, #255	; 0xff
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f004 fb50 	bl	800d4d4 <VL53L0X_WrByte>
 8008e34:	4603      	mov	r3, r0
 8008e36:	461a      	mov	r2, r3
 8008e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008e42:	2200      	movs	r2, #0
 8008e44:	2180      	movs	r1, #128	; 0x80
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f004 fb44 	bl	800d4d4 <VL53L0X_WrByte>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e54:	4313      	orrs	r3, r2
 8008e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e5e:	e014      	b.n	8008e8a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8008e60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d114      	bne.n	8008e92 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8008e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fd0f 	bl	8009894 <VL53L0X_SetLimitCheckEnable>
 8008e76:	4603      	mov	r3, r0
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e86:	3301      	adds	r3, #1
 8008e88:	653b      	str	r3, [r7, #80]	; 0x50
 8008e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e8c:	2b05      	cmp	r3, #5
 8008e8e:	dde7      	ble.n	8008e60 <VL53L0X_DataInit+0x180>
 8008e90:	e000      	b.n	8008e94 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008e92:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008e94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d107      	bne.n	8008eac <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2102      	movs	r1, #2
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcf7 	bl	8009894 <VL53L0X_SetLimitCheckEnable>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008eac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d107      	bne.n	8008ec4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2103      	movs	r1, #3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fceb 	bl	8009894 <VL53L0X_SetLimitCheckEnable>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008ec4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2104      	movs	r1, #4
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fcdf 	bl	8009894 <VL53L0X_SetLimitCheckEnable>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008edc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d107      	bne.n	8008ef4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2105      	movs	r1, #5
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fcd3 	bl	8009894 <VL53L0X_SetLimitCheckEnable>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008ef4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d108      	bne.n	8008f0e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008efc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fd76 	bl	80099f4 <VL53L0X_SetLimitCheckValue>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008f0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d108      	bne.n	8008f28 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fd69 	bl	80099f4 <VL53L0X_SetLimitCheckValue>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d108      	bne.n	8008f42 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f30:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008f34:	2102      	movs	r1, #2
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fd5c 	bl	80099f4 <VL53L0X_SetLimitCheckValue>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d107      	bne.n	8008f5a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2103      	movs	r1, #3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fd50 	bl	80099f4 <VL53L0X_SetLimitCheckValue>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10f      	bne.n	8008f82 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	22ff      	movs	r2, #255	; 0xff
 8008f66:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008f6a:	22ff      	movs	r2, #255	; 0xff
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f004 fab0 	bl	800d4d4 <VL53L0X_WrByte>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008f82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008f92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3758      	adds	r7, #88	; 0x58
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	00016b85 	.word	0x00016b85
 8008fa4:	000970a4 	.word	0x000970a4

08008fa8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008fa8:	b5b0      	push	{r4, r5, r7, lr}
 8008faa:	b09e      	sub	sp, #120	; 0x78
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008fb6:	f107 031c 	add.w	r3, r7, #28
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f006 fe65 	bl	800fc8e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f002 fa40 	bl	800b46c <VL53L0X_get_info_from_device>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8008ff8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009008:	2b01      	cmp	r3, #1
 800900a:	d80d      	bhi.n	8009028 <VL53L0X_StaticInit+0x80>
 800900c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009010:	2b01      	cmp	r3, #1
 8009012:	d102      	bne.n	800901a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009016:	2b20      	cmp	r3, #32
 8009018:	d806      	bhi.n	8009028 <VL53L0X_StaticInit+0x80>
 800901a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10e      	bne.n	8009040 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009024:	2b0c      	cmp	r3, #12
 8009026:	d90b      	bls.n	8009040 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009028:	f107 0218 	add.w	r2, r7, #24
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fcd2 	bl	800a9dc <VL53L0X_perform_ref_spad_management>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800903e:	e009      	b.n	8009054 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009044:	461a      	mov	r2, r3
 8009046:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fed3 	bl	800adf4 <VL53L0X_set_reference_spads>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009054:	4b94      	ldr	r3, [pc, #592]	; (80092a8 <VL53L0X_StaticInit+0x300>)
 8009056:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009058:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10f      	bne.n	8009080 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800906a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009078:	66bb      	str	r3, [r7, #104]	; 0x68
 800907a:	e001      	b.n	8009080 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800907c:	4b8a      	ldr	r3, [pc, #552]	; (80092a8 <VL53L0X_StaticInit+0x300>)
 800907e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009080:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009088:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f003 fb0c 	bl	800c6a8 <VL53L0X_load_tuning_settings>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009096:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800909e:	2300      	movs	r3, #0
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	2304      	movs	r3, #4
 80090a4:	2200      	movs	r2, #0
 80090a6:	2100      	movs	r1, #0
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 f8cb 	bl	800a244 <VL53L0X_SetGpioConfig>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d121      	bne.n	8009100 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090bc:	2201      	movs	r2, #1
 80090be:	21ff      	movs	r1, #255	; 0xff
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f004 fa07 	bl	800d4d4 <VL53L0X_WrByte>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80090cc:	f107 031a 	add.w	r3, r7, #26
 80090d0:	461a      	mov	r2, r3
 80090d2:	2184      	movs	r1, #132	; 0x84
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f004 faa9 	bl	800d62c <VL53L0X_RdWord>
 80090da:	4603      	mov	r3, r0
 80090dc:	461a      	mov	r2, r3
 80090de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090e8:	2200      	movs	r2, #0
 80090ea:	21ff      	movs	r1, #255	; 0xff
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f004 f9f1 	bl	800d4d4 <VL53L0X_WrByte>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009100:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009108:	8b7b      	ldrh	r3, [r7, #26]
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009114:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009118:	2b00      	cmp	r3, #0
 800911a:	d108      	bne.n	800912e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800911c:	f107 031c 	add.w	r3, r7, #28
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f8c2 	bl	80092ac <VL53L0X_GetDeviceParameters>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800912e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009132:	2b00      	cmp	r3, #0
 8009134:	d110      	bne.n	8009158 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009136:	f107 0319 	add.w	r3, r7, #25
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f984 	bl	800944a <VL53L0X_GetFractionEnable>
 8009142:	4603      	mov	r3, r0
 8009144:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009148:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800914c:	2b00      	cmp	r3, #0
 800914e:	d103      	bne.n	8009158 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009150:	7e7a      	ldrb	r2, [r7, #25]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009158:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10e      	bne.n	800917e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f103 0410 	add.w	r4, r3, #16
 8009166:	f107 051c 	add.w	r5, r7, #28
 800916a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800916c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800916e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009176:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800917a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800917e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009182:	2b00      	cmp	r3, #0
 8009184:	d111      	bne.n	80091aa <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009186:	f107 0319 	add.w	r3, r7, #25
 800918a:	461a      	mov	r2, r3
 800918c:	2101      	movs	r1, #1
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f004 fa22 	bl	800d5d8 <VL53L0X_RdByte>
 8009194:	4603      	mov	r3, r0
 8009196:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800919a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d103      	bne.n	80091aa <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80091a2:	7e7a      	ldrb	r2, [r7, #25]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80091aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d107      	bne.n	80091c2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80091b2:	2200      	movs	r2, #0
 80091b4:	2100      	movs	r1, #0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f9a4 	bl	8009504 <VL53L0X_SetSequenceStepEnable>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80091c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d107      	bne.n	80091da <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80091ca:	2200      	movs	r2, #0
 80091cc:	2102      	movs	r1, #2
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f998 	bl	8009504 <VL53L0X_SetSequenceStepEnable>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80091da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2203      	movs	r2, #3
 80091e6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80091ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80091f2:	f107 0313 	add.w	r3, r7, #19
 80091f6:	461a      	mov	r2, r3
 80091f8:	2100      	movs	r1, #0
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f96a 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009206:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800920a:	2b00      	cmp	r3, #0
 800920c:	d103      	bne.n	8009216 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800920e:	7cfa      	ldrb	r2, [r7, #19]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009216:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800921e:	f107 0313 	add.w	r3, r7, #19
 8009222:	461a      	mov	r2, r3
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f954 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009232:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800923a:	7cfa      	ldrb	r2, [r7, #19]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009242:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800924a:	f107 030c 	add.w	r3, r7, #12
 800924e:	461a      	mov	r2, r3
 8009250:	2103      	movs	r1, #3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f002 fe8c 	bl	800bf70 <get_sequence_step_timeout>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800925e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800926e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	461a      	mov	r2, r3
 800927c:	2104      	movs	r1, #4
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f002 fe76 	bl	800bf70 <get_sequence_step_timeout>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800928a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800929a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3770      	adds	r7, #112	; 0x70
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bdb0      	pop	{r4, r5, r7, pc}
 80092a6:	bf00      	nop
 80092a8:	2000000c 	.word	0x2000000c

080092ac <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f8b0 	bl	8009424 <VL53L0X_GetDeviceMode>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80092c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d107      	bne.n	80092e0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa60 	bl	800979c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80092e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d102      	bne.n	80092ee <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80092ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d107      	bne.n	8009306 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	3310      	adds	r3, #16
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fa96 	bl	800982e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d107      	bne.n	800931e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	3314      	adds	r3, #20
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff fcb7 	bl	8008c88 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800931e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d134      	bne.n	8009390 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]
 800932a:	e02a      	b.n	8009382 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800932c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d12a      	bne.n	800938a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	b299      	uxth	r1, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	3308      	adds	r3, #8
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	461a      	mov	r2, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fbb6 	bl	8009ab8 <VL53L0X_GetLimitCheckValue>
 800934c:	4603      	mov	r3, r0
 800934e:	461a      	mov	r2, r3
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	4313      	orrs	r3, r2
 8009354:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d117      	bne.n	800938e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	b299      	uxth	r1, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	3318      	adds	r3, #24
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	4413      	add	r3, r2
 800936a:	461a      	mov	r2, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb1d 	bl	80099ac <VL53L0X_GetLimitCheckEnable>
 8009372:	4603      	mov	r3, r0
 8009374:	461a      	mov	r2, r3
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	4313      	orrs	r3, r2
 800937a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3301      	adds	r3, #1
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b05      	cmp	r3, #5
 8009386:	ddd1      	ble.n	800932c <VL53L0X_GetDeviceParameters+0x80>
 8009388:	e002      	b.n	8009390 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800938a:	bf00      	nop
 800938c:	e000      	b.n	8009390 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800938e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d107      	bne.n	80093a8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	333c      	adds	r3, #60	; 0x3c
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc18 	bl	8009bd4 <VL53L0X_GetWrapAroundCheckEnable>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80093a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d107      	bne.n	80093c0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	3304      	adds	r3, #4
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f879 	bl	80094ae <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	2b15      	cmp	r3, #21
 80093e0:	bf8c      	ite	hi
 80093e2:	2201      	movhi	r2, #1
 80093e4:	2200      	movls	r2, #0
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	d10e      	bne.n	800940a <VL53L0X_SetDeviceMode+0x3e>
 80093ec:	2201      	movs	r2, #1
 80093ee:	409a      	lsls	r2, r3
 80093f0:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <VL53L0X_SetDeviceMode+0x54>)
 80093f2:	4013      	ands	r3, r2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bf14      	ite	ne
 80093f8:	2301      	movne	r3, #1
 80093fa:	2300      	moveq	r3, #0
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	741a      	strb	r2, [r3, #16]
		break;
 8009408:	e001      	b.n	800940e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800940a:	23f8      	movs	r3, #248	; 0xf8
 800940c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800940e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	0030000b 	.word	0x0030000b

08009424 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7c1a      	ldrb	r2, [r3, #16]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800943a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	2109      	movs	r1, #9
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f004 f8bb 	bl	800d5d8 <VL53L0X_RdByte>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800947c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009492:	2300      	movs	r3, #0
 8009494:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f002 ff73 	bl	800c384 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800949e:	4603      	mov	r3, r0
 80094a0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80094a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f003 f840 	bl	800c544 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80094c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	460b      	mov	r3, r1
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	4619      	mov	r1, r3
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f002 ff12 	bl	800c316 <VL53L0X_get_vcsel_pulse_period>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80094f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
 8009510:	4613      	mov	r3, r2
 8009512:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009514:	2300      	movs	r3, #0
 8009516:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009520:	f107 030f 	add.w	r3, r7, #15
 8009524:	461a      	mov	r2, r3
 8009526:	2101      	movs	r1, #1
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f004 f855 	bl	800d5d8 <VL53L0X_RdByte>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009536:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d15a      	bne.n	80095f4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800953e:	78bb      	ldrb	r3, [r7, #2]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d12b      	bne.n	800959c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	2b04      	cmp	r3, #4
 8009548:	d825      	bhi.n	8009596 <VL53L0X_SetSequenceStepEnable+0x92>
 800954a:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	08009565 	.word	0x08009565
 8009554:	0800956f 	.word	0x0800956f
 8009558:	08009579 	.word	0x08009579
 800955c:	08009583 	.word	0x08009583
 8009560:	0800958d 	.word	0x0800958d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009564:	7dbb      	ldrb	r3, [r7, #22]
 8009566:	f043 0310 	orr.w	r3, r3, #16
 800956a:	75bb      	strb	r3, [r7, #22]
				break;
 800956c:	e043      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800956e:	7dbb      	ldrb	r3, [r7, #22]
 8009570:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009574:	75bb      	strb	r3, [r7, #22]
				break;
 8009576:	e03e      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009578:	7dbb      	ldrb	r3, [r7, #22]
 800957a:	f043 0304 	orr.w	r3, r3, #4
 800957e:	75bb      	strb	r3, [r7, #22]
				break;
 8009580:	e039      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009582:	7dbb      	ldrb	r3, [r7, #22]
 8009584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009588:	75bb      	strb	r3, [r7, #22]
				break;
 800958a:	e034      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800958c:	7dbb      	ldrb	r3, [r7, #22]
 800958e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009592:	75bb      	strb	r3, [r7, #22]
				break;
 8009594:	e02f      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009596:	23fc      	movs	r3, #252	; 0xfc
 8009598:	75fb      	strb	r3, [r7, #23]
 800959a:	e02c      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d825      	bhi.n	80095ee <VL53L0X_SetSequenceStepEnable+0xea>
 80095a2:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095bd 	.word	0x080095bd
 80095ac:	080095c7 	.word	0x080095c7
 80095b0:	080095d1 	.word	0x080095d1
 80095b4:	080095db 	.word	0x080095db
 80095b8:	080095e5 	.word	0x080095e5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80095bc:	7dbb      	ldrb	r3, [r7, #22]
 80095be:	f023 0310 	bic.w	r3, r3, #16
 80095c2:	75bb      	strb	r3, [r7, #22]
				break;
 80095c4:	e017      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80095c6:	7dbb      	ldrb	r3, [r7, #22]
 80095c8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80095cc:	75bb      	strb	r3, [r7, #22]
				break;
 80095ce:	e012      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80095d0:	7dbb      	ldrb	r3, [r7, #22]
 80095d2:	f023 0304 	bic.w	r3, r3, #4
 80095d6:	75bb      	strb	r3, [r7, #22]
				break;
 80095d8:	e00d      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80095da:	7dbb      	ldrb	r3, [r7, #22]
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	75bb      	strb	r3, [r7, #22]
				break;
 80095e2:	e008      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80095e4:	7dbb      	ldrb	r3, [r7, #22]
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	75bb      	strb	r3, [r7, #22]
				break;
 80095ec:	e003      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095ee:	23fc      	movs	r3, #252	; 0xfc
 80095f0:	75fb      	strb	r3, [r7, #23]
 80095f2:	e000      	b.n	80095f6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80095f4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	7dba      	ldrb	r2, [r7, #22]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d01e      	beq.n	800963c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80095fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d107      	bne.n	8009616 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009606:	7dbb      	ldrb	r3, [r7, #22]
 8009608:	461a      	mov	r2, r3
 800960a:	2101      	movs	r1, #1
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f003 ff61 	bl	800d4d4 <VL53L0X_WrByte>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d103      	bne.n	8009626 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7dba      	ldrb	r2, [r7, #22]
 8009622:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009626:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009634:	6939      	ldr	r1, [r7, #16]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff ff26 	bl	8009488 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800963c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	607b      	str	r3, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	72fb      	strb	r3, [r7, #11]
 8009656:	4613      	mov	r3, r2
 8009658:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009664:	7afb      	ldrb	r3, [r7, #11]
 8009666:	2b04      	cmp	r3, #4
 8009668:	d836      	bhi.n	80096d8 <sequence_step_enabled+0x90>
 800966a:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <sequence_step_enabled+0x28>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	08009685 	.word	0x08009685
 8009674:	08009697 	.word	0x08009697
 8009678:	080096a9 	.word	0x080096a9
 800967c:	080096bb 	.word	0x080096bb
 8009680:	080096cd 	.word	0x080096cd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009684:	7abb      	ldrb	r3, [r7, #10]
 8009686:	111b      	asrs	r3, r3, #4
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	b2da      	uxtb	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	701a      	strb	r2, [r3, #0]
		break;
 8009694:	e022      	b.n	80096dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009696:	7abb      	ldrb	r3, [r7, #10]
 8009698:	10db      	asrs	r3, r3, #3
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	701a      	strb	r2, [r3, #0]
		break;
 80096a6:	e019      	b.n	80096dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80096a8:	7abb      	ldrb	r3, [r7, #10]
 80096aa:	109b      	asrs	r3, r3, #2
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	701a      	strb	r2, [r3, #0]
		break;
 80096b8:	e010      	b.n	80096dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80096ba:	7abb      	ldrb	r3, [r7, #10]
 80096bc:	119b      	asrs	r3, r3, #6
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	701a      	strb	r2, [r3, #0]
		break;
 80096ca:	e007      	b.n	80096dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80096cc:	7abb      	ldrb	r3, [r7, #10]
 80096ce:	09db      	lsrs	r3, r3, #7
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	701a      	strb	r2, [r3, #0]
		break;
 80096d6:	e001      	b.n	80096dc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096d8:	23fc      	movs	r3, #252	; 0xfc
 80096da:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80096fe:	f107 030e 	add.w	r3, r7, #14
 8009702:	461a      	mov	r2, r3
 8009704:	2101      	movs	r1, #1
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f003 ff66 	bl	800d5d8 <VL53L0X_RdByte>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d107      	bne.n	8009728 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009718:	7bba      	ldrb	r2, [r7, #14]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2100      	movs	r1, #0
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff ff92 	bl	8009648 <sequence_step_enabled>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d108      	bne.n	8009742 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009730:	7bba      	ldrb	r2, [r7, #14]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	3302      	adds	r3, #2
 8009736:	2101      	movs	r1, #1
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff85 	bl	8009648 <sequence_step_enabled>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d108      	bne.n	800975c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800974a:	7bba      	ldrb	r2, [r7, #14]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	3301      	adds	r3, #1
 8009750:	2102      	movs	r1, #2
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff ff78 	bl	8009648 <sequence_step_enabled>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800975c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009764:	7bba      	ldrb	r2, [r7, #14]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	3303      	adds	r3, #3
 800976a:	2103      	movs	r1, #3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff ff6b 	bl	8009648 <sequence_step_enabled>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d108      	bne.n	8009790 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800977e:	7bba      	ldrb	r2, [r7, #14]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	3304      	adds	r3, #4
 8009784:	2104      	movs	r1, #4
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff ff5e 	bl	8009648 <sequence_step_enabled>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80097aa:	f107 030c 	add.w	r3, r7, #12
 80097ae:	461a      	mov	r2, r3
 80097b0:	21f8      	movs	r1, #248	; 0xf8
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f003 ff3a 	bl	800d62c <VL53L0X_RdWord>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80097bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d108      	bne.n	80097d6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80097c4:	f107 0308 	add.w	r3, r7, #8
 80097c8:	461a      	mov	r2, r3
 80097ca:	2104      	movs	r1, #4
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f003 ff65 	bl	800d69c <VL53L0X_RdDWord>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80097d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10c      	bne.n	80097f8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80097de:	89bb      	ldrh	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	89ba      	ldrh	r2, [r7, #12]
 80097e8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7f1b      	ldrb	r3, [r3, #28]
 8009816:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	7bba      	ldrb	r2, [r7, #14]
 800981c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800981e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009838:	2300      	movs	r3, #0
 800983a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800983c:	f107 030e 	add.w	r3, r7, #14
 8009840:	461a      	mov	r2, r3
 8009842:	2120      	movs	r1, #32
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f003 fef1 	bl	800d62c <VL53L0X_RdWord>
 800984a:	4603      	mov	r3, r0
 800984c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800984e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d118      	bne.n	8009888 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009856:	89fb      	ldrh	r3, [r7, #14]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	771a      	strb	r2, [r3, #28]
 800986e:	e00b      	b.n	8009888 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009870:	89fb      	ldrh	r3, [r7, #14]
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	807b      	strh	r3, [r7, #2]
 80098a0:	4613      	mov	r3, r2
 80098a2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80098b4:	887b      	ldrh	r3, [r7, #2]
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	d902      	bls.n	80098c0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098ba:	23fc      	movs	r3, #252	; 0xfc
 80098bc:	75fb      	strb	r3, [r7, #23]
 80098be:	e05b      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80098c0:	787b      	ldrb	r3, [r7, #1]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80098ce:	2301      	movs	r3, #1
 80098d0:	73bb      	strb	r3, [r7, #14]
 80098d2:	e00a      	b.n	80098ea <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80098d4:	887b      	ldrh	r3, [r7, #2]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	330c      	adds	r3, #12
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80098ea:	887b      	ldrh	r3, [r7, #2]
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	d841      	bhi.n	8009974 <VL53L0X_SetLimitCheckEnable+0xe0>
 80098f0:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	08009911 	.word	0x08009911
 80098fc:	0800991b 	.word	0x0800991b
 8009900:	08009931 	.word	0x08009931
 8009904:	0800993b 	.word	0x0800993b
 8009908:	08009945 	.word	0x08009945
 800990c:	0800995d 	.word	0x0800995d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7bfa      	ldrb	r2, [r7, #15]
 8009914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009918:	e02e      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800991e:	b29b      	uxth	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	2144      	movs	r1, #68	; 0x44
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f003 fdf9 	bl	800d51c <VL53L0X_WrWord>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]

			break;
 800992e:	e023      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7bfa      	ldrb	r2, [r7, #15]
 8009934:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009938:	e01e      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7bfa      	ldrb	r2, [r7, #15]
 800993e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009942:	e019      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800994a:	7b7b      	ldrb	r3, [r7, #13]
 800994c:	22fe      	movs	r2, #254	; 0xfe
 800994e:	2160      	movs	r1, #96	; 0x60
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f003 fe0d 	bl	800d570 <VL53L0X_UpdateByte>
 8009956:	4603      	mov	r3, r0
 8009958:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800995a:	e00d      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009962:	7b7b      	ldrb	r3, [r7, #13]
 8009964:	22ef      	movs	r2, #239	; 0xef
 8009966:	2160      	movs	r1, #96	; 0x60
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f003 fe01 	bl	800d570 <VL53L0X_UpdateByte>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009972:	e001      	b.n	8009978 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009974:	23fc      	movs	r3, #252	; 0xfc
 8009976:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10f      	bne.n	80099a0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009980:	787b      	ldrb	r3, [r7, #1]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009986:	887b      	ldrh	r3, [r7, #2]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4413      	add	r3, r2
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009992:	e005      	b.n	80099a0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009994:	887b      	ldrh	r3, [r7, #2]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	4413      	add	r3, r2
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80099a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	460b      	mov	r3, r1
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80099be:	897b      	ldrh	r3, [r7, #10]
 80099c0:	2b05      	cmp	r3, #5
 80099c2:	d905      	bls.n	80099d0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099c4:	23fc      	movs	r3, #252	; 0xfc
 80099c6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	e008      	b.n	80099e2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80099d0:	897b      	ldrh	r3, [r7, #10]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099da:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7dba      	ldrb	r2, [r7, #22]
 80099e0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80099e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	460b      	mov	r3, r1
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009a06:	897b      	ldrh	r3, [r7, #10]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a10:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009a12:	7dbb      	ldrb	r3, [r7, #22]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d107      	bne.n	8009a28 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a18:	897b      	ldrh	r3, [r7, #10]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	e040      	b.n	8009aaa <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009a28:	897b      	ldrh	r3, [r7, #10]
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d830      	bhi.n	8009a90 <VL53L0X_SetLimitCheckValue+0x9c>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <VL53L0X_SetLimitCheckValue+0x40>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a4d 	.word	0x08009a4d
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a6b 	.word	0x08009a6b
 8009a40:	08009a73 	.word	0x08009a73
 8009a44:	08009a7b 	.word	0x08009a7b
 8009a48:	08009a7b 	.word	0x08009a7b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009a52:	e01f      	b.n	8009a94 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	2144      	movs	r1, #68	; 0x44
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f003 fd5c 	bl	800d51c <VL53L0X_WrWord>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009a68:	e014      	b.n	8009a94 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009a70:	e010      	b.n	8009a94 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009a78:	e00c      	b.n	8009a94 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	2164      	movs	r1, #100	; 0x64
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f003 fd49 	bl	800d51c <VL53L0X_WrWord>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009a8e:	e001      	b.n	8009a94 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a90:	23fc      	movs	r3, #252	; 0xfc
 8009a92:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d106      	bne.n	8009aaa <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a9c:	897b      	ldrh	r3, [r7, #10]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	330c      	adds	r3, #12
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop

08009ab8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009ace:	897b      	ldrh	r3, [r7, #10]
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	d847      	bhi.n	8009b64 <VL53L0X_GetLimitCheckValue+0xac>
 8009ad4:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <VL53L0X_GetLimitCheckValue+0x24>)
 8009ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ada:	bf00      	nop
 8009adc:	08009af5 	.word	0x08009af5
 8009ae0:	08009b01 	.word	0x08009b01
 8009ae4:	08009b27 	.word	0x08009b27
 8009ae8:	08009b33 	.word	0x08009b33
 8009aec:	08009b3f 	.word	0x08009b3f
 8009af0:	08009b3f 	.word	0x08009b3f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009afa:	2300      	movs	r3, #0
 8009afc:	77bb      	strb	r3, [r7, #30]
		break;
 8009afe:	e033      	b.n	8009b68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009b00:	f107 0316 	add.w	r3, r7, #22
 8009b04:	461a      	mov	r2, r3
 8009b06:	2144      	movs	r1, #68	; 0x44
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f003 fd8f 	bl	800d62c <VL53L0X_RdWord>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d102      	bne.n	8009b20 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009b1a:	8afb      	ldrh	r3, [r7, #22]
 8009b1c:	025b      	lsls	r3, r3, #9
 8009b1e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009b20:	2301      	movs	r3, #1
 8009b22:	77bb      	strb	r3, [r7, #30]
		break;
 8009b24:	e020      	b.n	8009b68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b2a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	77bb      	strb	r3, [r7, #30]
		break;
 8009b30:	e01a      	b.n	8009b68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	77bb      	strb	r3, [r7, #30]
		break;
 8009b3c:	e014      	b.n	8009b68 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009b3e:	f107 0316 	add.w	r3, r7, #22
 8009b42:	461a      	mov	r2, r3
 8009b44:	2164      	movs	r1, #100	; 0x64
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f003 fd70 	bl	800d62c <VL53L0X_RdWord>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009b50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009b58:	8afb      	ldrh	r3, [r7, #22]
 8009b5a:	025b      	lsls	r3, r3, #9
 8009b5c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	77bb      	strb	r3, [r7, #30]
		break;
 8009b62:	e001      	b.n	8009b68 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b64:	23fc      	movs	r3, #252	; 0xfc
 8009b66:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d12a      	bne.n	8009bc6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009b70:	7fbb      	ldrb	r3, [r7, #30]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d124      	bne.n	8009bc0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d110      	bne.n	8009b9e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009b7c:	897b      	ldrh	r3, [r7, #10]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	330c      	adds	r3, #12
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009b90:	897b      	ldrh	r3, [r7, #10]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009b9c:	e013      	b.n	8009bc6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009ba4:	897b      	ldrh	r3, [r7, #10]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	330c      	adds	r3, #12
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009bb2:	897b      	ldrh	r3, [r7, #10]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009bbe:	e002      	b.n	8009bc6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3720      	adds	r7, #32
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop

08009bd4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009be2:	f107 030e 	add.w	r3, r7, #14
 8009be6:	461a      	mov	r2, r3
 8009be8:	2101      	movs	r1, #1
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f003 fcf4 	bl	800d5d8 <VL53L0X_RdByte>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10e      	bne.n	8009c1a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009bfc:	7bba      	ldrb	r2, [r7, #14]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	da03      	bge.n	8009c14 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	e002      	b.n	8009c1a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2200      	movs	r2, #0
 8009c18:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781a      	ldrb	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009c44:	f107 030e 	add.w	r3, r7, #14
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fbea 	bl	8009424 <VL53L0X_GetDeviceMode>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d107      	bne.n	8009c6c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d104      	bne.n	8009c6c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f898 	bl	8009d98 <VL53L0X_StartMeasurement>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f001 fb3f 	bl	800b2f8 <VL53L0X_measurement_poll_for_completion>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d103      	bne.n	8009c94 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2203      	movs	r2, #3
 8009c90:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8009c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f001 fae1 	bl	800b27e <VL53L0X_perform_ref_calibration>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009ce2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8009ce4:	7dbb      	ldrb	r3, [r7, #22]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d005      	beq.n	8009cf6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009cea:	7dbb      	ldrb	r3, [r7, #22]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d002      	beq.n	8009cf6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d147      	bne.n	8009d86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	f107 0210 	add.w	r2, r7, #16
 8009cfe:	2101      	movs	r1, #1
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fbc3 	bl	800a48c <VL53L0X_GetInterruptThresholds>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009d10:	d803      	bhi.n	8009d1a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8009d12:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8009d14:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009d18:	d935      	bls.n	8009d86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8009d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d131      	bne.n	8009d86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009d28:	491a      	ldr	r1, [pc, #104]	; (8009d94 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f002 fcbc 	bl	800c6a8 <VL53L0X_load_tuning_settings>
 8009d30:	4603      	mov	r3, r0
 8009d32:	75fb      	strb	r3, [r7, #23]
 8009d34:	e027      	b.n	8009d86 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009d36:	2204      	movs	r2, #4
 8009d38:	21ff      	movs	r1, #255	; 0xff
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f003 fbca 	bl	800d4d4 <VL53L0X_WrByte>
 8009d40:	4603      	mov	r3, r0
 8009d42:	461a      	mov	r2, r3
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2170      	movs	r1, #112	; 0x70
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f003 fbc0 	bl	800d4d4 <VL53L0X_WrByte>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	21ff      	movs	r1, #255	; 0xff
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f003 fbb6 	bl	800d4d4 <VL53L0X_WrByte>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009d72:	2200      	movs	r2, #0
 8009d74:	2180      	movs	r1, #128	; 0x80
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f003 fbac 	bl	800d4d4 <VL53L0X_WrByte>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8009d86:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000100 	.word	0x20000100

08009d98 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009da4:	2301      	movs	r3, #1
 8009da6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009da8:	f107 030e 	add.w	r3, r7, #14
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff fb38 	bl	8009424 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009db4:	2201      	movs	r2, #1
 8009db6:	2180      	movs	r1, #128	; 0x80
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f003 fb8b 	bl	800d4d4 <VL53L0X_WrByte>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	21ff      	movs	r1, #255	; 0xff
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f003 fb84 	bl	800d4d4 <VL53L0X_WrByte>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f003 fb7d 	bl	800d4d4 <VL53L0X_WrByte>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8009de4:	461a      	mov	r2, r3
 8009de6:	2191      	movs	r1, #145	; 0x91
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f003 fb73 	bl	800d4d4 <VL53L0X_WrByte>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009df2:	2201      	movs	r2, #1
 8009df4:	2100      	movs	r1, #0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f003 fb6c 	bl	800d4d4 <VL53L0X_WrByte>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e00:	2200      	movs	r2, #0
 8009e02:	21ff      	movs	r1, #255	; 0xff
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f003 fb65 	bl	800d4d4 <VL53L0X_WrByte>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2180      	movs	r1, #128	; 0x80
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f003 fb5e 	bl	800d4d4 <VL53L0X_WrByte>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d054      	beq.n	8009ecc <VL53L0X_StartMeasurement+0x134>
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	dc6c      	bgt.n	8009f00 <VL53L0X_StartMeasurement+0x168>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <VL53L0X_StartMeasurement+0x98>
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d034      	beq.n	8009e98 <VL53L0X_StartMeasurement+0x100>
 8009e2e:	e067      	b.n	8009f00 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009e30:	2201      	movs	r2, #1
 8009e32:	2100      	movs	r1, #0
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f003 fb4d 	bl	800d4d4 <VL53L0X_WrByte>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d15d      	bne.n	8009f06 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d008      	beq.n	8009e66 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8009e54:	f107 030d 	add.w	r3, r7, #13
 8009e58:	461a      	mov	r2, r3
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f003 fbbb 	bl	800d5d8 <VL53L0X_RdByte>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009e6c:	7b7a      	ldrb	r2, [r7, #13]
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4013      	ands	r3, r2
 8009e72:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009e74:	7bfa      	ldrb	r2, [r7, #15]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d107      	bne.n	8009e8a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d103      	bne.n	8009e8a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e88:	d3e1      	bcc.n	8009e4e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009e90:	d339      	bcc.n	8009f06 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009e92:	23f9      	movs	r3, #249	; 0xf9
 8009e94:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009e96:	e036      	b.n	8009f06 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d105      	bne.n	8009eac <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7ff ff12 	bl	8009ccc <VL53L0X_CheckAndLoadInterruptSettings>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009eac:	2202      	movs	r2, #2
 8009eae:	2100      	movs	r1, #0
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f003 fb0f 	bl	800d4d4 <VL53L0X_WrByte>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d123      	bne.n	8009f0a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009eca:	e01e      	b.n	8009f0a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fef8 	bl	8009ccc <VL53L0X_CheckAndLoadInterruptSettings>
 8009edc:	4603      	mov	r3, r0
 8009ede:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f003 faf5 	bl	800d4d4 <VL53L0X_WrByte>
 8009eea:	4603      	mov	r3, r0
 8009eec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2204      	movs	r2, #4
 8009efa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009efe:	e006      	b.n	8009f0e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009f00:	23f8      	movs	r3, #248	; 0xf8
 8009f02:	75fb      	strb	r3, [r7, #23]
 8009f04:	e004      	b.n	8009f10 <VL53L0X_StartMeasurement+0x178>
		break;
 8009f06:	bf00      	nop
 8009f08:	e002      	b.n	8009f10 <VL53L0X_StartMeasurement+0x178>
		break;
 8009f0a:	bf00      	nop
 8009f0c:	e000      	b.n	8009f10 <VL53L0X_StartMeasurement+0x178>
		break;
 8009f0e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3718      	adds	r7, #24
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009f30:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d112      	bne.n	8009f5e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fb1a 	bl	800a578 <VL53L0X_GetInterruptMaskStatus>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d103      	bne.n	8009f56 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2201      	movs	r2, #1
 8009f52:	701a      	strb	r2, [r3, #0]
 8009f54:	e01c      	b.n	8009f90 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	701a      	strb	r2, [r3, #0]
 8009f5c:	e018      	b.n	8009f90 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009f5e:	f107 030d 	add.w	r3, r7, #13
 8009f62:	461a      	mov	r2, r3
 8009f64:	2114      	movs	r1, #20
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f003 fb36 	bl	800d5d8 <VL53L0X_RdByte>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009f78:	7b7b      	ldrb	r3, [r7, #13]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2201      	movs	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
 8009f88:	e002      	b.n	8009f90 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009f9c:	b5b0      	push	{r4, r5, r7, lr}
 8009f9e:	b096      	sub	sp, #88	; 0x58
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009fac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009fb0:	230c      	movs	r3, #12
 8009fb2:	2114      	movs	r1, #20
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f003 fa61 	bl	800d47c <VL53L0X_ReadMulti>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009fc0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 80d1 	bne.w	800a16c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8009fd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8009ff2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a000:	b29b      	uxth	r3, r3
 800a002:	4413      	add	r3, r2
 800a004:	b29b      	uxth	r3, r3
 800a006:	025b      	lsls	r3, r3, #9
 800a008:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a00e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a010:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a014:	b29b      	uxth	r3, r3
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	b29a      	uxth	r2, r3
 800a01a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4413      	add	r3, r2
 800a022:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a026:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a02a:	025b      	lsls	r3, r3, #9
 800a02c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a032:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a036:	b29b      	uxth	r3, r3
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a040:	b29b      	uxth	r3, r3
 800a042:	4413      	add	r3, r2
 800a044:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a04e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a05e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a066:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a06a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a06c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a070:	d046      	beq.n	800a100 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a074:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a078:	fb02 f303 	mul.w	r3, r2, r3
 800a07c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a080:	4a57      	ldr	r2, [pc, #348]	; (800a1e0 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a082:	fb82 1203 	smull	r1, r2, r2, r3
 800a086:	1192      	asrs	r2, r2, #6
 800a088:	17db      	asrs	r3, r3, #31
 800a08a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a08c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	7f1b      	ldrb	r3, [r3, #28]
 800a09a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a09e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d02c      	beq.n	800a100 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a0a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a0a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a0ac:	fb02 f303 	mul.w	r3, r2, r3
 800a0b0:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d10d      	bne.n	800a0d4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a0b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a0c0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a0c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a0c8:	e016      	b.n	800a0f8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a0ca:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a0ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a0d2:	e011      	b.n	800a0f8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a0d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a0d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0da:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a0de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a0e0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a0e8:	121b      	asrs	r3, r3, #8
 800a0ea:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ee:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a0f0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a0f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a0f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a0fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a100:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00d      	beq.n	800a124 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a108:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a10c:	089b      	lsrs	r3, r3, #2
 800a10e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a114:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	019b      	lsls	r3, r3, #6
 800a11c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	75da      	strb	r2, [r3, #23]
 800a122:	e006      	b.n	800a132 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a12a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2200      	movs	r2, #0
 800a130:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a132:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a136:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a13a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	4613      	mov	r3, r2
 800a146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f002 ff4b 	bl	800cfe4 <VL53L0X_get_pal_range_status>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a156:	4313      	orrs	r3, r2
 800a158:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a15c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a160:	2b00      	cmp	r3, #0
 800a162:	d103      	bne.n	800a16c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a164:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a16c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a170:	2b00      	cmp	r3, #0
 800a172:	d12f      	bne.n	800a1d4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f107 040c 	add.w	r4, r7, #12
 800a17a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a182:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a186:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a18e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a19c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a1a2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a1a8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a1ae:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a1b4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a1ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a1c4:	f107 050c 	add.w	r5, r7, #12
 800a1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a1d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1d4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3750      	adds	r7, #80	; 0x50
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bdb0      	pop	{r4, r5, r7, pc}
 800a1e0:	10624dd3 	.word	0x10624dd3

0800a1e4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff f8e9 	bl	80093cc <VL53L0X_SetDeviceMode>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d104      	bne.n	800a210 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7ff fd16 	bl	8009c38 <VL53L0X_PerformSingleMeasurement>
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d105      	bne.n	800a224 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff febe 	bl	8009f9c <VL53L0X_GetRangingMeasurementData>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d105      	bne.n	800a238 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a22c:	2100      	movs	r1, #0
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f962 	bl	800a4f8 <VL53L0X_ClearInterruptMask>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4603      	mov	r3, r0
 800a254:	70fb      	strb	r3, [r7, #3]
 800a256:	460b      	mov	r3, r1
 800a258:	70bb      	strb	r3, [r7, #2]
 800a25a:	4613      	mov	r3, r2
 800a25c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a268:	23f6      	movs	r3, #246	; 0xf6
 800a26a:	73fb      	strb	r3, [r7, #15]
 800a26c:	e107      	b.n	800a47e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a26e:	78bb      	ldrb	r3, [r7, #2]
 800a270:	2b14      	cmp	r3, #20
 800a272:	d110      	bne.n	800a296 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a274:	7e3b      	ldrb	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d102      	bne.n	800a280 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a27a:	2310      	movs	r3, #16
 800a27c:	73bb      	strb	r3, [r7, #14]
 800a27e:	e001      	b.n	800a284 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a280:	2301      	movs	r3, #1
 800a282:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	461a      	mov	r2, r3
 800a288:	2184      	movs	r1, #132	; 0x84
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f003 f922 	bl	800d4d4 <VL53L0X_WrByte>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]
 800a294:	e0f3      	b.n	800a47e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a296:	78bb      	ldrb	r3, [r7, #2]
 800a298:	2b15      	cmp	r3, #21
 800a29a:	f040 8097 	bne.w	800a3cc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a29e:	2201      	movs	r2, #1
 800a2a0:	21ff      	movs	r1, #255	; 0xff
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f003 f916 	bl	800d4d4 <VL53L0X_WrByte>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f003 f90c 	bl	800d4d4 <VL53L0X_WrByte>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	21ff      	movs	r1, #255	; 0xff
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f003 f902 	bl	800d4d4 <VL53L0X_WrByte>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a2da:	2201      	movs	r2, #1
 800a2dc:	2180      	movs	r1, #128	; 0x80
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f003 f8f8 	bl	800d4d4 <VL53L0X_WrByte>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	2185      	movs	r1, #133	; 0x85
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f003 f8ee 	bl	800d4d4 <VL53L0X_WrByte>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a302:	2204      	movs	r2, #4
 800a304:	21ff      	movs	r1, #255	; 0xff
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f003 f8e4 	bl	800d4d4 <VL53L0X_WrByte>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	4313      	orrs	r3, r2
 800a314:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a316:	2200      	movs	r2, #0
 800a318:	21cd      	movs	r1, #205	; 0xcd
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f003 f8da 	bl	800d4d4 <VL53L0X_WrByte>
 800a320:	4603      	mov	r3, r0
 800a322:	461a      	mov	r2, r3
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	4313      	orrs	r3, r2
 800a328:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a32a:	2211      	movs	r2, #17
 800a32c:	21cc      	movs	r1, #204	; 0xcc
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f003 f8d0 	bl	800d4d4 <VL53L0X_WrByte>
 800a334:	4603      	mov	r3, r0
 800a336:	461a      	mov	r2, r3
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a33e:	2207      	movs	r2, #7
 800a340:	21ff      	movs	r1, #255	; 0xff
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f003 f8c6 	bl	800d4d4 <VL53L0X_WrByte>
 800a348:	4603      	mov	r3, r0
 800a34a:	461a      	mov	r2, r3
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	4313      	orrs	r3, r2
 800a350:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a352:	2200      	movs	r2, #0
 800a354:	21be      	movs	r1, #190	; 0xbe
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f003 f8bc 	bl	800d4d4 <VL53L0X_WrByte>
 800a35c:	4603      	mov	r3, r0
 800a35e:	461a      	mov	r2, r3
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4313      	orrs	r3, r2
 800a364:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a366:	2206      	movs	r2, #6
 800a368:	21ff      	movs	r1, #255	; 0xff
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f003 f8b2 	bl	800d4d4 <VL53L0X_WrByte>
 800a370:	4603      	mov	r3, r0
 800a372:	461a      	mov	r2, r3
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	4313      	orrs	r3, r2
 800a378:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a37a:	2209      	movs	r2, #9
 800a37c:	21cc      	movs	r1, #204	; 0xcc
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f003 f8a8 	bl	800d4d4 <VL53L0X_WrByte>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a38e:	2200      	movs	r2, #0
 800a390:	21ff      	movs	r1, #255	; 0xff
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f003 f89e 	bl	800d4d4 <VL53L0X_WrByte>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	21ff      	movs	r1, #255	; 0xff
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f003 f894 	bl	800d4d4 <VL53L0X_WrByte>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f003 f88a 	bl	800d4d4 <VL53L0X_WrByte>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	73fb      	strb	r3, [r7, #15]
 800a3ca:	e058      	b.n	800a47e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a3cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d121      	bne.n	800a418 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a3d4:	787b      	ldrb	r3, [r7, #1]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d81b      	bhi.n	800a412 <VL53L0X_SetGpioConfig+0x1ce>
 800a3da:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <VL53L0X_SetGpioConfig+0x19c>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a3f5 	.word	0x0800a3f5
 800a3e4:	0800a3fb 	.word	0x0800a3fb
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a407 	.word	0x0800a407
 800a3f0:	0800a40d 	.word	0x0800a40d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73bb      	strb	r3, [r7, #14]
				break;
 800a3f8:	e00f      	b.n	800a41a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	73bb      	strb	r3, [r7, #14]
				break;
 800a3fe:	e00c      	b.n	800a41a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a400:	2302      	movs	r3, #2
 800a402:	73bb      	strb	r3, [r7, #14]
				break;
 800a404:	e009      	b.n	800a41a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a406:	2303      	movs	r3, #3
 800a408:	73bb      	strb	r3, [r7, #14]
				break;
 800a40a:	e006      	b.n	800a41a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a40c:	2304      	movs	r3, #4
 800a40e:	73bb      	strb	r3, [r7, #14]
				break;
 800a410:	e003      	b.n	800a41a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a412:	23f5      	movs	r3, #245	; 0xf5
 800a414:	73fb      	strb	r3, [r7, #15]
 800a416:	e000      	b.n	800a41a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a418:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d107      	bne.n	800a432 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a422:	7bbb      	ldrb	r3, [r7, #14]
 800a424:	461a      	mov	r2, r3
 800a426:	210a      	movs	r1, #10
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f003 f853 	bl	800d4d4 <VL53L0X_WrByte>
 800a42e:	4603      	mov	r3, r0
 800a430:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10f      	bne.n	800a45a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a43a:	7e3b      	ldrb	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	73bb      	strb	r3, [r7, #14]
 800a444:	e001      	b.n	800a44a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a446:	2310      	movs	r3, #16
 800a448:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	22ef      	movs	r2, #239	; 0xef
 800a44e:	2184      	movs	r1, #132	; 0x84
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f003 f88d 	bl	800d570 <VL53L0X_UpdateByte>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d103      	bne.n	800a46a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	787a      	ldrb	r2, [r7, #1]
 800a466:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d105      	bne.n	800a47e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a472:	2100      	movs	r1, #0
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f83f 	bl	800a4f8 <VL53L0X_ClearInterruptMask>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop

0800a48c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	603b      	str	r3, [r7, #0]
 800a498:	460b      	mov	r3, r1
 800a49a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	210e      	movs	r1, #14
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f003 f8bf 	bl	800d62c <VL53L0X_RdWord>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a4b2:	8abb      	ldrh	r3, [r7, #20]
 800a4b4:	045b      	lsls	r3, r3, #17
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <VL53L0X_GetInterruptThresholds+0x68>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10f      	bne.n	800a4e8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a4c8:	f107 0314 	add.w	r3, r7, #20
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	210c      	movs	r1, #12
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f003 f8ab 	bl	800d62c <VL53L0X_RdWord>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a4da:	8abb      	ldrh	r3, [r7, #20]
 800a4dc:	045b      	lsls	r3, r3, #17
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <VL53L0X_GetInterruptThresholds+0x68>)
 800a4e2:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	1ffe0000 	.word	0x1ffe0000

0800a4f8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a50a:	2201      	movs	r2, #1
 800a50c:	210b      	movs	r1, #11
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f002 ffe0 	bl	800d4d4 <VL53L0X_WrByte>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a518:	2200      	movs	r2, #0
 800a51a:	210b      	movs	r1, #11
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f002 ffd9 	bl	800d4d4 <VL53L0X_WrByte>
 800a522:	4603      	mov	r3, r0
 800a524:	461a      	mov	r2, r3
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	4313      	orrs	r3, r2
 800a52a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a52c:	f107 030d 	add.w	r3, r7, #13
 800a530:	461a      	mov	r2, r3
 800a532:	2113      	movs	r1, #19
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f003 f84f 	bl	800d5d8 <VL53L0X_RdByte>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461a      	mov	r2, r3
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4313      	orrs	r3, r2
 800a542:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	3301      	adds	r3, #1
 800a548:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a54a:	7b7b      	ldrb	r3, [r7, #13]
 800a54c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a550:	2b00      	cmp	r3, #0
 800a552:	d006      	beq.n	800a562 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d803      	bhi.n	800a562 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d0d3      	beq.n	800a50a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d901      	bls.n	800a56c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a568:	23f4      	movs	r3, #244	; 0xf4
 800a56a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a586:	f107 030e 	add.w	r3, r7, #14
 800a58a:	461a      	mov	r2, r3
 800a58c:	2113      	movs	r1, #19
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f003 f822 	bl	800d5d8 <VL53L0X_RdByte>
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	f003 0207 	and.w	r2, r3, #7
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	f003 0318 	and.w	r3, r3, #24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a5ac:	23fa      	movs	r3, #250	; 0xfa
 800a5ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fa03 	bl	800a9dc <VL53L0X_perform_ref_spad_management>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a5da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a5f4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a5f8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a5fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5fe:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a600:	f107 0308 	add.w	r3, r7, #8
 800a604:	461a      	mov	r2, r3
 800a606:	2128      	movs	r1, #40	; 0x28
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f003 f80f 	bl	800d62c <VL53L0X_RdWord>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d11e      	bne.n	800a658 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a61a:	893b      	ldrh	r3, [r7, #8]
 800a61c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a620:	b29b      	uxth	r3, r3
 800a622:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a624:	893b      	ldrh	r3, [r7, #8]
 800a626:	461a      	mov	r2, r3
 800a628:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	dd0b      	ble.n	800a648 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a630:	893a      	ldrh	r2, [r7, #8]
 800a632:	897b      	ldrh	r3, [r7, #10]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	b29b      	uxth	r3, r3
 800a638:	b21b      	sxth	r3, r3
 800a63a:	461a      	mov	r2, r3
					* 250;
 800a63c:	23fa      	movs	r3, #250	; 0xfa
 800a63e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e007      	b.n	800a658 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a648:	893b      	ldrh	r3, [r7, #8]
 800a64a:	b21b      	sxth	r3, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	23fa      	movs	r3, #250	; 0xfa
 800a650:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a664:	b480      	push	{r7}
 800a666:	b08b      	sub	sp, #44	; 0x2c
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a672:	2308      	movs	r3, #8
 800a674:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	fbb3 f2f2 	udiv	r2, r3, r2
 800a694:	69b9      	ldr	r1, [r7, #24]
 800a696:	fb01 f202 	mul.w	r2, r1, r2
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a2:	e030      	b.n	800a706 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	4413      	add	r3, r2
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d11e      	bne.n	800a6f8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a6ba:	7ffa      	ldrb	r2, [r7, #31]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	fa42 f303 	asr.w	r3, r2, r3
 800a6c2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a6c8:	e016      	b.n	800a6f8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a6ca:	7ffb      	ldrb	r3, [r7, #31]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <get_next_good_spad+0x88>
				success = 1;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	fb02 f203 	mul.w	r2, r2, r3
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	601a      	str	r2, [r3, #0]
				break;
 800a6ea:	e009      	b.n	800a700 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a6ec:	7ffb      	ldrb	r3, [r7, #31]
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a6f8:	6a3a      	ldr	r2, [r7, #32]
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3e4      	bcc.n	800a6ca <get_next_good_spad+0x66>
				coarseIndex++) {
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	3301      	adds	r3, #1
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d202      	bcs.n	800a714 <get_next_good_spad+0xb0>
 800a70e:	7fbb      	ldrb	r3, [r7, #30]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0c7      	beq.n	800a6a4 <get_next_good_spad+0x40>
		}
	}
}
 800a714:	bf00      	nop
 800a716:	372c      	adds	r7, #44	; 0x2c
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a728:	2301      	movs	r3, #1
 800a72a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	099b      	lsrs	r3, r3, #6
 800a730:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a732:	4a07      	ldr	r2, [pc, #28]	; (800a750 <is_aperture+0x30>)
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <is_aperture+0x22>
		isAperture = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a742:	7bfb      	ldrb	r3, [r7, #15]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	200002b8 	.word	0x200002b8

0800a754 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a754:	b480      	push	{r7}
 800a756:	b089      	sub	sp, #36	; 0x24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a760:	2300      	movs	r3, #0
 800a762:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a764:	2308      	movs	r3, #8
 800a766:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a770:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	fbb3 f2f2 	udiv	r2, r3, r2
 800a77a:	69b9      	ldr	r1, [r7, #24]
 800a77c:	fb01 f202 	mul.w	r2, r1, r2
 800a780:	1a9b      	subs	r3, r3, r2
 800a782:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d302      	bcc.n	800a792 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a78c:	23ce      	movs	r3, #206	; 0xce
 800a78e:	77fb      	strb	r3, [r7, #31]
 800a790:	e010      	b.n	800a7b4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	4413      	add	r3, r2
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	b25a      	sxtb	r2, r3
 800a79c:	2101      	movs	r1, #1
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	b259      	sxtb	r1, r3
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	b2ca      	uxtb	r2, r1
 800a7b2:	701a      	strb	r2, [r3, #0]

	return status;
 800a7b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3724      	adds	r7, #36	; 0x24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a7ce:	2306      	movs	r3, #6
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	21b0      	movs	r1, #176	; 0xb0
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f002 fe21 	bl	800d41c <VL53L0X_WriteMulti>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a7f4:	2306      	movs	r3, #6
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	21b0      	movs	r1, #176	; 0xb0
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f002 fe3e 	bl	800d47c <VL53L0X_ReadMulti>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08c      	sub	sp, #48	; 0x30
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	607a      	str	r2, [r7, #4]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	460b      	mov	r3, r1
 800a81e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a820:	2300      	movs	r3, #0
 800a822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a828:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a82c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a82e:	2300      	movs	r3, #0
 800a830:	62bb      	str	r3, [r7, #40]	; 0x28
 800a832:	e02b      	b.n	800a88c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a834:	f107 031c 	add.w	r3, r7, #28
 800a838:	6a3a      	ldr	r2, [r7, #32]
 800a83a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff ff11 	bl	800a664 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a848:	d103      	bne.n	800a852 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a84a:	23ce      	movs	r3, #206	; 0xce
 800a84c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a850:	e020      	b.n	800a894 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	461a      	mov	r2, r3
 800a856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a858:	4413      	add	r3, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff ff60 	bl	800a720 <is_aperture>
 800a860:	4603      	mov	r3, r0
 800a862:	461a      	mov	r2, r3
 800a864:	7afb      	ldrb	r3, [r7, #11]
 800a866:	4293      	cmp	r3, r2
 800a868:	d003      	beq.n	800a872 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a86a:	23ce      	movs	r3, #206	; 0xce
 800a86c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a870:	e010      	b.n	800a894 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a876:	6a3a      	ldr	r2, [r7, #32]
 800a878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a87a:	6838      	ldr	r0, [r7, #0]
 800a87c:	f7ff ff6a 	bl	800a754 <enable_spad_bit>
		currentSpad++;
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	3301      	adds	r3, #1
 800a884:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	3301      	adds	r3, #1
 800a88a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a88e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a890:	429a      	cmp	r2, r3
 800a892:	d3cf      	bcc.n	800a834 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a896:	6a3a      	ldr	r2, [r7, #32]
 800a898:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a89a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff ff8d 	bl	800a7c4 <set_ref_spad_map>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a8b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d121      	bne.n	800a8fc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	4619      	mov	r1, r3
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff ff93 	bl	800a7ea <get_ref_spad_map>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a8ce:	e011      	b.n	800a8f4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	f107 0114 	add.w	r1, r7, #20
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	440b      	add	r3, r1
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d003      	beq.n	800a8ee <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a8e6:	23ce      	movs	r3, #206	; 0xce
 800a8e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a8ec:	e006      	b.n	800a8fc <enable_ref_spads+0xec>
			}
			i++;
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800a8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d3e9      	bcc.n	800a8d0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a8fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a900:	4618      	mov	r0, r3
 800a902:	3730      	adds	r7, #48	; 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a924:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d107      	bne.n	800a940 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800a930:	22c0      	movs	r2, #192	; 0xc0
 800a932:	2101      	movs	r1, #1
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f002 fdcd 	bl	800d4d4 <VL53L0X_WrByte>
 800a93a:	4603      	mov	r3, r0
 800a93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800a940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a944:	2b00      	cmp	r3, #0
 800a946:	d108      	bne.n	800a95a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a948:	f107 0308 	add.w	r3, r7, #8
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fc48 	bl	800a1e4 <VL53L0X_PerformSingleRangingMeasurement>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a95a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d107      	bne.n	800a972 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a962:	2201      	movs	r2, #1
 800a964:	21ff      	movs	r1, #255	; 0xff
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f002 fdb4 	bl	800d4d4 <VL53L0X_WrByte>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a972:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a976:	2b00      	cmp	r3, #0
 800a978:	d107      	bne.n	800a98a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	21b6      	movs	r1, #182	; 0xb6
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f002 fe54 	bl	800d62c <VL53L0X_RdWord>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a98a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d107      	bne.n	800a9a2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a992:	2200      	movs	r2, #0
 800a994:	21ff      	movs	r1, #255	; 0xff
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f002 fd9c 	bl	800d4d4 <VL53L0X_WrByte>
 800a99c:	4603      	mov	r3, r0
 800a99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800a9a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d112      	bne.n	800a9d0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a9aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f002 fd8e 	bl	800d4d4 <VL53L0X_WrByte>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800a9be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d104      	bne.n	800a9d0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a9cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800a9d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3728      	adds	r7, #40	; 0x28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b09d      	sub	sp, #116	; 0x74
 800a9e0:	af06      	add	r7, sp, #24
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800a9ee:	23b4      	movs	r3, #180	; 0xb4
 800a9f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800a9f8:	232c      	movs	r3, #44	; 0x2c
 800a9fa:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800aa08:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800aa0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800aa16:	2306      	movs	r3, #6
 800aa18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800aa40:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800aa42:	2300      	movs	r3, #0
 800aa44:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa46:	e009      	b.n	800aa5c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800aa56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa58:	3301      	adds	r3, #1
 800aa5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3f1      	bcc.n	800aa48 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa64:	2201      	movs	r2, #1
 800aa66:	21ff      	movs	r1, #255	; 0xff
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f002 fd33 	bl	800d4d4 <VL53L0X_WrByte>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800aa74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d107      	bne.n	800aa8c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	214f      	movs	r1, #79	; 0x4f
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f002 fd27 	bl	800d4d4 <VL53L0X_WrByte>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800aa8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d107      	bne.n	800aaa4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800aa94:	222c      	movs	r2, #44	; 0x2c
 800aa96:	214e      	movs	r1, #78	; 0x4e
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f002 fd1b 	bl	800d4d4 <VL53L0X_WrByte>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800aaa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d107      	bne.n	800aabc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aaac:	2200      	movs	r2, #0
 800aaae:	21ff      	movs	r1, #255	; 0xff
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f002 fd0f 	bl	800d4d4 <VL53L0X_WrByte>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800aabc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800aac4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800aac8:	461a      	mov	r2, r3
 800aaca:	21b6      	movs	r1, #182	; 0xb6
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f002 fd01 	bl	800d4d4 <VL53L0X_WrByte>
 800aad2:	4603      	mov	r3, r0
 800aad4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800aad8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d107      	bne.n	800aaf0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800aae0:	2200      	movs	r2, #0
 800aae2:	2180      	movs	r1, #128	; 0x80
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f002 fcf5 	bl	800d4d4 <VL53L0X_WrByte>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800aaf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10a      	bne.n	800ab0e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800aaf8:	f107 0210 	add.w	r2, r7, #16
 800aafc:	f107 0111 	add.w	r1, r7, #17
 800ab00:	2300      	movs	r3, #0
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fbbb 	bl	800b27e <VL53L0X_perform_ref_calibration>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ab0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d121      	bne.n	800ab5a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800ab1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab1c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800ab22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab24:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ab32:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ab36:	f107 0218 	add.w	r2, r7, #24
 800ab3a:	9204      	str	r2, [sp, #16]
 800ab3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab3e:	9203      	str	r2, [sp, #12]
 800ab40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab42:	9202      	str	r2, [sp, #8]
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fe5e 	bl	800a810 <enable_ref_spads>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d174      	bne.n	800ac4c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ab66:	f107 0312 	add.w	r3, r7, #18
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7ff fecb 	bl	800a908 <perform_ref_signal_measurement>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ab78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d161      	bne.n	800ac44 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800ab80:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ab82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d25d      	bcs.n	800ac44 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab8c:	e009      	b.n	800aba2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ab98:	2200      	movs	r2, #0
 800ab9a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ab9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9e:	3301      	adds	r3, #1
 800aba0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d3f1      	bcc.n	800ab8e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800abaa:	e002      	b.n	800abb2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800abac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abae:	3301      	adds	r3, #1
 800abb0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800abb2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800abb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb8:	4413      	add	r3, r2
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fdb0 	bl	800a720 <is_aperture>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d103      	bne.n	800abce <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800abc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	429a      	cmp	r2, r3
 800abcc:	d3ee      	bcc.n	800abac <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800abce:	2301      	movs	r3, #1
 800abd0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800abd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800abe2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800abe6:	f107 0218 	add.w	r2, r7, #24
 800abea:	9204      	str	r2, [sp, #16]
 800abec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abee:	9203      	str	r2, [sp, #12]
 800abf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abf2:	9202      	str	r2, [sp, #8]
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	4623      	mov	r3, r4
 800abfc:	4602      	mov	r2, r0
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f7ff fe06 	bl	800a810 <enable_ref_spads>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800ac0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d11b      	bne.n	800ac4a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800ac16:	f107 0312 	add.w	r3, r7, #18
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff fe73 	bl	800a908 <perform_ref_signal_measurement>
 800ac22:	4603      	mov	r3, r0
 800ac24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800ac28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10c      	bne.n	800ac4a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800ac30:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800ac32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d208      	bcs.n	800ac4a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800ac3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800ac42:	e002      	b.n	800ac4a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac48:	e000      	b.n	800ac4c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800ac4a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ac4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f040 80af 	bne.w	800adb4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800ac56:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800ac58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	f240 80aa 	bls.w	800adb4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800ac60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800ac66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800ac70:	f107 031c 	add.w	r3, r7, #28
 800ac74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac76:	4618      	mov	r0, r3
 800ac78:	f004 fffb 	bl	800fc72 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800ac7c:	8a7b      	ldrh	r3, [r7, #18]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfb8      	it	lt
 800ac88:	425b      	neglt	r3, r3
 800ac8a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800ac92:	e086      	b.n	800ada2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800ac9a:	f107 0314 	add.w	r3, r7, #20
 800ac9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aca2:	f7ff fcdf 	bl	800a664 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acac:	d103      	bne.n	800acb6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800acae:	23ce      	movs	r3, #206	; 0xce
 800acb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800acb4:	e07e      	b.n	800adb4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800acb6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	4413      	add	r3, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fd2e 	bl	800a720 <is_aperture>
 800acc4:	4603      	mov	r3, r0
 800acc6:	461a      	mov	r2, r3
 800acc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acca:	4293      	cmp	r3, r2
 800accc:	d003      	beq.n	800acd6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800acce:	2301      	movs	r3, #1
 800acd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800acd4:	e06e      	b.n	800adb4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800acd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd8:	3301      	adds	r3, #1
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800ace6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ace8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff fd32 	bl	800a754 <enable_spad_bit>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800acf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10c      	bne.n	800ad18 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800acfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad00:	3301      	adds	r3, #1
 800ad02:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff fd59 	bl	800a7c4 <set_ref_spad_map>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800ad18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d146      	bne.n	800adae <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800ad20:	f107 0312 	add.w	r3, r7, #18
 800ad24:	4619      	mov	r1, r3
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff fdee 	bl	800a908 <perform_ref_signal_measurement>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800ad32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d13b      	bne.n	800adb2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800ad3a:	8a7b      	ldrh	r3, [r7, #18]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bfb8      	it	lt
 800ad46:	425b      	neglt	r3, r3
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800ad4a:	8a7b      	ldrh	r3, [r7, #18]
 800ad4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d21c      	bcs.n	800ad8c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ad52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d914      	bls.n	800ad84 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ad5a:	f107 031c 	add.w	r3, r7, #28
 800ad5e:	4619      	mov	r1, r3
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff fd2f 	bl	800a7c4 <set_ref_spad_map>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800ad72:	f107 011c 	add.w	r1, r7, #28
 800ad76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f004 ff7a 	bl	800fc72 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800ad7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad80:	3b01      	subs	r3, #1
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8a:	e00a      	b.n	800ada2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800ad96:	f107 031c 	add.w	r3, r7, #28
 800ad9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f004 ff68 	bl	800fc72 <memcpy>
		while (!complete) {
 800ada2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f43f af74 	beq.w	800ac94 <VL53L0X_perform_ref_spad_management+0x2b8>
 800adac:	e002      	b.n	800adb4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800adae:	bf00      	nop
 800adb0:	e000      	b.n	800adb4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800adb2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800adb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d115      	bne.n	800ade8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adc0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800adc8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800ade8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800adec:	4618      	mov	r0, r3
 800adee:	375c      	adds	r7, #92	; 0x5c
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd90      	pop	{r4, r7, pc}

0800adf4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b093      	sub	sp, #76	; 0x4c
 800adf8:	af06      	add	r7, sp, #24
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	4613      	mov	r3, r2
 800ae00:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800ae0c:	23b4      	movs	r3, #180	; 0xb4
 800ae0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800ae12:	2306      	movs	r3, #6
 800ae14:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800ae16:	232c      	movs	r3, #44	; 0x2c
 800ae18:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	21ff      	movs	r1, #255	; 0xff
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f002 fb58 	bl	800d4d4 <VL53L0X_WrByte>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ae2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d107      	bne.n	800ae42 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800ae32:	2200      	movs	r2, #0
 800ae34:	214f      	movs	r1, #79	; 0x4f
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f002 fb4c 	bl	800d4d4 <VL53L0X_WrByte>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800ae42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d107      	bne.n	800ae5a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800ae4a:	222c      	movs	r2, #44	; 0x2c
 800ae4c:	214e      	movs	r1, #78	; 0x4e
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f002 fb40 	bl	800d4d4 <VL53L0X_WrByte>
 800ae54:	4603      	mov	r3, r0
 800ae56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ae5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d107      	bne.n	800ae72 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae62:	2200      	movs	r2, #0
 800ae64:	21ff      	movs	r1, #255	; 0xff
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f002 fb34 	bl	800d4d4 <VL53L0X_WrByte>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ae72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800ae7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae7e:	461a      	mov	r2, r3
 800ae80:	21b6      	movs	r1, #182	; 0xb6
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f002 fb26 	bl	800d4d4 <VL53L0X_WrByte>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800ae8e:	2300      	movs	r3, #0
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
 800ae92:	e009      	b.n	800aea8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ae9e:	2200      	movs	r2, #0
 800aea0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	3301      	adds	r3, #1
 800aea6:	627b      	str	r3, [r7, #36]	; 0x24
 800aea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d3f1      	bcc.n	800ae94 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d011      	beq.n	800aeda <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800aeb6:	e002      	b.n	800aebe <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	3301      	adds	r3, #1
 800aebc:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800aebe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec4:	4413      	add	r3, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff fc2a 	bl	800a720 <is_aperture>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d103      	bne.n	800aeda <VL53L0X_set_reference_spads+0xe6>
 800aed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d3ee      	bcc.n	800aeb8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800aee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aeea:	79f9      	ldrb	r1, [r7, #7]
 800aeec:	f107 0214 	add.w	r2, r7, #20
 800aef0:	9204      	str	r2, [sp, #16]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	9203      	str	r2, [sp, #12]
 800aef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef8:	9202      	str	r2, [sp, #8]
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	4623      	mov	r3, r4
 800af02:	4602      	mov	r2, r0
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fc83 	bl	800a810 <enable_ref_spads>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800af10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10c      	bne.n	800af32 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	b2da      	uxtb	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	79fa      	ldrb	r2, [r7, #7]
 800af2e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800af32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800af36:	4618      	mov	r0, r3
 800af38:	3734      	adds	r7, #52	; 0x34
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd90      	pop	{r4, r7, pc}

0800af3e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800af3e:	b580      	push	{r7, lr}
 800af40:	b084      	sub	sp, #16
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	460b      	mov	r3, r1
 800af48:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800af4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10a      	bne.n	800af6c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	f043 0301 	orr.w	r3, r3, #1
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	461a      	mov	r2, r3
 800af60:	2100      	movs	r1, #0
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f002 fab6 	bl	800d4d4 <VL53L0X_WrByte>
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800af6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f9bf 	bl	800b2f8 <VL53L0X_measurement_poll_for_completion>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800af7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800af86:	2100      	movs	r1, #0
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff fab5 	bl	800a4f8 <VL53L0X_ClearInterruptMask>
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800af92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800af9a:	2200      	movs	r2, #0
 800af9c:	2100      	movs	r1, #0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 fa98 	bl	800d4d4 <VL53L0X_WrByte>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]

	return Status;
 800afa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	4608      	mov	r0, r1
 800afbe:	4611      	mov	r1, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	4603      	mov	r3, r0
 800afc4:	70fb      	strb	r3, [r7, #3]
 800afc6:	460b      	mov	r3, r1
 800afc8:	70bb      	strb	r3, [r7, #2]
 800afca:	4613      	mov	r3, r2
 800afcc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800afd6:	2201      	movs	r2, #1
 800afd8:	21ff      	movs	r1, #255	; 0xff
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f002 fa7a 	bl	800d4d4 <VL53L0X_WrByte>
 800afe0:	4603      	mov	r3, r0
 800afe2:	461a      	mov	r2, r3
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800afea:	2200      	movs	r2, #0
 800afec:	2100      	movs	r1, #0
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f002 fa70 	bl	800d4d4 <VL53L0X_WrByte>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	4313      	orrs	r3, r2
 800affc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800affe:	2200      	movs	r2, #0
 800b000:	21ff      	movs	r1, #255	; 0xff
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f002 fa66 	bl	800d4d4 <VL53L0X_WrByte>
 800b008:	4603      	mov	r3, r0
 800b00a:	461a      	mov	r2, r3
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	4313      	orrs	r3, r2
 800b010:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b012:	78fb      	ldrb	r3, [r7, #3]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01e      	beq.n	800b056 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b018:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	21cb      	movs	r1, #203	; 0xcb
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f002 fad7 	bl	800d5d8 <VL53L0X_RdByte>
 800b02a:	4603      	mov	r3, r0
 800b02c:	461a      	mov	r2, r3
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	4313      	orrs	r3, r2
 800b032:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d02a      	beq.n	800b092 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b03c:	f107 030e 	add.w	r3, r7, #14
 800b040:	461a      	mov	r2, r3
 800b042:	21ee      	movs	r1, #238	; 0xee
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f002 fac7 	bl	800d5d8 <VL53L0X_RdByte>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
 800b050:	4313      	orrs	r3, r2
 800b052:	73fb      	strb	r3, [r7, #15]
 800b054:	e01d      	b.n	800b092 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b056:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b05e:	78bb      	ldrb	r3, [r7, #2]
 800b060:	461a      	mov	r2, r3
 800b062:	21cb      	movs	r1, #203	; 0xcb
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f002 fa35 	bl	800d4d4 <VL53L0X_WrByte>
 800b06a:	4603      	mov	r3, r0
 800b06c:	461a      	mov	r2, r3
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	4313      	orrs	r3, r2
 800b072:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b07c:	787b      	ldrb	r3, [r7, #1]
 800b07e:	2280      	movs	r2, #128	; 0x80
 800b080:	21ee      	movs	r1, #238	; 0xee
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f002 fa74 	bl	800d570 <VL53L0X_UpdateByte>
 800b088:	4603      	mov	r3, r0
 800b08a:	461a      	mov	r2, r3
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	4313      	orrs	r3, r2
 800b090:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b092:	2201      	movs	r2, #1
 800b094:	21ff      	movs	r1, #255	; 0xff
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f002 fa1c 	bl	800d4d4 <VL53L0X_WrByte>
 800b09c:	4603      	mov	r3, r0
 800b09e:	461a      	mov	r2, r3
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f002 fa12 	bl	800d4d4 <VL53L0X_WrByte>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	21ff      	movs	r1, #255	; 0xff
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f002 fa08 	bl	800d4d4 <VL53L0X_WrByte>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	f023 0310 	bic.w	r3, r3, #16
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	701a      	strb	r2, [r3, #0]

	return Status;
 800b0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b08a      	sub	sp, #40	; 0x28
 800b0ea:	af04      	add	r7, sp, #16
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	71fb      	strb	r3, [r7, #7]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b110:	79bb      	ldrb	r3, [r7, #6]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b11c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b11e:	2201      	movs	r2, #1
 800b120:	2101      	movs	r1, #1
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f002 f9d6 	bl	800d4d4 <VL53L0X_WrByte>
 800b128:	4603      	mov	r3, r0
 800b12a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b12c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b134:	2140      	movs	r1, #64	; 0x40
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f7ff ff01 	bl	800af3e <VL53L0X_perform_single_ref_calibration>
 800b13c:	4603      	mov	r3, r0
 800b13e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d115      	bne.n	800b174 <VL53L0X_perform_vhv_calibration+0x8e>
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d112      	bne.n	800b174 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b14e:	7d39      	ldrb	r1, [r7, #20]
 800b150:	7d7a      	ldrb	r2, [r7, #21]
 800b152:	2300      	movs	r3, #0
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	2301      	movs	r3, #1
 800b158:	9302      	str	r3, [sp, #8]
 800b15a:	f107 0313 	add.w	r3, r7, #19
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	460b      	mov	r3, r1
 800b166:	2101      	movs	r1, #1
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f7ff ff23 	bl	800afb4 <VL53L0X_ref_calibration_io>
 800b16e:	4603      	mov	r3, r0
 800b170:	75fb      	strb	r3, [r7, #23]
 800b172:	e002      	b.n	800b17a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d112      	bne.n	800b1a8 <VL53L0X_perform_vhv_calibration+0xc2>
 800b182:	79bb      	ldrb	r3, [r7, #6]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00f      	beq.n	800b1a8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b188:	7dbb      	ldrb	r3, [r7, #22]
 800b18a:	461a      	mov	r2, r3
 800b18c:	2101      	movs	r1, #1
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f002 f9a0 	bl	800d4d4 <VL53L0X_WrByte>
 800b194:	4603      	mov	r3, r0
 800b196:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d103      	bne.n	800b1a8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	7dba      	ldrb	r2, [r7, #22]
 800b1a4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b1a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08a      	sub	sp, #40	; 0x28
 800b1b8:	af04      	add	r7, sp, #16
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4611      	mov	r1, r2
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	71fb      	strb	r3, [r7, #7]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b1da:	79bb      	ldrb	r3, [r7, #6]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b1e6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f002 f971 	bl	800d4d4 <VL53L0X_WrByte>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d105      	bne.n	800b20a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b1fe:	2100      	movs	r1, #0
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff fe9c 	bl	800af3e <VL53L0X_perform_single_ref_calibration>
 800b206:	4603      	mov	r3, r0
 800b208:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b20a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d115      	bne.n	800b23e <VL53L0X_perform_phase_calibration+0x8a>
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d112      	bne.n	800b23e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b218:	7d39      	ldrb	r1, [r7, #20]
 800b21a:	7d7a      	ldrb	r2, [r7, #21]
 800b21c:	2301      	movs	r3, #1
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	2300      	movs	r3, #0
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	f107 0313 	add.w	r3, r7, #19
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	460b      	mov	r3, r1
 800b230:	2101      	movs	r1, #1
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff febe 	bl	800afb4 <VL53L0X_ref_calibration_io>
 800b238:	4603      	mov	r3, r0
 800b23a:	75fb      	strb	r3, [r7, #23]
 800b23c:	e002      	b.n	800b244 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2200      	movs	r2, #0
 800b242:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b244:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d112      	bne.n	800b272 <VL53L0X_perform_phase_calibration+0xbe>
 800b24c:	79bb      	ldrb	r3, [r7, #6]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00f      	beq.n	800b272 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b252:	7dbb      	ldrb	r3, [r7, #22]
 800b254:	461a      	mov	r2, r3
 800b256:	2101      	movs	r1, #1
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f002 f93b 	bl	800d4d4 <VL53L0X_WrByte>
 800b25e:	4603      	mov	r3, r0
 800b260:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d103      	bne.n	800b272 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	7dba      	ldrb	r2, [r7, #22]
 800b26e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b086      	sub	sp, #24
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	60b9      	str	r1, [r7, #8]
 800b288:	607a      	str	r2, [r7, #4]
 800b28a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b28c:	2300      	movs	r3, #0
 800b28e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b29a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b29c:	78fa      	ldrb	r2, [r7, #3]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	68b9      	ldr	r1, [r7, #8]
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f7ff ff1f 	bl	800b0e6 <VL53L0X_perform_vhv_calibration>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b2ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d107      	bne.n	800b2c4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b2b4:	78fa      	ldrb	r2, [r7, #3]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	6879      	ldr	r1, [r7, #4]
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff ff7a 	bl	800b1b4 <VL53L0X_perform_phase_calibration>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10f      	bne.n	800b2ec <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b2cc:	7dbb      	ldrb	r3, [r7, #22]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f002 f8fe 	bl	800d4d4 <VL53L0X_WrByte>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b2dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d103      	bne.n	800b2ec <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	7dba      	ldrb	r2, [r7, #22]
 800b2e8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b2ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b30c:	f107 030f 	add.w	r3, r7, #15
 800b310:	4619      	mov	r1, r3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7fe fe02 	bl	8009f1c <VL53L0X_GetMeasurementDataReady>
 800b318:	4603      	mov	r3, r0
 800b31a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b31c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d110      	bne.n	800b346 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d00f      	beq.n	800b34a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	3301      	adds	r3, #1
 800b32e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b336:	d302      	bcc.n	800b33e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b338:	23f9      	movs	r3, #249	; 0xf9
 800b33a:	75fb      	strb	r3, [r7, #23]
			break;
 800b33c:	e006      	b.n	800b34c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f002 f9e8 	bl	800d714 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b344:	e7e2      	b.n	800b30c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b346:	bf00      	nop
 800b348:	e000      	b.n	800b34c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b34a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b34c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	3301      	adds	r3, #1
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b37e:	b480      	push	{r7}
 800b380:	b085      	sub	sp, #20
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b38a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b38e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b390:	e002      	b.n	800b398 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	089b      	lsrs	r3, r3, #2
 800b396:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d8f8      	bhi.n	800b392 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b3a0:	e017      	b.n	800b3d2 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d30b      	bcc.n	800b3c6 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	085b      	lsrs	r3, r3, #1
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e002      	b.n	800b3cc <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	085b      	lsrs	r3, r3, #1
 800b3ca:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	089b      	lsrs	r3, r3, #2
 800b3d0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1e4      	bne.n	800b3a2 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b086      	sub	sp, #24
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2183      	movs	r1, #131	; 0x83
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f002 f86c 	bl	800d4d4 <VL53L0X_WrByte>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	4313      	orrs	r3, r2
 800b404:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d11e      	bne.n	800b44c <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b412:	f107 030f 	add.w	r3, r7, #15
 800b416:	461a      	mov	r2, r3
 800b418:	2183      	movs	r1, #131	; 0x83
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f002 f8dc 	bl	800d5d8 <VL53L0X_RdByte>
 800b420:	4603      	mov	r3, r0
 800b422:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <VL53L0X_device_read_strobe+0x5a>
 800b42a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	3301      	adds	r3, #1
 800b436:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b43e:	d3e8      	bcc.n	800b412 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b446:	d301      	bcc.n	800b44c <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b448:	23f9      	movs	r3, #249	; 0xf9
 800b44a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b44c:	2201      	movs	r2, #1
 800b44e:	2183      	movs	r1, #131	; 0x83
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f002 f83f 	bl	800d4d4 <VL53L0X_WrByte>
 800b456:	4603      	mov	r3, r0
 800b458:	461a      	mov	r2, r3
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	4313      	orrs	r3, r2
 800b45e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b460:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b098      	sub	sp, #96	; 0x60
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b478:	2300      	movs	r3, #0
 800b47a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b49c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b4a0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b4b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b4b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4bc:	2b07      	cmp	r3, #7
 800b4be:	f000 8408 	beq.w	800bcd2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	2180      	movs	r1, #128	; 0x80
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f002 f804 	bl	800d4d4 <VL53L0X_WrByte>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b4da:	2201      	movs	r2, #1
 800b4dc:	21ff      	movs	r1, #255	; 0xff
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 fff8 	bl	800d4d4 <VL53L0X_WrByte>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 ffec 	bl	800d4d4 <VL53L0X_WrByte>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	461a      	mov	r2, r3
 800b500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b504:	4313      	orrs	r3, r2
 800b506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b50a:	2206      	movs	r2, #6
 800b50c:	21ff      	movs	r1, #255	; 0xff
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 ffe0 	bl	800d4d4 <VL53L0X_WrByte>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b51c:	4313      	orrs	r3, r2
 800b51e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b522:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b526:	461a      	mov	r2, r3
 800b528:	2183      	movs	r1, #131	; 0x83
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f002 f854 	bl	800d5d8 <VL53L0X_RdByte>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b538:	4313      	orrs	r3, r2
 800b53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b53e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b542:	f043 0304 	orr.w	r3, r3, #4
 800b546:	b2db      	uxtb	r3, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	2183      	movs	r1, #131	; 0x83
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 ffc1 	bl	800d4d4 <VL53L0X_WrByte>
 800b552:	4603      	mov	r3, r0
 800b554:	461a      	mov	r2, r3
 800b556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b55a:	4313      	orrs	r3, r2
 800b55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b560:	2207      	movs	r2, #7
 800b562:	21ff      	movs	r1, #255	; 0xff
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f001 ffb5 	bl	800d4d4 <VL53L0X_WrByte>
 800b56a:	4603      	mov	r3, r0
 800b56c:	461a      	mov	r2, r3
 800b56e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b572:	4313      	orrs	r3, r2
 800b574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b578:	2201      	movs	r2, #1
 800b57a:	2181      	movs	r1, #129	; 0x81
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 ffa9 	bl	800d4d4 <VL53L0X_WrByte>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b58a:	4313      	orrs	r3, r2
 800b58c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f002 f8bf 	bl	800d714 <VL53L0X_PollingDelay>
 800b596:	4603      	mov	r3, r0
 800b598:	461a      	mov	r2, r3
 800b59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	2180      	movs	r1, #128	; 0x80
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 ff93 	bl	800d4d4 <VL53L0X_WrByte>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 8098 	beq.w	800b6f8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b5c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b5cc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f040 8091 	bne.w	800b6f8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b5d6:	226b      	movs	r2, #107	; 0x6b
 800b5d8:	2194      	movs	r1, #148	; 0x94
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 ff7a 	bl	800d4d4 <VL53L0X_WrByte>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff fef9 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b606:	461a      	mov	r2, r3
 800b608:	2190      	movs	r1, #144	; 0x90
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f002 f846 	bl	800d69c <VL53L0X_RdDWord>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b618:	4313      	orrs	r3, r2
 800b61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	0a1b      	lsrs	r3, r3, #8
 800b622:	b2db      	uxtb	r3, r3
 800b624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b628:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	0bdb      	lsrs	r3, r3, #15
 800b630:	b2db      	uxtb	r3, r3
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b63a:	2224      	movs	r2, #36	; 0x24
 800b63c:	2194      	movs	r1, #148	; 0x94
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 ff48 	bl	800d4d4 <VL53L0X_WrByte>
 800b644:	4603      	mov	r3, r0
 800b646:	461a      	mov	r2, r3
 800b648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64c:	4313      	orrs	r3, r2
 800b64e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff fec7 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b658:	4603      	mov	r3, r0
 800b65a:	461a      	mov	r2, r3
 800b65c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b660:	4313      	orrs	r3, r2
 800b662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b66a:	461a      	mov	r2, r3
 800b66c:	2190      	movs	r1, #144	; 0x90
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f002 f814 	bl	800d69c <VL53L0X_RdDWord>
 800b674:	4603      	mov	r3, r0
 800b676:	461a      	mov	r2, r3
 800b678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b67c:	4313      	orrs	r3, r2
 800b67e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	0e1b      	lsrs	r3, r3, #24
 800b686:	b2db      	uxtb	r3, r3
 800b688:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	0c1b      	lsrs	r3, r3, #16
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	0a1b      	lsrs	r3, r3, #8
 800b696:	b2db      	uxtb	r3, r3
 800b698:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b6a0:	2225      	movs	r2, #37	; 0x25
 800b6a2:	2194      	movs	r1, #148	; 0x94
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 ff15 	bl	800d4d4 <VL53L0X_WrByte>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff fe94 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b6cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	2190      	movs	r1, #144	; 0x90
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f001 ffe1 	bl	800d69c <VL53L0X_RdDWord>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	461a      	mov	r2, r3
 800b6de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	0e1b      	lsrs	r3, r3, #24
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	0c1b      	lsrs	r3, r3, #16
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b6f8:	78fb      	ldrb	r3, [r7, #3]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 8189 	beq.w	800ba16 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b704:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b708:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f040 8182 	bne.w	800ba16 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b712:	2202      	movs	r2, #2
 800b714:	2194      	movs	r1, #148	; 0x94
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f001 fedc 	bl	800d4d4 <VL53L0X_WrByte>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b724:	4313      	orrs	r3, r2
 800b726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff fe5b 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b738:	4313      	orrs	r3, r2
 800b73a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b73e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b742:	461a      	mov	r2, r3
 800b744:	2190      	movs	r1, #144	; 0x90
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 ff46 	bl	800d5d8 <VL53L0X_RdByte>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b754:	4313      	orrs	r3, r2
 800b756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b75a:	227b      	movs	r2, #123	; 0x7b
 800b75c:	2194      	movs	r1, #148	; 0x94
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f001 feb8 	bl	800d4d4 <VL53L0X_WrByte>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b76c:	4313      	orrs	r3, r2
 800b76e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff fe37 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b778:	4603      	mov	r3, r0
 800b77a:	461a      	mov	r2, r3
 800b77c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b780:	4313      	orrs	r3, r2
 800b782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b786:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b78a:	461a      	mov	r2, r3
 800b78c:	2190      	movs	r1, #144	; 0x90
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 ff22 	bl	800d5d8 <VL53L0X_RdByte>
 800b794:	4603      	mov	r3, r0
 800b796:	461a      	mov	r2, r3
 800b798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b79c:	4313      	orrs	r3, r2
 800b79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b7a2:	2277      	movs	r2, #119	; 0x77
 800b7a4:	2194      	movs	r1, #148	; 0x94
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f001 fe94 	bl	800d4d4 <VL53L0X_WrByte>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fe13 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b7ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	2190      	movs	r1, #144	; 0x90
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f001 ff60 	bl	800d69c <VL53L0X_RdDWord>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	0e5b      	lsrs	r3, r3, #25
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	0c9b      	lsrs	r3, r3, #18
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b802:	b2db      	uxtb	r3, r3
 800b804:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	0adb      	lsrs	r3, r3, #11
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b810:	b2db      	uxtb	r3, r3
 800b812:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b816:	091b      	lsrs	r3, r3, #4
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	b2db      	uxtb	r3, r3
 800b826:	00db      	lsls	r3, r3, #3
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b834:	2278      	movs	r2, #120	; 0x78
 800b836:	2194      	movs	r1, #148	; 0x94
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fe4b 	bl	800d4d4 <VL53L0X_WrByte>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b846:	4313      	orrs	r3, r2
 800b848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff fdca 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b85a:	4313      	orrs	r3, r2
 800b85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b864:	461a      	mov	r2, r3
 800b866:	2190      	movs	r1, #144	; 0x90
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f001 ff17 	bl	800d69c <VL53L0X_RdDWord>
 800b86e:	4603      	mov	r3, r0
 800b870:	461a      	mov	r2, r3
 800b872:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b876:	4313      	orrs	r3, r2
 800b878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	0f5b      	lsrs	r3, r3, #29
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b886:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b88c:	4413      	add	r3, r2
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	0d9b      	lsrs	r3, r3, #22
 800b896:	b2db      	uxtb	r3, r3
 800b898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	0bdb      	lsrs	r3, r3, #15
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	0a1b      	lsrs	r3, r3, #8
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	019b      	lsls	r3, r3, #6
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b8dc:	2279      	movs	r2, #121	; 0x79
 800b8de:	2194      	movs	r1, #148	; 0x94
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 fdf7 	bl	800d4d4 <VL53L0X_WrByte>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff fd76 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b902:	4313      	orrs	r3, r2
 800b904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b90c:	461a      	mov	r2, r3
 800b90e:	2190      	movs	r1, #144	; 0x90
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f001 fec3 	bl	800d69c <VL53L0X_RdDWord>
 800b916:	4603      	mov	r3, r0
 800b918:	461a      	mov	r2, r3
 800b91a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b91e:	4313      	orrs	r3, r2
 800b920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	0e9b      	lsrs	r3, r3, #26
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b934:	4413      	add	r3, r2
 800b936:	b2db      	uxtb	r3, r3
 800b938:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	0cdb      	lsrs	r3, r3, #19
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b944:	b2db      	uxtb	r3, r3
 800b946:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	0b1b      	lsrs	r3, r3, #12
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b952:	b2db      	uxtb	r3, r3
 800b954:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	095b      	lsrs	r3, r3, #5
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b960:	b2db      	uxtb	r3, r3
 800b962:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	b2db      	uxtb	r3, r3
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b976:	227a      	movs	r2, #122	; 0x7a
 800b978:	2194      	movs	r1, #148	; 0x94
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f001 fdaa 	bl	800d4d4 <VL53L0X_WrByte>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b988:	4313      	orrs	r3, r2
 800b98a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff fd29 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800b994:	4603      	mov	r3, r0
 800b996:	461a      	mov	r2, r3
 800b998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b99c:	4313      	orrs	r3, r2
 800b99e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b9a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	2190      	movs	r1, #144	; 0x90
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 fe76 	bl	800d69c <VL53L0X_RdDWord>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	0f9b      	lsrs	r3, r3, #30
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800b9ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9ce:	4413      	add	r3, r2
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	0ddb      	lsrs	r3, r3, #23
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	0c1b      	lsrs	r3, r3, #16
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	0a5b      	lsrs	r3, r3, #9
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	089b      	lsrs	r3, r3, #2
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ba10:	2300      	movs	r3, #0
 800ba12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800ba16:	78fb      	ldrb	r3, [r7, #3]
 800ba18:	f003 0304 	and.w	r3, r3, #4
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 80f1 	beq.w	800bc04 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ba22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ba26:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f040 80ea 	bne.w	800bc04 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ba30:	227b      	movs	r2, #123	; 0x7b
 800ba32:	2194      	movs	r1, #148	; 0x94
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 fd4d 	bl	800d4d4 <VL53L0X_WrByte>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba42:	4313      	orrs	r3, r2
 800ba44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fccc 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	461a      	mov	r2, r3
 800ba52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ba5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba60:	461a      	mov	r2, r3
 800ba62:	2190      	movs	r1, #144	; 0x90
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f001 fe19 	bl	800d69c <VL53L0X_RdDWord>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba72:	4313      	orrs	r3, r2
 800ba74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ba78:	227c      	movs	r2, #124	; 0x7c
 800ba7a:	2194      	movs	r1, #148	; 0x94
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 fd29 	bl	800d4d4 <VL53L0X_WrByte>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff fca8 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800baa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baa8:	461a      	mov	r2, r3
 800baaa:	2190      	movs	r1, #144	; 0x90
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f001 fdf5 	bl	800d69c <VL53L0X_RdDWord>
 800bab2:	4603      	mov	r3, r0
 800bab4:	461a      	mov	r2, r3
 800bab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baba:	4313      	orrs	r3, r2
 800babc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800bac0:	2273      	movs	r2, #115	; 0x73
 800bac2:	2194      	movs	r1, #148	; 0x94
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f001 fd05 	bl	800d4d4 <VL53L0X_WrByte>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bad2:	4313      	orrs	r3, r2
 800bad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff fc84 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800bade:	4603      	mov	r3, r0
 800bae0:	461a      	mov	r2, r3
 800bae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bae6:	4313      	orrs	r3, r2
 800bae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800baec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800baf0:	461a      	mov	r2, r3
 800baf2:	2190      	movs	r1, #144	; 0x90
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 fdd1 	bl	800d69c <VL53L0X_RdDWord>
 800bafa:	4603      	mov	r3, r0
 800bafc:	461a      	mov	r2, r3
 800bafe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb02:	4313      	orrs	r3, r2
 800bb04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bb10:	2274      	movs	r2, #116	; 0x74
 800bb12:	2194      	movs	r1, #148	; 0x94
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f001 fcdd 	bl	800d4d4 <VL53L0X_WrByte>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb22:	4313      	orrs	r3, r2
 800bb24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff fc5c 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	461a      	mov	r2, r3
 800bb32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb36:	4313      	orrs	r3, r2
 800bb38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb40:	461a      	mov	r2, r3
 800bb42:	2190      	movs	r1, #144	; 0x90
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f001 fda9 	bl	800d69c <VL53L0X_RdDWord>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb52:	4313      	orrs	r3, r2
 800bb54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bb5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800bb62:	2275      	movs	r2, #117	; 0x75
 800bb64:	2194      	movs	r1, #148	; 0x94
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f001 fcb4 	bl	800d4d4 <VL53L0X_WrByte>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb74:	4313      	orrs	r3, r2
 800bb76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fc33 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb92:	461a      	mov	r2, r3
 800bb94:	2190      	movs	r1, #144	; 0x90
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fd80 	bl	800d69c <VL53L0X_RdDWord>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba4:	4313      	orrs	r3, r2
 800bba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bbb2:	2276      	movs	r2, #118	; 0x76
 800bbb4:	2194      	movs	r1, #148	; 0x94
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 fc8c 	bl	800d4d4 <VL53L0X_WrByte>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7ff fc0b 	bl	800b3e6 <VL53L0X_device_read_strobe>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	2190      	movs	r1, #144	; 0x90
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fd58 	bl	800d69c <VL53L0X_RdDWord>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bbfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc00:	4313      	orrs	r3, r2
 800bc02:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bc04:	2200      	movs	r2, #0
 800bc06:	2181      	movs	r1, #129	; 0x81
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f001 fc63 	bl	800d4d4 <VL53L0X_WrByte>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	461a      	mov	r2, r3
 800bc12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc16:	4313      	orrs	r3, r2
 800bc18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bc1c:	2206      	movs	r2, #6
 800bc1e:	21ff      	movs	r1, #255	; 0xff
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 fc57 	bl	800d4d4 <VL53L0X_WrByte>
 800bc26:	4603      	mov	r3, r0
 800bc28:	461a      	mov	r2, r3
 800bc2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bc34:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bc38:	461a      	mov	r2, r3
 800bc3a:	2183      	movs	r1, #131	; 0x83
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 fccb 	bl	800d5d8 <VL53L0X_RdByte>
 800bc42:	4603      	mov	r3, r0
 800bc44:	461a      	mov	r2, r3
 800bc46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bc50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc54:	f023 0304 	bic.w	r3, r3, #4
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	2183      	movs	r1, #131	; 0x83
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fc38 	bl	800d4d4 <VL53L0X_WrByte>
 800bc64:	4603      	mov	r3, r0
 800bc66:	461a      	mov	r2, r3
 800bc68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc72:	2201      	movs	r2, #1
 800bc74:	21ff      	movs	r1, #255	; 0xff
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f001 fc2c 	bl	800d4d4 <VL53L0X_WrByte>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 fc20 	bl	800d4d4 <VL53L0X_WrByte>
 800bc94:	4603      	mov	r3, r0
 800bc96:	461a      	mov	r2, r3
 800bc98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bca2:	2200      	movs	r2, #0
 800bca4:	21ff      	movs	r1, #255	; 0xff
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fc14 	bl	800d4d4 <VL53L0X_WrByte>
 800bcac:	4603      	mov	r3, r0
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2180      	movs	r1, #128	; 0x80
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 fc08 	bl	800d4d4 <VL53L0X_WrByte>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bccc:	4313      	orrs	r3, r2
 800bcce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bcd2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f040 808f 	bne.w	800bdfa <VL53L0X_get_info_from_device+0x98e>
 800bcdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bce0:	2b07      	cmp	r3, #7
 800bce2:	f000 808a 	beq.w	800bdfa <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800bce6:	78fb      	ldrb	r3, [r7, #3]
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d024      	beq.n	800bd3a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bcf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcf4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d11e      	bne.n	800bd3a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800bd02:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800bd0c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bd10:	2300      	movs	r3, #0
 800bd12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd14:	e00e      	b.n	800bd34 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800bd16:	f107 0208 	add.w	r2, r7, #8
 800bd1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd1c:	4413      	add	r3, r2
 800bd1e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	3301      	adds	r3, #1
 800bd32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	dded      	ble.n	800bd16 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800bd3a:	78fb      	ldrb	r3, [r7, #3]
 800bd3c:	f003 0302 	and.w	r3, r3, #2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d018      	beq.n	800bd76 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bd44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd48:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d112      	bne.n	800bd76 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd50:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	33f3      	adds	r3, #243	; 0xf3
 800bd68:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800bd6a:	f107 0310 	add.w	r3, r7, #16
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd72:	f004 f95a 	bl	801002a <strcpy>

		}

		if (((option & 4) == 4) &&
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	f003 0304 	and.w	r3, r3, #4
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d030      	beq.n	800bde2 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bd80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd84:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d12a      	bne.n	800bde2 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800bd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd9e:	025b      	lsls	r3, r3, #9
 800bda0:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bda6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800bdb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d011      	beq.n	800bdda <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800bdb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800bdbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdc4:	fb02 f303 	mul.w	r3, r2, r3
 800bdc8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800bdca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800bdce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800bdd2:	425b      	negs	r3, r3
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800bdda:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800bde2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800bdf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdfa:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3760      	adds	r7, #96	; 0x60
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800be06:	b480      	push	{r7}
 800be08:	b087      	sub	sp, #28
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	460b      	mov	r3, r1
 800be10:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800be12:	f240 6277 	movw	r2, #1655	; 0x677
 800be16:	f04f 0300 	mov.w	r3, #0
 800be1a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800be1e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800be22:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	fb02 f303 	mul.w	r3, r2, r3
 800be32:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800be34:	68bb      	ldr	r3, [r7, #8]
}
 800be36:	4618      	mov	r0, r3
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800be42:	b480      	push	{r7}
 800be44:	b087      	sub	sp, #28
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800be4e:	2300      	movs	r3, #0
 800be50:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800be52:	2300      	movs	r3, #0
 800be54:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d017      	beq.n	800be8c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3b01      	subs	r3, #1
 800be60:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800be62:	e005      	b.n	800be70 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	085b      	lsrs	r3, r3, #1
 800be68:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800be6a:	89fb      	ldrh	r3, [r7, #14]
 800be6c:	3301      	adds	r3, #1
 800be6e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f4      	bne.n	800be64 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800be7a:	89fb      	ldrh	r3, [r7, #14]
 800be7c:	021b      	lsls	r3, r3, #8
 800be7e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	b29b      	uxth	r3, r3
 800be84:	b2db      	uxtb	r3, r3
 800be86:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800be88:	4413      	add	r3, r2
 800be8a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800be8c:	8afb      	ldrh	r3, [r7, #22]

}
 800be8e:	4618      	mov	r0, r3
 800be90:	371c      	adds	r7, #28
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	4603      	mov	r3, r0
 800bea2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800beac:	88fa      	ldrh	r2, [r7, #6]
 800beae:	0a12      	lsrs	r2, r2, #8
 800beb0:	b292      	uxth	r2, r2
 800beb2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800beb4:	3301      	adds	r3, #1
 800beb6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800beb8:	68fb      	ldr	r3, [r7, #12]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
	...

0800bec8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	4613      	mov	r3, r2
 800bed4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	4619      	mov	r1, r3
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7ff ff91 	bl	800be06 <VL53L0X_calc_macro_period_ps>
 800bee4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800beec:	4a0a      	ldr	r2, [pc, #40]	; (800bf18 <VL53L0X_calc_timeout_mclks+0x50>)
 800beee:	fba2 2303 	umull	r2, r3, r2, r3
 800bef2:	099b      	lsrs	r3, r3, #6
 800bef4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800befc:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	085b      	lsrs	r3, r3, #1
 800bf04:	441a      	add	r2, r3
	timeout_period_mclks =
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf0c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	10624dd3 	.word	0x10624dd3

0800bf1c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	460b      	mov	r3, r1
 800bf26:	807b      	strh	r3, [r7, #2]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bf30:	787b      	ldrb	r3, [r7, #1]
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff ff66 	bl	800be06 <VL53L0X_calc_macro_period_ps>
 800bf3a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf42:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <VL53L0X_calc_timeout_us+0x50>)
 800bf44:	fba2 2303 	umull	r2, r3, r2, r3
 800bf48:	099b      	lsrs	r3, r3, #6
 800bf4a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800bf4c:	887b      	ldrh	r3, [r7, #2]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	fb02 f303 	mul.w	r3, r2, r3
 800bf54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800bf58:	4a04      	ldr	r2, [pc, #16]	; (800bf6c <VL53L0X_calc_timeout_us+0x50>)
 800bf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5e:	099b      	lsrs	r3, r3, #6
 800bf60:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800bf62:	697b      	ldr	r3, [r7, #20]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3718      	adds	r7, #24
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	10624dd3 	.word	0x10624dd3

0800bf70 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08c      	sub	sp, #48	; 0x30
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800bf92:	2300      	movs	r3, #0
 800bf94:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800bf96:	7afb      	ldrb	r3, [r7, #11]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d005      	beq.n	800bfa8 <get_sequence_step_timeout+0x38>
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d002      	beq.n	800bfa8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800bfa2:	7afb      	ldrb	r3, [r7, #11]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d128      	bne.n	800bffa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bfa8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bfac:	461a      	mov	r2, r3
 800bfae:	2100      	movs	r1, #0
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7fd fa8f 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800bfbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d109      	bne.n	800bfd8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800bfc4:	f107 0320 	add.w	r3, r7, #32
 800bfc8:	461a      	mov	r2, r3
 800bfca:	2146      	movs	r1, #70	; 0x46
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f001 fb03 	bl	800d5d8 <VL53L0X_RdByte>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800bfd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff ff5b 	bl	800be9a <VL53L0X_decode_timeout>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bfe8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bfec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfee:	4619      	mov	r1, r3
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f7ff ff93 	bl	800bf1c <VL53L0X_calc_timeout_us>
 800bff6:	62b8      	str	r0, [r7, #40]	; 0x28
 800bff8:	e092      	b.n	800c120 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800bffa:	7afb      	ldrb	r3, [r7, #11]
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d135      	bne.n	800c06c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c000:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c004:	461a      	mov	r2, r3
 800c006:	2100      	movs	r1, #0
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f7fd fa63 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c00e:	4603      	mov	r3, r0
 800c010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c014:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f040 8081 	bne.w	800c120 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c01e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c022:	461a      	mov	r2, r3
 800c024:	2100      	movs	r1, #0
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f7fd fa54 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c032:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c036:	2b00      	cmp	r3, #0
 800c038:	d109      	bne.n	800c04e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c03a:	f107 031e 	add.w	r3, r7, #30
 800c03e:	461a      	mov	r2, r3
 800c040:	2151      	movs	r1, #81	; 0x51
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f001 faf2 	bl	800d62c <VL53L0X_RdWord>
 800c048:	4603      	mov	r3, r0
 800c04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c04e:	8bfb      	ldrh	r3, [r7, #30]
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff ff22 	bl	800be9a <VL53L0X_decode_timeout>
 800c056:	4603      	mov	r3, r0
 800c058:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c05a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c05e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c060:	4619      	mov	r1, r3
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff ff5a 	bl	800bf1c <VL53L0X_calc_timeout_us>
 800c068:	62b8      	str	r0, [r7, #40]	; 0x28
 800c06a:	e059      	b.n	800c120 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c06c:	7afb      	ldrb	r3, [r7, #11]
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d156      	bne.n	800c120 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c072:	f107 0314 	add.w	r3, r7, #20
 800c076:	4619      	mov	r1, r3
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7fd fb37 	bl	80096ec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01d      	beq.n	800c0c4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c088:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c08c:	461a      	mov	r2, r3
 800c08e:	2100      	movs	r1, #0
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7fd fa1f 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c096:	4603      	mov	r3, r0
 800c098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c09c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10f      	bne.n	800c0c4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c0a4:	f107 031e 	add.w	r3, r7, #30
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	2151      	movs	r1, #81	; 0x51
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f001 fabd 	bl	800d62c <VL53L0X_RdWord>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c0b8:	8bfb      	ldrh	r3, [r7, #30]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7ff feed 	bl	800be9a <VL53L0X_decode_timeout>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c0c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d109      	bne.n	800c0e0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c0cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7fd f9fd 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c0e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10f      	bne.n	800c108 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c0e8:	f107 031c 	add.w	r3, r7, #28
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	2171      	movs	r1, #113	; 0x71
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f001 fa9b 	bl	800d62c <VL53L0X_RdWord>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c0fc:	8bbb      	ldrh	r3, [r7, #28]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff fecb 	bl	800be9a <VL53L0X_decode_timeout>
 800c104:	4603      	mov	r3, r0
 800c106:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c10a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c110:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c116:	4619      	mov	r1, r3
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff feff 	bl	800bf1c <VL53L0X_calc_timeout_us>
 800c11e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c124:	601a      	str	r2, [r3, #0]

	return Status;
 800c126:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3730      	adds	r7, #48	; 0x30
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b08a      	sub	sp, #40	; 0x28
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	460b      	mov	r3, r1
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c140:	2300      	movs	r3, #0
 800c142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c146:	7afb      	ldrb	r3, [r7, #11]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d005      	beq.n	800c158 <set_sequence_step_timeout+0x26>
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d002      	beq.n	800c158 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c152:	7afb      	ldrb	r3, [r7, #11]
 800c154:	2b02      	cmp	r3, #2
 800c156:	d138      	bne.n	800c1ca <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c158:	f107 031b 	add.w	r3, r7, #27
 800c15c:	461a      	mov	r2, r3
 800c15e:	2100      	movs	r1, #0
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7fd f9b7 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c16c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c170:	2b00      	cmp	r3, #0
 800c172:	d11a      	bne.n	800c1aa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c174:	7efb      	ldrb	r3, [r7, #27]
 800c176:	461a      	mov	r2, r3
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f7ff fea4 	bl	800bec8 <VL53L0X_calc_timeout_mclks>
 800c180:	4603      	mov	r3, r0
 800c182:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c184:	8bbb      	ldrh	r3, [r7, #28]
 800c186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c18a:	d903      	bls.n	800c194 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c18c:	23ff      	movs	r3, #255	; 0xff
 800c18e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c192:	e004      	b.n	800c19e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c194:	8bbb      	ldrh	r3, [r7, #28]
 800c196:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c198:	3b01      	subs	r3, #1
 800c19a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c19e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c1aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f040 80ab 	bne.w	800c30a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c1b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	2146      	movs	r1, #70	; 0x46
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f001 f989 	bl	800d4d4 <VL53L0X_WrByte>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c1c8:	e09f      	b.n	800c30a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c1ca:	7afb      	ldrb	r3, [r7, #11]
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d135      	bne.n	800c23c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c1d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d11b      	bne.n	800c210 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c1d8:	f107 031b 	add.w	r3, r7, #27
 800c1dc:	461a      	mov	r2, r3
 800c1de:	2100      	movs	r1, #0
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7fd f977 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c1ec:	7efb      	ldrb	r3, [r7, #27]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f7ff fe68 	bl	800bec8 <VL53L0X_calc_timeout_mclks>
 800c1f8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c1fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c1fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff fe1f 	bl	800be42 <VL53L0X_encode_timeout>
 800c204:	4603      	mov	r3, r0
 800c206:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c208:	8b3a      	ldrh	r2, [r7, #24]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c214:	2b00      	cmp	r3, #0
 800c216:	d108      	bne.n	800c22a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c218:	8b3b      	ldrh	r3, [r7, #24]
 800c21a:	461a      	mov	r2, r3
 800c21c:	2151      	movs	r1, #81	; 0x51
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f001 f97c 	bl	800d51c <VL53L0X_WrWord>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c22a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d16b      	bne.n	800c30a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c23a:	e066      	b.n	800c30a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	2b04      	cmp	r3, #4
 800c240:	d160      	bne.n	800c304 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c242:	f107 0310 	add.w	r3, r7, #16
 800c246:	4619      	mov	r1, r3
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7fd fa4f 	bl	80096ec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c252:	7cfb      	ldrb	r3, [r7, #19]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01d      	beq.n	800c294 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c258:	f107 031b 	add.w	r3, r7, #27
 800c25c:	461a      	mov	r2, r3
 800c25e:	2100      	movs	r1, #0
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f7fd f937 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c266:	4603      	mov	r3, r0
 800c268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c26c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10f      	bne.n	800c294 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c274:	f107 0318 	add.w	r3, r7, #24
 800c278:	461a      	mov	r2, r3
 800c27a:	2151      	movs	r1, #81	; 0x51
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f001 f9d5 	bl	800d62c <VL53L0X_RdWord>
 800c282:	4603      	mov	r3, r0
 800c284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c288:	8b3b      	ldrh	r3, [r7, #24]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff fe05 	bl	800be9a <VL53L0X_decode_timeout>
 800c290:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c292:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d109      	bne.n	800c2b0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c29c:	f107 031b 	add.w	r3, r7, #27
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f7fd f915 	bl	80094d4 <VL53L0X_GetVcselPulsePeriod>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c2b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d128      	bne.n	800c30a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c2b8:	7efb      	ldrb	r3, [r7, #27]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6879      	ldr	r1, [r7, #4]
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff fe02 	bl	800bec8 <VL53L0X_calc_timeout_mclks>
 800c2c4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2c8:	6a3a      	ldr	r2, [r7, #32]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c2ce:	6a38      	ldr	r0, [r7, #32]
 800c2d0:	f7ff fdb7 	bl	800be42 <VL53L0X_encode_timeout>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c2d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d108      	bne.n	800c2f2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c2e0:	8bfb      	ldrh	r3, [r7, #30]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	2171      	movs	r1, #113	; 0x71
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f001 f918 	bl	800d51c <VL53L0X_WrWord>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c2f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d107      	bne.n	800c30a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c302:	e002      	b.n	800c30a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c304:	23fc      	movs	r3, #252	; 0xfc
 800c306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c30a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3728      	adds	r7, #40	; 0x28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b086      	sub	sp, #24
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	460b      	mov	r3, r1
 800c320:	607a      	str	r2, [r7, #4]
 800c322:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c324:	2300      	movs	r3, #0
 800c326:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d00a      	beq.n	800c348 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c332:	e013      	b.n	800c35c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c334:	f107 0316 	add.w	r3, r7, #22
 800c338:	461a      	mov	r2, r3
 800c33a:	2150      	movs	r1, #80	; 0x50
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f001 f94b 	bl	800d5d8 <VL53L0X_RdByte>
 800c342:	4603      	mov	r3, r0
 800c344:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c346:	e00b      	b.n	800c360 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c348:	f107 0316 	add.w	r3, r7, #22
 800c34c:	461a      	mov	r2, r3
 800c34e:	2170      	movs	r1, #112	; 0x70
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f001 f941 	bl	800d5d8 <VL53L0X_RdByte>
 800c356:	4603      	mov	r3, r0
 800c358:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c35a:	e001      	b.n	800c360 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c35c:	23fc      	movs	r3, #252	; 0xfc
 800c35e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d107      	bne.n	800c378 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c368:	7dbb      	ldrb	r3, [r7, #22]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fff4 	bl	800b358 <VL53L0X_decode_vcsel_period>
 800c370:	4603      	mov	r3, r0
 800c372:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	701a      	strb	r2, [r3, #0]

	return Status;
 800c378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3718      	adds	r7, #24
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b092      	sub	sp, #72	; 0x48
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c38e:	2300      	movs	r3, #0
 800c390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c394:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c398:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c39a:	f240 7376 	movw	r3, #1910	; 0x776
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800c3a0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c3a4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c3a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800c3ac:	f240 234e 	movw	r3, #590	; 0x24e
 800c3b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800c3b2:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c3b8:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c3be:	f240 2326 	movw	r3, #550	; 0x226
 800c3c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800c3c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c3cc:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d205      	bcs.n	800c3e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c3da:	23fc      	movs	r3, #252	; 0xfc
 800c3dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800c3e0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3e4:	e0aa      	b.n	800c53c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c3e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c3f2:	f107 0314 	add.w	r3, r7, #20
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7fd f977 	bl	80096ec <VL53L0X_GetSequenceStepEnables>
 800c3fe:	4603      	mov	r3, r0
 800c400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800c404:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d15b      	bne.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800c40c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d105      	bne.n	800c41e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800c412:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800c418:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d052      	beq.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c41e:	f107 0310 	add.w	r3, r7, #16
 800c422:	461a      	mov	r2, r3
 800c424:	2102      	movs	r1, #2
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f7ff fda2 	bl	800bf70 <get_sequence_step_timeout>
 800c42c:	4603      	mov	r3, r0
 800c42e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800c432:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800c43a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c43e:	e07d      	b.n	800c53c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c440:	7d3b      	ldrb	r3, [r7, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00f      	beq.n	800c466 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c446:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44a:	4413      	add	r3, r2
 800c44c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800c44e:	69fa      	ldr	r2, [r7, #28]
 800c450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c452:	429a      	cmp	r2, r3
 800c454:	d204      	bcs.n	800c460 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	643b      	str	r3, [r7, #64]	; 0x40
 800c45e:	e002      	b.n	800c466 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c460:	23fc      	movs	r3, #252	; 0xfc
 800c462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800c466:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800c46e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c472:	e063      	b.n	800c53c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800c474:	7dbb      	ldrb	r3, [r7, #22]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d011      	beq.n	800c49e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	4413      	add	r3, r2
 800c480:	005b      	lsls	r3, r3, #1
 800c482:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c488:	429a      	cmp	r2, r3
 800c48a:	d204      	bcs.n	800c496 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c48c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	643b      	str	r3, [r7, #64]	; 0x40
 800c494:	e016      	b.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c496:	23fc      	movs	r3, #252	; 0xfc
 800c498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c49c:	e012      	b.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800c49e:	7d7b      	ldrb	r3, [r7, #21]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00f      	beq.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4a8:	4413      	add	r3, r2
 800c4aa:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c4ac:	69fa      	ldr	r2, [r7, #28]
 800c4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d204      	bcs.n	800c4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c4b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c4bc:	e002      	b.n	800c4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4be:	23fc      	movs	r3, #252	; 0xfc
 800c4c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c4c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c4cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c4d0:	e034      	b.n	800c53c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800c4d2:	7dfb      	ldrb	r3, [r7, #23]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d019      	beq.n	800c50c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	461a      	mov	r2, r3
 800c4de:	2103      	movs	r1, #3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff fd45 	bl	800bf70 <get_sequence_step_timeout>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4f0:	4413      	add	r3, r2
 800c4f2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c4f4:	69fa      	ldr	r2, [r7, #28]
 800c4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d204      	bcs.n	800c506 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800c4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	643b      	str	r3, [r7, #64]	; 0x40
 800c504:	e002      	b.n	800c50c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c506:	23fc      	movs	r3, #252	; 0xfc
 800c508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800c50c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c510:	2b00      	cmp	r3, #0
 800c512:	d111      	bne.n	800c538 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800c514:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00e      	beq.n	800c538 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800c51a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800c522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c524:	2104      	movs	r1, #4
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff fe03 	bl	800c132 <set_sequence_step_timeout>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c538:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3748      	adds	r7, #72	; 0x48
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b090      	sub	sp, #64	; 0x40
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c54e:	2300      	movs	r3, #0
 800c550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c554:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c558:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c55a:	f240 7376 	movw	r3, #1910	; 0x776
 800c55e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800c560:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c564:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c566:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c56a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800c56c:	f240 234e 	movw	r3, #590	; 0x24e
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800c572:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c578:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c57c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c57e:	f240 2326 	movw	r3, #550	; 0x226
 800c582:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c584:	2300      	movs	r3, #0
 800c586:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800c588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	441a      	add	r2, r3
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c592:	f107 0318 	add.w	r3, r7, #24
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7fd f8a7 	bl	80096ec <VL53L0X_GetSequenceStepEnables>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800c5a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c5ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5b0:	e075      	b.n	800c69e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800c5b2:	7e3b      	ldrb	r3, [r7, #24]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c5b8:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d102      	bne.n	800c5c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800c5be:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d030      	beq.n	800c626 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800c5c4:	f107 0310 	add.w	r3, r7, #16
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	2102      	movs	r1, #2
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff fccf 	bl	800bf70 <get_sequence_step_timeout>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800c5d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d122      	bne.n	800c626 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800c5e0:	7e3b      	ldrb	r3, [r7, #24]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c5ea:	6939      	ldr	r1, [r7, #16]
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ee:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5f0:	441a      	add	r2, r3
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800c5f6:	7ebb      	ldrb	r3, [r7, #26]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d009      	beq.n	800c610 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800c600:	6939      	ldr	r1, [r7, #16]
 800c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c604:	440b      	add	r3, r1
 800c606:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c608:	441a      	add	r2, r3
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	e00a      	b.n	800c626 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800c610:	7e7b      	ldrb	r3, [r7, #25]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c61a:	6939      	ldr	r1, [r7, #16]
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c620:	441a      	add	r2, r3
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d114      	bne.n	800c658 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800c62e:	7efb      	ldrb	r3, [r7, #27]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d011      	beq.n	800c658 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800c634:	f107 030c 	add.w	r3, r7, #12
 800c638:	461a      	mov	r2, r3
 800c63a:	2103      	movs	r1, #3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7ff fc97 	bl	800bf70 <get_sequence_step_timeout>
 800c642:	4603      	mov	r3, r0
 800c644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c650:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c652:	441a      	add	r2, r3
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c658:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d114      	bne.n	800c68a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800c660:	7f3b      	ldrb	r3, [r7, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d011      	beq.n	800c68a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800c666:	f107 0314 	add.w	r3, r7, #20
 800c66a:	461a      	mov	r2, r3
 800c66c:	2104      	movs	r1, #4
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff fc7e 	bl	800bf70 <get_sequence_step_timeout>
 800c674:	4603      	mov	r3, r0
 800c676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800c67e:	6979      	ldr	r1, [r7, #20]
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c684:	441a      	add	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c68a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d103      	bne.n	800c69a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c69a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3740      	adds	r7, #64	; 0x40
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c6ba:	e0c6      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	74fb      	strb	r3, [r7, #19]
		Index++;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800c6cc:	7cfb      	ldrb	r3, [r7, #19]
 800c6ce:	2bff      	cmp	r3, #255	; 0xff
 800c6d0:	f040 808d 	bne.w	800c7ee <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	4413      	add	r3, r2
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	747b      	strb	r3, [r7, #17]
			Index++;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800c6e4:	7c7b      	ldrb	r3, [r7, #17]
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d87e      	bhi.n	800c7e8 <VL53L0X_load_tuning_settings+0x140>
 800c6ea:	a201      	add	r2, pc, #4	; (adr r2, 800c6f0 <VL53L0X_load_tuning_settings+0x48>)
 800c6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f0:	0800c701 	.word	0x0800c701
 800c6f4:	0800c73b 	.word	0x0800c73b
 800c6f8:	0800c775 	.word	0x0800c775
 800c6fc:	0800c7af 	.word	0x0800c7af
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	4413      	add	r3, r2
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	743b      	strb	r3, [r7, #16]
				Index++;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	3301      	adds	r3, #1
 800c70e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	4413      	add	r3, r2
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	3301      	adds	r3, #1
 800c71e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c720:	7c3b      	ldrb	r3, [r7, #16]
 800c722:	b29b      	uxth	r3, r3
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	b29a      	uxth	r2, r3
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	4413      	add	r3, r2
 800c72e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	89ba      	ldrh	r2, [r7, #12]
 800c734:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800c738:	e087      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	4413      	add	r3, r2
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	743b      	strb	r3, [r7, #16]
				Index++;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	3301      	adds	r3, #1
 800c748:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	683a      	ldr	r2, [r7, #0]
 800c74e:	4413      	add	r3, r2
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	3301      	adds	r3, #1
 800c758:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c75a:	7c3b      	ldrb	r3, [r7, #16]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	021b      	lsls	r3, r3, #8
 800c760:	b29a      	uxth	r2, r3
 800c762:	7bfb      	ldrb	r3, [r7, #15]
 800c764:	b29b      	uxth	r3, r3
 800c766:	4413      	add	r3, r2
 800c768:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	89ba      	ldrh	r2, [r7, #12]
 800c76e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800c772:	e06a      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	4413      	add	r3, r2
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	743b      	strb	r3, [r7, #16]
				Index++;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	3301      	adds	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	4413      	add	r3, r2
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	3301      	adds	r3, #1
 800c792:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c794:	7c3b      	ldrb	r3, [r7, #16]
 800c796:	b29b      	uxth	r3, r3
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	4413      	add	r3, r2
 800c7a2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	89ba      	ldrh	r2, [r7, #12]
 800c7a8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800c7ac:	e04d      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	743b      	strb	r3, [r7, #16]
				Index++;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c7ce:	7c3b      	ldrb	r3, [r7, #16]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	4413      	add	r3, r2
 800c7dc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	89ba      	ldrh	r2, [r7, #12]
 800c7e2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800c7e6:	e030      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c7e8:	23fc      	movs	r3, #252	; 0xfc
 800c7ea:	77fb      	strb	r3, [r7, #31]
 800c7ec:	e02d      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c7ee:	7cfb      	ldrb	r3, [r7, #19]
 800c7f0:	2b04      	cmp	r3, #4
 800c7f2:	d828      	bhi.n	800c846 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	3301      	adds	r3, #1
 800c802:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
 800c808:	e00f      	b.n	800c82a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	4413      	add	r3, r2
 800c810:	7819      	ldrb	r1, [r3, #0]
 800c812:	f107 0208 	add.w	r2, r7, #8
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	4413      	add	r3, r2
 800c81a:	460a      	mov	r2, r1
 800c81c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	3301      	adds	r3, #1
 800c822:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	3301      	adds	r3, #1
 800c828:	61bb      	str	r3, [r7, #24]
 800c82a:	7cfb      	ldrb	r3, [r7, #19]
 800c82c:	69ba      	ldr	r2, [r7, #24]
 800c82e:	429a      	cmp	r2, r3
 800c830:	dbeb      	blt.n	800c80a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c832:	7cfb      	ldrb	r3, [r7, #19]
 800c834:	f107 0208 	add.w	r2, r7, #8
 800c838:	7cb9      	ldrb	r1, [r7, #18]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fdee 	bl	800d41c <VL53L0X_WriteMulti>
 800c840:	4603      	mov	r3, r0
 800c842:	77fb      	strb	r3, [r7, #31]
 800c844:	e001      	b.n	800c84a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c846:	23fc      	movs	r3, #252	; 0xfc
 800c848:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	683a      	ldr	r2, [r7, #0]
 800c84e:	4413      	add	r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d004      	beq.n	800c860 <VL53L0X_load_tuning_settings+0x1b8>
 800c856:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f43f af2e 	beq.w	800c6bc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c860:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3720      	adds	r7, #32
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c878:	2300      	movs	r3, #0
 800c87a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c882:	f107 0313 	add.w	r3, r7, #19
 800c886:	4619      	mov	r1, r3
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7fc ffbb 	bl	8009804 <VL53L0X_GetXTalkCompensationEnable>
 800c88e:	4603      	mov	r3, r0
 800c890:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c892:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d111      	bne.n	800c8be <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c89a:	7cfb      	ldrb	r3, [r7, #19]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00e      	beq.n	800c8be <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	8a9b      	ldrh	r3, [r3, #20]
 800c8aa:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	fb02 f303 	mul.w	r3, r2, r3
 800c8b2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	3380      	adds	r3, #128	; 0x80
 800c8b8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c8be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3720      	adds	r7, #32
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c8e2:	f107 0310 	add.w	r3, r7, #16
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	68b9      	ldr	r1, [r7, #8]
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff ffbe 	bl	800c86c <VL53L0X_get_total_xtalk_rate>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c8f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d105      	bne.n	800c908 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	441a      	add	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	601a      	str	r2, [r3, #0]

	return Status;
 800c908:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b09a      	sub	sp, #104	; 0x68
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c922:	2312      	movs	r3, #18
 800c924:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c92a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c92c:	2342      	movs	r3, #66	; 0x42
 800c92e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c930:	2306      	movs	r3, #6
 800c932:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c934:	2307      	movs	r3, #7
 800c936:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c938:	2300      	movs	r3, #0
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800c94c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800c94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c952:	fb02 f303 	mul.w	r3, r2, r3
 800c956:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95a:	3380      	adds	r3, #128	; 0x80
 800c95c:	0a1b      	lsrs	r3, r3, #8
 800c95e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c964:	fb02 f303 	mul.w	r3, r2, r3
 800c968:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01a      	beq.n	800c9aa <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	029b      	lsls	r3, r3, #10
 800c978:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c980:	4413      	add	r3, r2
 800c982:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c984:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	fbb2 f3f3 	udiv	r3, r2, r3
 800c98c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c98e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c990:	4613      	mov	r3, r2
 800c992:	005b      	lsls	r3, r3, #1
 800c994:	4413      	add	r3, r2
 800c996:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c99a:	fb03 f303 	mul.w	r3, r3, r3
 800c99e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c9a6:	0c1b      	lsrs	r3, r3, #16
 800c9a8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c9ae:	fb02 f303 	mul.w	r3, r2, r3
 800c9b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c9ba:	0c1b      	lsrs	r3, r3, #16
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	fb03 f303 	mul.w	r3, r3, r3
 800c9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c9c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c9cc:	0c1b      	lsrs	r3, r3, #16
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9d2:	085a      	lsrs	r2, r3, #1
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	441a      	add	r2, r3
 800c9d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9de:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9e4:	fb02 f303 	mul.w	r3, r2, r3
 800c9e8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f0:	d302      	bcc.n	800c9f8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c9f2:	4b54      	ldr	r3, [pc, #336]	; (800cb44 <VL53L0X_calc_dmax+0x230>)
 800c9f4:	663b      	str	r3, [r7, #96]	; 0x60
 800c9f6:	e015      	b.n	800ca24 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9fa:	085a      	lsrs	r2, r3, #1
 800c9fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9fe:	441a      	add	r2, r3
 800ca00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca06:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ca08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca0c:	fb02 f303 	mul.w	r3, r2, r3
 800ca10:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ca12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ca18:	0c1b      	lsrs	r3, r3, #16
 800ca1a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ca1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca1e:	fb03 f303 	mul.w	r3, r3, r3
 800ca22:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ca24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca26:	039b      	lsls	r3, r3, #14
 800ca28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca2c:	4a46      	ldr	r2, [pc, #280]	; (800cb48 <VL53L0X_calc_dmax+0x234>)
 800ca2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca32:	099b      	lsrs	r3, r3, #6
 800ca34:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	fb03 f303 	mul.w	r3, r3, r3
 800ca3c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ca3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca40:	fb03 f303 	mul.w	r3, r3, r3
 800ca44:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	3308      	adds	r3, #8
 800ca4a:	091b      	lsrs	r3, r3, #4
 800ca4c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ca4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ca56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca58:	4613      	mov	r3, r2
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	011b      	lsls	r3, r3, #4
 800ca60:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ca68:	0b9b      	lsrs	r3, r3, #14
 800ca6a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ca6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca70:	4413      	add	r3, r2
 800ca72:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ca74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca76:	085b      	lsrs	r3, r3, #1
 800ca78:	69ba      	ldr	r2, [r7, #24]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca86:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	039b      	lsls	r3, r3, #14
 800ca8c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	085b      	lsrs	r3, r3, #1
 800ca92:	69ba      	ldr	r2, [r7, #24]
 800ca94:	4413      	add	r3, r2
 800ca96:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ca98:	69ba      	ldr	r2, [r7, #24]
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800caa6:	fb02 f303 	mul.w	r3, r2, r3
 800caaa:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cab2:	4a25      	ldr	r2, [pc, #148]	; (800cb48 <VL53L0X_calc_dmax+0x234>)
 800cab4:	fba2 2303 	umull	r2, r3, r2, r3
 800cab8:	099b      	lsrs	r3, r3, #6
 800caba:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cac8:	4a1f      	ldr	r2, [pc, #124]	; (800cb48 <VL53L0X_calc_dmax+0x234>)
 800caca:	fba2 2303 	umull	r2, r3, r2, r3
 800cace:	099b      	lsrs	r3, r3, #6
 800cad0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800cad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad4:	3380      	adds	r3, #128	; 0x80
 800cad6:	0a1b      	lsrs	r3, r3, #8
 800cad8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d008      	beq.n	800caf2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	085a      	lsrs	r2, r3, #1
 800cae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae6:	441a      	add	r2, r3
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	fbb2 f3f3 	udiv	r3, r2, r3
 800caee:	65bb      	str	r3, [r7, #88]	; 0x58
 800caf0:	e001      	b.n	800caf6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800caf6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800caf8:	f7fe fc41 	bl	800b37e <VL53L0X_isqrt>
 800cafc:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d008      	beq.n	800cb16 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	085a      	lsrs	r2, r3, #1
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	441a      	add	r2, r3
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb14:	e001      	b.n	800cb1a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800cb1a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cb1c:	f7fe fc2f 	bl	800b37e <VL53L0X_isqrt>
 800cb20:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800cb22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d902      	bls.n	800cb36 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800cb30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb34:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800cb36:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3768      	adds	r7, #104	; 0x68
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	fff00000 	.word	0xfff00000
 800cb48:	10624dd3 	.word	0x10624dd3

0800cb4c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b0b4      	sub	sp, #208	; 0xd0
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800cb5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cb5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800cb62:	f44f 7316 	mov.w	r3, #600	; 0x258
 800cb66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800cb6a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800cb6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800cb72:	f241 235c 	movw	r3, #4700	; 0x125c
 800cb76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800cb7a:	4b9e      	ldr	r3, [pc, #632]	; (800cdf4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800cb7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800cb80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800cb84:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800cb86:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800cb8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb92:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800cb94:	4b98      	ldr	r3, [pc, #608]	; (800cdf8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800cb96:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800cb98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb9c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800cb9e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800cba2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800cba4:	f240 6377 	movw	r3, #1655	; 0x677
 800cba8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbbe:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800cbcc:	f107 0310 	add.w	r3, r7, #16
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f7ff fe78 	bl	800c8ca <VL53L0X_get_total_signal_rate>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800cbe0:	f107 0314 	add.w	r3, r7, #20
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	68b9      	ldr	r1, [r7, #8]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f7ff fe3f 	bl	800c86c <VL53L0X_get_total_xtalk_rate>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbfa:	fb02 f303 	mul.w	r3, r2, r3
 800cbfe:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800cc00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cc06:	0c1b      	lsrs	r3, r3, #16
 800cc08:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc10:	fb02 f303 	mul.w	r3, r2, r3
 800cc14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800cc18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cc1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d902      	bls.n	800cc28 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800cc22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800cc28:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d168      	bne.n	800cd02 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cc36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800cc40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cc44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc48:	461a      	mov	r2, r3
 800cc4a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f7ff f93a 	bl	800bec8 <VL53L0X_calc_timeout_mclks>
 800cc54:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800cc66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cc6a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800cc74:	68f8      	ldr	r0, [r7, #12]
 800cc76:	f7ff f927 	bl	800bec8 <VL53L0X_calc_timeout_mclks>
 800cc7a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800cc82:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc86:	2b08      	cmp	r3, #8
 800cc88:	d102      	bne.n	800cc90 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800cc90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc94:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800cc96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cc9a:	fb02 f303 	mul.w	r3, r2, r3
 800cc9e:	02db      	lsls	r3, r3, #11
 800cca0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cca8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ccac:	4a53      	ldr	r2, [pc, #332]	; (800cdfc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ccae:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb2:	099b      	lsrs	r3, r3, #6
 800ccb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800ccb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccbe:	fb02 f303 	mul.w	r3, r2, r3
 800ccc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ccc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ccce:	4a4b      	ldr	r2, [pc, #300]	; (800cdfc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ccd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd4:	099b      	lsrs	r3, r3, #6
 800ccd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	3380      	adds	r3, #128	; 0x80
 800ccde:	0a1b      	lsrs	r3, r3, #8
 800cce0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cce8:	fb02 f303 	mul.w	r3, r2, r3
 800ccec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ccf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ccf4:	3380      	adds	r3, #128	; 0x80
 800ccf6:	0a1b      	lsrs	r3, r3, #8
 800ccf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	021b      	lsls	r3, r3, #8
 800cd00:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cd02:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800cd0a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cd0e:	e15e      	b.n	800cfce <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800cd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10c      	bne.n	800cd30 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd1c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd24:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	e14c      	b.n	800cfca <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800cd30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d102      	bne.n	800cd3e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800cd3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd42:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800cd44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd46:	041a      	lsls	r2, r3, #16
 800cd48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800cd52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d902      	bls.n	800cd62 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800cd5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800cd62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cd66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cd6a:	fb02 f303 	mul.w	r3, r2, r3
 800cd6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800cd72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800cd76:	4613      	mov	r3, r2
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fe fafd 	bl	800b37e <VL53L0X_isqrt>
 800cd84:	4603      	mov	r3, r0
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	891b      	ldrh	r3, [r3, #8]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd92:	fb02 f303 	mul.w	r3, r2, r3
 800cd96:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cd98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd9a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800cd9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cda0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cda2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800cda4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cda8:	4a14      	ldr	r2, [pc, #80]	; (800cdfc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800cdae:	099b      	lsrs	r3, r3, #6
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800cdb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdb4:	041b      	lsls	r3, r3, #16
 800cdb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cdba:	4a10      	ldr	r2, [pc, #64]	; (800cdfc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cdbc:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc0:	099b      	lsrs	r3, r3, #6
 800cdc2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc6:	021b      	lsls	r3, r3, #8
 800cdc8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800cdca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdce:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	bfb8      	it	lt
 800cdd6:	425b      	neglt	r3, r3
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800cdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cddc:	021b      	lsls	r3, r3, #8
 800cdde:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	7e1b      	ldrb	r3, [r3, #24]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00b      	beq.n	800ce00 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800cde8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cdec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdf0:	e033      	b.n	800ce5a <VL53L0X_calc_sigma_estimate+0x30e>
 800cdf2:	bf00      	nop
 800cdf4:	028f87ae 	.word	0x028f87ae
 800cdf8:	0006999a 	.word	0x0006999a
 800cdfc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ce00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ce14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce18:	fb02 f303 	mul.w	r3, r2, r3
 800ce1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ce20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ce24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce26:	4413      	add	r3, r2
 800ce28:	0c1b      	lsrs	r3, r3, #16
 800ce2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ce2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce32:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ce36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ce3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce3e:	085b      	lsrs	r3, r3, #1
 800ce40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ce44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce48:	fb03 f303 	mul.w	r3, r3, r3
 800ce4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ce50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce54:	0b9b      	lsrs	r3, r3, #14
 800ce56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800ce5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce60:	fb02 f303 	mul.w	r3, r2, r3
 800ce64:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ce6c:	0c1b      	lsrs	r3, r3, #16
 800ce6e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	fb03 f303 	mul.w	r3, r3, r3
 800ce76:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ce78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ce84:	0c1b      	lsrs	r3, r3, #16
 800ce86:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	fb03 f303 	mul.w	r3, r3, r3
 800ce8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ce90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	4413      	add	r3, r2
 800ce96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ce98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce9a:	f7fe fa70 	bl	800b37e <VL53L0X_isqrt>
 800ce9e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	041b      	lsls	r3, r3, #16
 800cea4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	3332      	adds	r3, #50	; 0x32
 800ceaa:	4a4b      	ldr	r2, [pc, #300]	; (800cfd8 <VL53L0X_calc_sigma_estimate+0x48c>)
 800ceac:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb0:	095a      	lsrs	r2, r3, #5
 800ceb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800cebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cec0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800cec4:	fb02 f303 	mul.w	r3, r2, r3
 800cec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800cecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ced0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ced4:	3308      	adds	r3, #8
 800ced6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800ceda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cede:	4a3f      	ldr	r2, [pc, #252]	; (800cfdc <VL53L0X_calc_sigma_estimate+0x490>)
 800cee0:	fba2 2303 	umull	r2, r3, r2, r3
 800cee4:	0b5b      	lsrs	r3, r3, #13
 800cee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ceea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ceee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d902      	bls.n	800cefa <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800cef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800cefa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cefe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cf02:	4413      	add	r3, r2
 800cf04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800cf08:	4a35      	ldr	r2, [pc, #212]	; (800cfe0 <VL53L0X_calc_sigma_estimate+0x494>)
 800cf0a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf0e:	099b      	lsrs	r3, r3, #6
 800cf10:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800cf16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf1a:	441a      	add	r2, r3
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fa2b 	bl	800b37e <VL53L0X_isqrt>
 800cf28:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	021b      	lsls	r3, r3, #8
 800cf2e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cf36:	4a2a      	ldr	r2, [pc, #168]	; (800cfe0 <VL53L0X_calc_sigma_estimate+0x494>)
 800cf38:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3c:	099b      	lsrs	r3, r3, #6
 800cf3e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800cf40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf44:	fb03 f303 	mul.w	r3, r3, r3
 800cf48:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	fb03 f303 	mul.w	r3, r3, r3
 800cf50:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800cf52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	4413      	add	r3, r2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fe fa10 	bl	800b37e <VL53L0X_isqrt>
 800cf5e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf66:	fb02 f303 	mul.w	r3, r2, r3
 800cf6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800cf6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d009      	beq.n	800cf88 <VL53L0X_calc_sigma_estimate+0x43c>
 800cf74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d005      	beq.n	800cf88 <VL53L0X_calc_sigma_estimate+0x43c>
 800cf7c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cf80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d903      	bls.n	800cf90 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800cf88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cf96:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800cfa2:	6939      	ldr	r1, [r7, #16]
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	9303      	str	r3, [sp, #12]
 800cfa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cfac:	9302      	str	r3, [sp, #8]
 800cfae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cfb2:	9301      	str	r3, [sp, #4]
 800cfb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cfbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff fca8 	bl	800c914 <VL53L0X_calc_dmax>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cfca:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	37c0      	adds	r7, #192	; 0xc0
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	51eb851f 	.word	0x51eb851f
 800cfdc:	d1b71759 	.word	0xd1b71759
 800cfe0:	10624dd3 	.word	0x10624dd3

0800cfe4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b090      	sub	sp, #64	; 0x40
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	607a      	str	r2, [r7, #4]
 800cfee:	461a      	mov	r2, r3
 800cff0:	460b      	mov	r3, r1
 800cff2:	72fb      	strb	r3, [r7, #11]
 800cff4:	4613      	mov	r3, r2
 800cff6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cff8:	2300      	movs	r3, #0
 800cffa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d010:	2300      	movs	r3, #0
 800d012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d036:	7afb      	ldrb	r3, [r7, #11]
 800d038:	10db      	asrs	r3, r3, #3
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	f003 030f 	and.w	r3, r3, #15
 800d040:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d044:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d017      	beq.n	800d07c <VL53L0X_get_pal_range_status+0x98>
 800d04c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d050:	2b05      	cmp	r3, #5
 800d052:	d013      	beq.n	800d07c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d054:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d058:	2b07      	cmp	r3, #7
 800d05a:	d00f      	beq.n	800d07c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d05c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d060:	2b0c      	cmp	r3, #12
 800d062:	d00b      	beq.n	800d07c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d064:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d068:	2b0d      	cmp	r3, #13
 800d06a:	d007      	beq.n	800d07c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d06c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d070:	2b0e      	cmp	r3, #14
 800d072:	d003      	beq.n	800d07c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d074:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d078:	2b0f      	cmp	r3, #15
 800d07a:	d103      	bne.n	800d084 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d082:	e002      	b.n	800d08a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d08a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d109      	bne.n	800d0a6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d092:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d096:	461a      	mov	r2, r3
 800d098:	2100      	movs	r1, #0
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f7fc fc86 	bl	80099ac <VL53L0X_GetLimitCheckEnable>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d0a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02e      	beq.n	800d10c <VL53L0X_get_pal_range_status+0x128>
 800d0ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d12a      	bne.n	800d10c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d0b6:	f107 0310 	add.w	r3, r7, #16
 800d0ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d0be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7ff fd43 	bl	800cb4c <VL53L0X_calc_sigma_estimate>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d0cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d103      	bne.n	800d0dc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0da:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d0dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d113      	bne.n	800d10c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d0e4:	f107 0320 	add.w	r3, r7, #32
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7fc fce3 	bl	8009ab8 <VL53L0X_GetLimitCheckValue>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d100:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d102:	429a      	cmp	r2, r3
 800d104:	d902      	bls.n	800d10c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d106:	2301      	movs	r3, #1
 800d108:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d10c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d110:	2b00      	cmp	r3, #0
 800d112:	d109      	bne.n	800d128 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d114:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d118:	461a      	mov	r2, r3
 800d11a:	2102      	movs	r1, #2
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f7fc fc45 	bl	80099ac <VL53L0X_GetLimitCheckEnable>
 800d122:	4603      	mov	r3, r0
 800d124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d128:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d044      	beq.n	800d1ba <VL53L0X_get_pal_range_status+0x1d6>
 800d130:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d134:	2b00      	cmp	r3, #0
 800d136:	d140      	bne.n	800d1ba <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d138:	f107 031c 	add.w	r3, r7, #28
 800d13c:	461a      	mov	r2, r3
 800d13e:	2102      	movs	r1, #2
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7fc fcb9 	bl	8009ab8 <VL53L0X_GetLimitCheckValue>
 800d146:	4603      	mov	r3, r0
 800d148:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d14c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d150:	2b00      	cmp	r3, #0
 800d152:	d107      	bne.n	800d164 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d154:	2201      	movs	r2, #1
 800d156:	21ff      	movs	r1, #255	; 0xff
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f000 f9bb 	bl	800d4d4 <VL53L0X_WrByte>
 800d15e:	4603      	mov	r3, r0
 800d160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d164:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d109      	bne.n	800d180 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d16c:	f107 0316 	add.w	r3, r7, #22
 800d170:	461a      	mov	r2, r3
 800d172:	21b6      	movs	r1, #182	; 0xb6
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 fa59 	bl	800d62c <VL53L0X_RdWord>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800d180:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d184:	2b00      	cmp	r3, #0
 800d186:	d107      	bne.n	800d198 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d188:	2200      	movs	r2, #0
 800d18a:	21ff      	movs	r1, #255	; 0xff
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 f9a1 	bl	800d4d4 <VL53L0X_WrByte>
 800d192:	4603      	mov	r3, r0
 800d194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d198:	8afb      	ldrh	r3, [r7, #22]
 800d19a:	025b      	lsls	r3, r3, #9
 800d19c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d006      	beq.n	800d1ba <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d1ac:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d902      	bls.n	800d1ba <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d1ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d109      	bne.n	800d1d6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d1c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	2103      	movs	r1, #3
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7fc fbee 	bl	80099ac <VL53L0X_GetLimitCheckEnable>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d1d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d023      	beq.n	800d226 <VL53L0X_get_pal_range_status+0x242>
 800d1de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d11f      	bne.n	800d226 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d1e6:	893b      	ldrh	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d102      	bne.n	800d1f2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d1f0:	e005      	b.n	800d1fe <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	021a      	lsls	r2, r3, #8
 800d1f6:	893b      	ldrh	r3, [r7, #8]
 800d1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d1fe:	f107 0318 	add.w	r3, r7, #24
 800d202:	461a      	mov	r2, r3
 800d204:	2103      	movs	r1, #3
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7fc fc56 	bl	8009ab8 <VL53L0X_GetLimitCheckValue>
 800d20c:	4603      	mov	r3, r0
 800d20e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d006      	beq.n	800d226 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d218:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d202      	bcs.n	800d226 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d220:	2301      	movs	r3, #1
 800d222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d226:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d14a      	bne.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d22e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d232:	2b01      	cmp	r3, #1
 800d234:	d103      	bne.n	800d23e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d238:	22ff      	movs	r2, #255	; 0xff
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	e042      	b.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d23e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d242:	2b01      	cmp	r3, #1
 800d244:	d007      	beq.n	800d256 <VL53L0X_get_pal_range_status+0x272>
 800d246:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	d003      	beq.n	800d256 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d24e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d252:	2b03      	cmp	r3, #3
 800d254:	d103      	bne.n	800d25e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d258:	2205      	movs	r2, #5
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	e032      	b.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d25e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d262:	2b06      	cmp	r3, #6
 800d264:	d003      	beq.n	800d26e <VL53L0X_get_pal_range_status+0x28a>
 800d266:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d26a:	2b09      	cmp	r3, #9
 800d26c:	d103      	bne.n	800d276 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d26e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d270:	2204      	movs	r2, #4
 800d272:	701a      	strb	r2, [r3, #0]
 800d274:	e026      	b.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d276:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d27a:	2b08      	cmp	r3, #8
 800d27c:	d007      	beq.n	800d28e <VL53L0X_get_pal_range_status+0x2aa>
 800d27e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d282:	2b0a      	cmp	r3, #10
 800d284:	d003      	beq.n	800d28e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d286:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d103      	bne.n	800d296 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d290:	2203      	movs	r2, #3
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e016      	b.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d296:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	d003      	beq.n	800d2a6 <VL53L0X_get_pal_range_status+0x2c2>
 800d29e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d103      	bne.n	800d2ae <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	701a      	strb	r2, [r3, #0]
 800d2ac:	e00a      	b.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d2ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d103      	bne.n	800d2be <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e002      	b.n	800d2c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d2d2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	2101      	movs	r1, #1
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7fc fb66 	bl	80099ac <VL53L0X_GetLimitCheckEnable>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d2e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d14f      	bne.n	800d38e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d2ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <VL53L0X_get_pal_range_status+0x31a>
 800d2f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d103      	bne.n	800d306 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d2fe:	2301      	movs	r3, #1
 800d300:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d304:	e002      	b.n	800d30c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d312:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d316:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d003      	beq.n	800d326 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d31e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d322:	2b00      	cmp	r3, #0
 800d324:	d103      	bne.n	800d32e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d326:	2301      	movs	r3, #1
 800d328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d32c:	e002      	b.n	800d334 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d33a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d33e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <VL53L0X_get_pal_range_status+0x36a>
 800d346:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d103      	bne.n	800d356 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d34e:	2301      	movs	r3, #1
 800d350:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d354:	e002      	b.n	800d35c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d366:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d003      	beq.n	800d376 <VL53L0X_get_pal_range_status+0x392>
 800d36e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d372:	2b01      	cmp	r3, #1
 800d374:	d103      	bne.n	800d37e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d376:	2301      	movs	r3, #1
 800d378:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d37c:	e002      	b.n	800d384 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d38a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d38e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d392:	4618      	mov	r0, r3
 800d394:	3740      	adds	r7, #64	; 0x40
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b088      	sub	sp, #32
 800d39e:	af02      	add	r7, sp, #8
 800d3a0:	60f8      	str	r0, [r7, #12]
 800d3a2:	60b9      	str	r1, [r7, #8]
 800d3a4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	330a      	adds	r3, #10
 800d3aa:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800d3b8:	b299      	uxth	r1, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	f7f7 fd27 	bl	8004e18 <HAL_I2C_Master_Transmit>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d3ce:	693b      	ldr	r3, [r7, #16]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b088      	sub	sp, #32
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	330a      	adds	r3, #10
 800d3e8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	b299      	uxth	r1, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	b29a      	uxth	r2, r3
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4613      	mov	r3, r2
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	f7f7 fe03 	bl	8005014 <HAL_I2C_Master_Receive>
 800d40e:	4603      	mov	r3, r0
 800d410:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d412:	693b      	ldr	r3, [r7, #16]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	607a      	str	r2, [r7, #4]
 800d426:	603b      	str	r3, [r7, #0]
 800d428:	460b      	mov	r3, r1
 800d42a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	2b3f      	cmp	r3, #63	; 0x3f
 800d434:	d902      	bls.n	800d43c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800d436:	f06f 0303 	mvn.w	r3, #3
 800d43a:	e016      	b.n	800d46a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800d43c:	4a0d      	ldr	r2, [pc, #52]	; (800d474 <VL53L0X_WriteMulti+0x58>)
 800d43e:	7afb      	ldrb	r3, [r7, #11]
 800d440:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	480c      	ldr	r0, [pc, #48]	; (800d478 <VL53L0X_WriteMulti+0x5c>)
 800d448:	f002 fc13 	bl	800fc72 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	461a      	mov	r2, r3
 800d452:	4908      	ldr	r1, [pc, #32]	; (800d474 <VL53L0X_WriteMulti+0x58>)
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff ffa0 	bl	800d39a <_I2CWrite>
 800d45a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d462:	23ec      	movs	r3, #236	; 0xec
 800d464:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	20004c04 	.word	0x20004c04
 800d478:	20004c05 	.word	0x20004c05

0800d47c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	460b      	mov	r3, r1
 800d48a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d48c:	2300      	movs	r3, #0
 800d48e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d490:	f107 030b 	add.w	r3, r7, #11
 800d494:	2201      	movs	r2, #1
 800d496:	4619      	mov	r1, r3
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f7ff ff7e 	bl	800d39a <_I2CWrite>
 800d49e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d4a6:	23ec      	movs	r3, #236	; 0xec
 800d4a8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d4aa:	e00c      	b.n	800d4c6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	6879      	ldr	r1, [r7, #4]
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f7ff ff91 	bl	800d3d8 <_I2CRead>
 800d4b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d4be:	23ec      	movs	r3, #236	; 0xec
 800d4c0:	75fb      	strb	r3, [r7, #23]
 800d4c2:	e000      	b.n	800d4c6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800d4c4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d4c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
	...

0800d4d4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70fb      	strb	r3, [r7, #3]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d4e8:	4a0b      	ldr	r2, [pc, #44]	; (800d518 <VL53L0X_WrByte+0x44>)
 800d4ea:	78fb      	ldrb	r3, [r7, #3]
 800d4ec:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800d4ee:	4a0a      	ldr	r2, [pc, #40]	; (800d518 <VL53L0X_WrByte+0x44>)
 800d4f0:	78bb      	ldrb	r3, [r7, #2]
 800d4f2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	4908      	ldr	r1, [pc, #32]	; (800d518 <VL53L0X_WrByte+0x44>)
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff ff4e 	bl	800d39a <_I2CWrite>
 800d4fe:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d506:	23ec      	movs	r3, #236	; 0xec
 800d508:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	20004c04 	.word	0x20004c04

0800d51c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
 800d528:	4613      	mov	r3, r2
 800d52a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d52c:	2300      	movs	r3, #0
 800d52e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d530:	4a0e      	ldr	r2, [pc, #56]	; (800d56c <VL53L0X_WrWord+0x50>)
 800d532:	78fb      	ldrb	r3, [r7, #3]
 800d534:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800d536:	883b      	ldrh	r3, [r7, #0]
 800d538:	0a1b      	lsrs	r3, r3, #8
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	4b0b      	ldr	r3, [pc, #44]	; (800d56c <VL53L0X_WrWord+0x50>)
 800d540:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800d542:	883b      	ldrh	r3, [r7, #0]
 800d544:	b2da      	uxtb	r2, r3
 800d546:	4b09      	ldr	r3, [pc, #36]	; (800d56c <VL53L0X_WrWord+0x50>)
 800d548:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d54a:	2203      	movs	r2, #3
 800d54c:	4907      	ldr	r1, [pc, #28]	; (800d56c <VL53L0X_WrWord+0x50>)
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff ff23 	bl	800d39a <_I2CWrite>
 800d554:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d001      	beq.n	800d560 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d55c:	23ec      	movs	r3, #236	; 0xec
 800d55e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800d560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20004c04 	.word	0x20004c04

0800d570 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	4608      	mov	r0, r1
 800d57a:	4611      	mov	r1, r2
 800d57c:	461a      	mov	r2, r3
 800d57e:	4603      	mov	r3, r0
 800d580:	70fb      	strb	r3, [r7, #3]
 800d582:	460b      	mov	r3, r1
 800d584:	70bb      	strb	r3, [r7, #2]
 800d586:	4613      	mov	r3, r2
 800d588:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d58a:	2300      	movs	r3, #0
 800d58c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800d58e:	f107 020e 	add.w	r2, r7, #14
 800d592:	78fb      	ldrb	r3, [r7, #3]
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f81e 	bl	800d5d8 <VL53L0X_RdByte>
 800d59c:	4603      	mov	r3, r0
 800d59e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800d5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d110      	bne.n	800d5ca <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800d5a8:	7bba      	ldrb	r2, [r7, #14]
 800d5aa:	78bb      	ldrb	r3, [r7, #2]
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	787b      	ldrb	r3, [r7, #1]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800d5b8:	7bba      	ldrb	r2, [r7, #14]
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff ff88 	bl	800d4d4 <VL53L0X_WrByte>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	73fb      	strb	r3, [r7, #15]
 800d5c8:	e000      	b.n	800d5cc <VL53L0X_UpdateByte+0x5c>
        goto done;
 800d5ca:	bf00      	nop
done:
    return Status;
 800d5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d5ea:	f107 030b 	add.w	r3, r7, #11
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff fed1 	bl	800d39a <_I2CWrite>
 800d5f8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d600:	23ec      	movs	r3, #236	; 0xec
 800d602:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d604:	e00c      	b.n	800d620 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800d606:	2201      	movs	r2, #1
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f7ff fee4 	bl	800d3d8 <_I2CRead>
 800d610:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d618:	23ec      	movs	r3, #236	; 0xec
 800d61a:	75fb      	strb	r3, [r7, #23]
 800d61c:	e000      	b.n	800d620 <VL53L0X_RdByte+0x48>
    }
done:
 800d61e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800d620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	460b      	mov	r3, r1
 800d636:	607a      	str	r2, [r7, #4]
 800d638:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d63a:	2300      	movs	r3, #0
 800d63c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d63e:	f107 030b 	add.w	r3, r7, #11
 800d642:	2201      	movs	r2, #1
 800d644:	4619      	mov	r1, r3
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff fea7 	bl	800d39a <_I2CWrite>
 800d64c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d654:	23ec      	movs	r3, #236	; 0xec
 800d656:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d658:	e017      	b.n	800d68a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d65a:	2202      	movs	r2, #2
 800d65c:	490e      	ldr	r1, [pc, #56]	; (800d698 <VL53L0X_RdWord+0x6c>)
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff feba 	bl	800d3d8 <_I2CRead>
 800d664:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d66c:	23ec      	movs	r3, #236	; 0xec
 800d66e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d670:	e00b      	b.n	800d68a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800d672:	4b09      	ldr	r3, [pc, #36]	; (800d698 <VL53L0X_RdWord+0x6c>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	b29b      	uxth	r3, r3
 800d678:	021b      	lsls	r3, r3, #8
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	4b06      	ldr	r3, [pc, #24]	; (800d698 <VL53L0X_RdWord+0x6c>)
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	b29b      	uxth	r3, r3
 800d682:	4413      	add	r3, r2
 800d684:	b29a      	uxth	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800d68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20004c04 	.word	0x20004c04

0800d69c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	607a      	str	r2, [r7, #4]
 800d6a8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800d6ae:	f107 030b 	add.w	r3, r7, #11
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f7ff fe6f 	bl	800d39a <_I2CWrite>
 800d6bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d002      	beq.n	800d6ca <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d6c4:	23ec      	movs	r3, #236	; 0xec
 800d6c6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d6c8:	e01b      	b.n	800d702 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800d6ca:	2204      	movs	r2, #4
 800d6cc:	4910      	ldr	r1, [pc, #64]	; (800d710 <VL53L0X_RdDWord+0x74>)
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7ff fe82 	bl	800d3d8 <_I2CRead>
 800d6d4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d6dc:	23ec      	movs	r3, #236	; 0xec
 800d6de:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d6e0:	e00f      	b.n	800d702 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800d6e2:	4b0b      	ldr	r3, [pc, #44]	; (800d710 <VL53L0X_RdDWord+0x74>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	061a      	lsls	r2, r3, #24
 800d6e8:	4b09      	ldr	r3, [pc, #36]	; (800d710 <VL53L0X_RdDWord+0x74>)
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	041b      	lsls	r3, r3, #16
 800d6ee:	441a      	add	r2, r3
 800d6f0:	4b07      	ldr	r3, [pc, #28]	; (800d710 <VL53L0X_RdDWord+0x74>)
 800d6f2:	789b      	ldrb	r3, [r3, #2]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	4413      	add	r3, r2
 800d6f8:	4a05      	ldr	r2, [pc, #20]	; (800d710 <VL53L0X_RdDWord+0x74>)
 800d6fa:	78d2      	ldrb	r2, [r2, #3]
 800d6fc:	441a      	add	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800d702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	20004c04 	.word	0x20004c04

0800d714 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d71c:	2300      	movs	r3, #0
 800d71e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800d720:	2002      	movs	r0, #2
 800d722:	f7f5 feb9 	bl	8003498 <HAL_Delay>
    return status;
 800d726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d732:	b480      	push	{r7}
 800d734:	b085      	sub	sp, #20
 800d736:	af00      	add	r7, sp, #0
 800d738:	4603      	mov	r3, r0
 800d73a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d73c:	2300      	movs	r3, #0
 800d73e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d744:	2b84      	cmp	r3, #132	; 0x84
 800d746:	d005      	beq.n	800d754 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d748:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	3303      	adds	r3, #3
 800d752:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d754:	68fb      	ldr	r3, [r7, #12]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d766:	f000 fefd 	bl	800e564 <vTaskStartScheduler>
  
  return osOK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d772:	b089      	sub	sp, #36	; 0x24
 800d774:	af04      	add	r7, sp, #16
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	695b      	ldr	r3, [r3, #20]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d020      	beq.n	800d7c4 <osThreadCreate+0x54>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	699b      	ldr	r3, [r3, #24]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d01c      	beq.n	800d7c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685c      	ldr	r4, [r3, #4]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681d      	ldr	r5, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691e      	ldr	r6, [r3, #16]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff ffc8 	bl	800d732 <makeFreeRtosPriority>
 800d7a2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7ac:	9202      	str	r2, [sp, #8]
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	9100      	str	r1, [sp, #0]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	4632      	mov	r2, r6
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f000 fced 	bl	800e198 <xTaskCreateStatic>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	e01c      	b.n	800d7fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685c      	ldr	r4, [r3, #4]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7d0:	b29e      	uxth	r6, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff ffaa 	bl	800d732 <makeFreeRtosPriority>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	9200      	str	r2, [sp, #0]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f000 fd2f 	bl	800e252 <xTaskCreate>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d001      	beq.n	800d7fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	e000      	b.n	800d800 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d808 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <osDelay+0x16>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	e000      	b.n	800d820 <osDelay+0x18>
 800d81e:	2301      	movs	r3, #1
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fe6b 	bl	800e4fc <vTaskDelay>
  
  return osOK;
 800d826:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f103 0208 	add.w	r2, r3, #8
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f04f 32ff 	mov.w	r2, #4294967295
 800d848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f103 0208 	add.w	r2, r3, #8
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f103 0208 	add.w	r2, r3, #8
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d87e:	bf00      	nop
 800d880:	370c      	adds	r7, #12
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d88a:	b480      	push	{r7}
 800d88c:	b085      	sub	sp, #20
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	1c5a      	adds	r2, r3, #1
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	601a      	str	r2, [r3, #0]
}
 800d8c6:	bf00      	nop
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b085      	sub	sp, #20
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d103      	bne.n	800d8f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	60fb      	str	r3, [r7, #12]
 800d8f0:	e00c      	b.n	800d90c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	e002      	b.n	800d900 <vListInsert+0x2e>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	60fb      	str	r3, [r7, #12]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d2f6      	bcs.n	800d8fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	601a      	str	r2, [r3, #0]
}
 800d938:	bf00      	nop
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	6892      	ldr	r2, [r2, #8]
 800d95a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	6852      	ldr	r2, [r2, #4]
 800d964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d103      	bne.n	800d978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	689a      	ldr	r2, [r3, #8]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	1e5a      	subs	r2, r3, #1
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3714      	adds	r7, #20
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10a      	bne.n	800d9c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d9c2:	f001 fd67 	bl	800f494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ce:	68f9      	ldr	r1, [r7, #12]
 800d9d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9d2:	fb01 f303 	mul.w	r3, r1, r3
 800d9d6:	441a      	add	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	68f9      	ldr	r1, [r7, #12]
 800d9f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9f8:	fb01 f303 	mul.w	r3, r1, r3
 800d9fc:	441a      	add	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	22ff      	movs	r2, #255	; 0xff
 800da06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	22ff      	movs	r2, #255	; 0xff
 800da0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d114      	bne.n	800da42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d01a      	beq.n	800da56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3310      	adds	r3, #16
 800da24:	4618      	mov	r0, r3
 800da26:	f000 ffef 	bl	800ea08 <xTaskRemoveFromEventList>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d012      	beq.n	800da56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800da30:	4b0c      	ldr	r3, [pc, #48]	; (800da64 <xQueueGenericReset+0xcc>)
 800da32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	e009      	b.n	800da56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	3310      	adds	r3, #16
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff fef2 	bl	800d830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3324      	adds	r3, #36	; 0x24
 800da50:	4618      	mov	r0, r3
 800da52:	f7ff feed 	bl	800d830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da56:	f001 fd4d 	bl	800f4f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da5a:	2301      	movs	r3, #1
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	e000ed04 	.word	0xe000ed04

0800da68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08a      	sub	sp, #40	; 0x28
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10a      	bne.n	800da92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	613b      	str	r3, [r7, #16]
}
 800da8e:	bf00      	nop
 800da90:	e7fe      	b.n	800da90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	fb02 f303 	mul.w	r3, r2, r3
 800da9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	3348      	adds	r3, #72	; 0x48
 800daa0:	4618      	mov	r0, r3
 800daa2:	f001 fdd9 	bl	800f658 <pvPortMalloc>
 800daa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d011      	beq.n	800dad2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	3348      	adds	r3, #72	; 0x48
 800dab6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	2200      	movs	r2, #0
 800dabc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dac0:	79fa      	ldrb	r2, [r7, #7]
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	4613      	mov	r3, r2
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	68b9      	ldr	r1, [r7, #8]
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 f805 	bl	800dadc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dad2:	69bb      	ldr	r3, [r7, #24]
	}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
 800dae8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d103      	bne.n	800daf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	69ba      	ldr	r2, [r7, #24]
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	e002      	b.n	800dafe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db0a:	2101      	movs	r1, #1
 800db0c:	69b8      	ldr	r0, [r7, #24]
 800db0e:	f7ff ff43 	bl	800d998 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db12:	bf00      	nop
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00e      	beq.n	800db46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db3a:	2300      	movs	r3, #0
 800db3c:	2200      	movs	r2, #0
 800db3e:	2100      	movs	r1, #0
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f81d 	bl	800db80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800db46:	bf00      	nop
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b086      	sub	sp, #24
 800db52:	af00      	add	r7, sp, #0
 800db54:	4603      	mov	r3, r0
 800db56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db58:	2301      	movs	r3, #1
 800db5a:	617b      	str	r3, [r7, #20]
 800db5c:	2300      	movs	r3, #0
 800db5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	461a      	mov	r2, r3
 800db64:	6939      	ldr	r1, [r7, #16]
 800db66:	6978      	ldr	r0, [r7, #20]
 800db68:	f7ff ff7e 	bl	800da68 <xQueueGenericCreate>
 800db6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f7ff ffd3 	bl	800db1a <prvInitialiseMutex>

		return xNewQueue;
 800db74:	68fb      	ldr	r3, [r7, #12]
	}
 800db76:	4618      	mov	r0, r3
 800db78:	3718      	adds	r7, #24
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08e      	sub	sp, #56	; 0x38
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800db8e:	2300      	movs	r3, #0
 800db90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10a      	bne.n	800dbb2 <xQueueGenericSend+0x32>
	__asm volatile
 800db9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba0:	f383 8811 	msr	BASEPRI, r3
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dbae:	bf00      	nop
 800dbb0:	e7fe      	b.n	800dbb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d103      	bne.n	800dbc0 <xQueueGenericSend+0x40>
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d101      	bne.n	800dbc4 <xQueueGenericSend+0x44>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e000      	b.n	800dbc6 <xQueueGenericSend+0x46>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10a      	bne.n	800dbe0 <xQueueGenericSend+0x60>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dbdc:	bf00      	nop
 800dbde:	e7fe      	b.n	800dbde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	2b02      	cmp	r3, #2
 800dbe4:	d103      	bne.n	800dbee <xQueueGenericSend+0x6e>
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d101      	bne.n	800dbf2 <xQueueGenericSend+0x72>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e000      	b.n	800dbf4 <xQueueGenericSend+0x74>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10a      	bne.n	800dc0e <xQueueGenericSend+0x8e>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	623b      	str	r3, [r7, #32]
}
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc0e:	f001 f8f3 	bl	800edf8 <xTaskGetSchedulerState>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <xQueueGenericSend+0x9e>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <xQueueGenericSend+0xa2>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e000      	b.n	800dc24 <xQueueGenericSend+0xa4>
 800dc22:	2300      	movs	r3, #0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10a      	bne.n	800dc3e <xQueueGenericSend+0xbe>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	61fb      	str	r3, [r7, #28]
}
 800dc3a:	bf00      	nop
 800dc3c:	e7fe      	b.n	800dc3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc3e:	f001 fc29 	bl	800f494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d302      	bcc.n	800dc54 <xQueueGenericSend+0xd4>
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d129      	bne.n	800dca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	68b9      	ldr	r1, [r7, #8]
 800dc58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc5a:	f000 f9b3 	bl	800dfc4 <prvCopyDataToQueue>
 800dc5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d010      	beq.n	800dc8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6a:	3324      	adds	r3, #36	; 0x24
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f000 fecb 	bl	800ea08 <xTaskRemoveFromEventList>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d013      	beq.n	800dca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dc78:	4b3f      	ldr	r3, [pc, #252]	; (800dd78 <xQueueGenericSend+0x1f8>)
 800dc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	e00a      	b.n	800dca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d007      	beq.n	800dca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dc90:	4b39      	ldr	r3, [pc, #228]	; (800dd78 <xQueueGenericSend+0x1f8>)
 800dc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dca0:	f001 fc28 	bl	800f4f4 <vPortExitCritical>
				return pdPASS;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e063      	b.n	800dd70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d103      	bne.n	800dcb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcae:	f001 fc21 	bl	800f4f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e05c      	b.n	800dd70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d106      	bne.n	800dcca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcbc:	f107 0314 	add.w	r3, r7, #20
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 ff03 	bl	800eacc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcca:	f001 fc13 	bl	800f4f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcce:	f000 fcb3 	bl	800e638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcd2:	f001 fbdf 	bl	800f494 <vPortEnterCritical>
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcdc:	b25b      	sxtb	r3, r3
 800dcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce2:	d103      	bne.n	800dcec <xQueueGenericSend+0x16c>
 800dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcf2:	b25b      	sxtb	r3, r3
 800dcf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf8:	d103      	bne.n	800dd02 <xQueueGenericSend+0x182>
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd02:	f001 fbf7 	bl	800f4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd06:	1d3a      	adds	r2, r7, #4
 800dd08:	f107 0314 	add.w	r3, r7, #20
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 fef2 	bl	800eaf8 <xTaskCheckForTimeOut>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d124      	bne.n	800dd64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dd1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd1c:	f000 fa24 	bl	800e168 <prvIsQueueFull>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d018      	beq.n	800dd58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	3310      	adds	r3, #16
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 fe46 	bl	800e9c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd36:	f000 f9af 	bl	800e098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dd3a:	f000 fc8b 	bl	800e654 <xTaskResumeAll>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f47f af7c 	bne.w	800dc3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <xQueueGenericSend+0x1f8>)
 800dd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	e772      	b.n	800dc3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dd58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd5a:	f000 f99d 	bl	800e098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd5e:	f000 fc79 	bl	800e654 <xTaskResumeAll>
 800dd62:	e76c      	b.n	800dc3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dd64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd66:	f000 f997 	bl	800e098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd6a:	f000 fc73 	bl	800e654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dd6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3738      	adds	r7, #56	; 0x38
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	e000ed04 	.word	0xe000ed04

0800dd7c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b08e      	sub	sp, #56	; 0x38
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd86:	2300      	movs	r3, #0
 800dd88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10a      	bne.n	800ddae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	623b      	str	r3, [r7, #32]
}
 800ddaa:	bf00      	nop
 800ddac:	e7fe      	b.n	800ddac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00a      	beq.n	800ddcc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ddb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddba:	f383 8811 	msr	BASEPRI, r3
 800ddbe:	f3bf 8f6f 	isb	sy
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	61fb      	str	r3, [r7, #28]
}
 800ddc8:	bf00      	nop
 800ddca:	e7fe      	b.n	800ddca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddcc:	f001 f814 	bl	800edf8 <xTaskGetSchedulerState>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d102      	bne.n	800dddc <xQueueSemaphoreTake+0x60>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <xQueueSemaphoreTake+0x64>
 800dddc:	2301      	movs	r3, #1
 800ddde:	e000      	b.n	800dde2 <xQueueSemaphoreTake+0x66>
 800dde0:	2300      	movs	r3, #0
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10a      	bne.n	800ddfc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	61bb      	str	r3, [r7, #24]
}
 800ddf8:	bf00      	nop
 800ddfa:	e7fe      	b.n	800ddfa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddfc:	f001 fb4a 	bl	800f494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d024      	beq.n	800de56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0e:	1e5a      	subs	r2, r3, #1
 800de10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d104      	bne.n	800de26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de1c:	f001 f994 	bl	800f148 <pvTaskIncrementMutexHeldCount>
 800de20:	4602      	mov	r2, r0
 800de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00f      	beq.n	800de4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de30:	3310      	adds	r3, #16
 800de32:	4618      	mov	r0, r3
 800de34:	f000 fde8 	bl	800ea08 <xTaskRemoveFromEventList>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d007      	beq.n	800de4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de3e:	4b54      	ldr	r3, [pc, #336]	; (800df90 <xQueueSemaphoreTake+0x214>)
 800de40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de44:	601a      	str	r2, [r3, #0]
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de4e:	f001 fb51 	bl	800f4f4 <vPortExitCritical>
				return pdPASS;
 800de52:	2301      	movs	r3, #1
 800de54:	e097      	b.n	800df86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d111      	bne.n	800de80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00a      	beq.n	800de78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	617b      	str	r3, [r7, #20]
}
 800de74:	bf00      	nop
 800de76:	e7fe      	b.n	800de76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800de78:	f001 fb3c 	bl	800f4f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de7c:	2300      	movs	r3, #0
 800de7e:	e082      	b.n	800df86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 fe1e 	bl	800eacc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de90:	2301      	movs	r3, #1
 800de92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de94:	f001 fb2e 	bl	800f4f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de98:	f000 fbce 	bl	800e638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de9c:	f001 fafa 	bl	800f494 <vPortEnterCritical>
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dea6:	b25b      	sxtb	r3, r3
 800dea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deac:	d103      	bne.n	800deb6 <xQueueSemaphoreTake+0x13a>
 800deae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800deb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800debc:	b25b      	sxtb	r3, r3
 800debe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec2:	d103      	bne.n	800decc <xQueueSemaphoreTake+0x150>
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800decc:	f001 fb12 	bl	800f4f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ded0:	463a      	mov	r2, r7
 800ded2:	f107 030c 	add.w	r3, r7, #12
 800ded6:	4611      	mov	r1, r2
 800ded8:	4618      	mov	r0, r3
 800deda:	f000 fe0d 	bl	800eaf8 <xTaskCheckForTimeOut>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d132      	bne.n	800df4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dee6:	f000 f929 	bl	800e13c <prvIsQueueEmpty>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d026      	beq.n	800df3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800def0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d109      	bne.n	800df0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800def8:	f001 facc 	bl	800f494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	4618      	mov	r0, r3
 800df02:	f000 ff97 	bl	800ee34 <xTaskPriorityInherit>
 800df06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800df08:	f001 faf4 	bl	800f4f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	3324      	adds	r3, #36	; 0x24
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f000 fd53 	bl	800e9c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df1c:	f000 f8bc 	bl	800e098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df20:	f000 fb98 	bl	800e654 <xTaskResumeAll>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	f47f af68 	bne.w	800ddfc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800df2c:	4b18      	ldr	r3, [pc, #96]	; (800df90 <xQueueSemaphoreTake+0x214>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	e75e      	b.n	800ddfc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800df3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df40:	f000 f8aa 	bl	800e098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df44:	f000 fb86 	bl	800e654 <xTaskResumeAll>
 800df48:	e758      	b.n	800ddfc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800df4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df4c:	f000 f8a4 	bl	800e098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df50:	f000 fb80 	bl	800e654 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df56:	f000 f8f1 	bl	800e13c <prvIsQueueEmpty>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f43f af4d 	beq.w	800ddfc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00d      	beq.n	800df84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800df68:	f001 fa94 	bl	800f494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800df6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df6e:	f000 f811 	bl	800df94 <prvGetDisinheritPriorityAfterTimeout>
 800df72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df7a:	4618      	mov	r0, r3
 800df7c:	f001 f856 	bl	800f02c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800df80:	f001 fab8 	bl	800f4f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df86:	4618      	mov	r0, r3
 800df88:	3738      	adds	r7, #56	; 0x38
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	e000ed04 	.word	0xe000ed04

0800df94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d006      	beq.n	800dfb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f1c3 0307 	rsb	r3, r3, #7
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	e001      	b.n	800dfb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
	}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10d      	bne.n	800dffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d14d      	bne.n	800e086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f000 ff96 	bl	800ef20 <xTaskPriorityDisinherit>
 800dff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	609a      	str	r2, [r3, #8]
 800dffc:	e043      	b.n	800e086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d119      	bne.n	800e038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6858      	ldr	r0, [r3, #4]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00c:	461a      	mov	r2, r3
 800e00e:	68b9      	ldr	r1, [r7, #8]
 800e010:	f001 fe2f 	bl	800fc72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01c:	441a      	add	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d32b      	bcc.n	800e086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	605a      	str	r2, [r3, #4]
 800e036:	e026      	b.n	800e086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	68d8      	ldr	r0, [r3, #12]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e040:	461a      	mov	r2, r3
 800e042:	68b9      	ldr	r1, [r7, #8]
 800e044:	f001 fe15 	bl	800fc72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	68da      	ldr	r2, [r3, #12]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e050:	425b      	negs	r3, r3
 800e052:	441a      	add	r2, r3
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	68da      	ldr	r2, [r3, #12]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d207      	bcs.n	800e074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	689a      	ldr	r2, [r3, #8]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e06c:	425b      	negs	r3, r3
 800e06e:	441a      	add	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b02      	cmp	r3, #2
 800e078:	d105      	bne.n	800e086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	3b01      	subs	r3, #1
 800e084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e08e:	697b      	ldr	r3, [r7, #20]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0a0:	f001 f9f8 	bl	800f494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0ac:	e011      	b.n	800e0d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d012      	beq.n	800e0dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	3324      	adds	r3, #36	; 0x24
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 fca4 	bl	800ea08 <xTaskRemoveFromEventList>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0c6:	f000 fd79 	bl	800ebbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	dce9      	bgt.n	800e0ae <prvUnlockQueue+0x16>
 800e0da:	e000      	b.n	800e0de <prvUnlockQueue+0x46>
					break;
 800e0dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	22ff      	movs	r2, #255	; 0xff
 800e0e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e0e6:	f001 fa05 	bl	800f4f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e0ea:	f001 f9d3 	bl	800f494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0f6:	e011      	b.n	800e11c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d012      	beq.n	800e126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3310      	adds	r3, #16
 800e104:	4618      	mov	r0, r3
 800e106:	f000 fc7f 	bl	800ea08 <xTaskRemoveFromEventList>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e110:	f000 fd54 	bl	800ebbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	3b01      	subs	r3, #1
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e11c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e120:	2b00      	cmp	r3, #0
 800e122:	dce9      	bgt.n	800e0f8 <prvUnlockQueue+0x60>
 800e124:	e000      	b.n	800e128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	22ff      	movs	r2, #255	; 0xff
 800e12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e130:	f001 f9e0 	bl	800f4f4 <vPortExitCritical>
}
 800e134:	bf00      	nop
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e144:	f001 f9a6 	bl	800f494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d102      	bne.n	800e156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e150:	2301      	movs	r3, #1
 800e152:	60fb      	str	r3, [r7, #12]
 800e154:	e001      	b.n	800e15a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e15a:	f001 f9cb 	bl	800f4f4 <vPortExitCritical>

	return xReturn;
 800e15e:	68fb      	ldr	r3, [r7, #12]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e170:	f001 f990 	bl	800f494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d102      	bne.n	800e186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e180:	2301      	movs	r3, #1
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e001      	b.n	800e18a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e186:	2300      	movs	r3, #0
 800e188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e18a:	f001 f9b3 	bl	800f4f4 <vPortExitCritical>

	return xReturn;
 800e18e:	68fb      	ldr	r3, [r7, #12]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08e      	sub	sp, #56	; 0x38
 800e19c:	af04      	add	r7, sp, #16
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10a      	bne.n	800e1c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	623b      	str	r3, [r7, #32]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10a      	bne.n	800e1de <xTaskCreateStatic+0x46>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	61fb      	str	r3, [r7, #28]
}
 800e1da:	bf00      	nop
 800e1dc:	e7fe      	b.n	800e1dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e1de:	23b4      	movs	r3, #180	; 0xb4
 800e1e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	2bb4      	cmp	r3, #180	; 0xb4
 800e1e6:	d00a      	beq.n	800e1fe <xTaskCreateStatic+0x66>
	__asm volatile
 800e1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	61bb      	str	r3, [r7, #24]
}
 800e1fa:	bf00      	nop
 800e1fc:	e7fe      	b.n	800e1fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	2b00      	cmp	r3, #0
 800e204:	d01e      	beq.n	800e244 <xTaskCreateStatic+0xac>
 800e206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d01b      	beq.n	800e244 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e214:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	2202      	movs	r2, #2
 800e21a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e21e:	2300      	movs	r3, #0
 800e220:	9303      	str	r3, [sp, #12]
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	9302      	str	r3, [sp, #8]
 800e226:	f107 0314 	add.w	r3, r7, #20
 800e22a:	9301      	str	r3, [sp, #4]
 800e22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	68b9      	ldr	r1, [r7, #8]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 f850 	bl	800e2dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e23c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e23e:	f000 f8f3 	bl	800e428 <prvAddNewTaskToReadyList>
 800e242:	e001      	b.n	800e248 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e244:	2300      	movs	r3, #0
 800e246:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e248:	697b      	ldr	r3, [r7, #20]
	}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3728      	adds	r7, #40	; 0x28
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}

0800e252 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e252:	b580      	push	{r7, lr}
 800e254:	b08c      	sub	sp, #48	; 0x30
 800e256:	af04      	add	r7, sp, #16
 800e258:	60f8      	str	r0, [r7, #12]
 800e25a:	60b9      	str	r1, [r7, #8]
 800e25c:	603b      	str	r3, [r7, #0]
 800e25e:	4613      	mov	r3, r2
 800e260:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e262:	88fb      	ldrh	r3, [r7, #6]
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4618      	mov	r0, r3
 800e268:	f001 f9f6 	bl	800f658 <pvPortMalloc>
 800e26c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00e      	beq.n	800e292 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e274:	20b4      	movs	r0, #180	; 0xb4
 800e276:	f001 f9ef 	bl	800f658 <pvPortMalloc>
 800e27a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d003      	beq.n	800e28a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	631a      	str	r2, [r3, #48]	; 0x30
 800e288:	e005      	b.n	800e296 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e28a:	6978      	ldr	r0, [r7, #20]
 800e28c:	f001 fab0 	bl	800f7f0 <vPortFree>
 800e290:	e001      	b.n	800e296 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d017      	beq.n	800e2cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2a4:	88fa      	ldrh	r2, [r7, #6]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	9302      	str	r3, [sp, #8]
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	9301      	str	r3, [sp, #4]
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	68b9      	ldr	r1, [r7, #8]
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f000 f80e 	bl	800e2dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2c0:	69f8      	ldr	r0, [r7, #28]
 800e2c2:	f000 f8b1 	bl	800e428 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	61bb      	str	r3, [r7, #24]
 800e2ca:	e002      	b.n	800e2d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2d2:	69bb      	ldr	r3, [r7, #24]
	}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3720      	adds	r7, #32
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b088      	sub	sp, #32
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
 800e2e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	21a5      	movs	r1, #165	; 0xa5
 800e2f6:	f001 fcca 	bl	800fc8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e304:	3b01      	subs	r3, #1
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	f023 0307 	bic.w	r3, r3, #7
 800e312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00a      	beq.n	800e334 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e322:	f383 8811 	msr	BASEPRI, r3
 800e326:	f3bf 8f6f 	isb	sy
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	617b      	str	r3, [r7, #20]
}
 800e330:	bf00      	nop
 800e332:	e7fe      	b.n	800e332 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d01f      	beq.n	800e37a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e33a:	2300      	movs	r3, #0
 800e33c:	61fb      	str	r3, [r7, #28]
 800e33e:	e012      	b.n	800e366 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	4413      	add	r3, r2
 800e346:	7819      	ldrb	r1, [r3, #0]
 800e348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	4413      	add	r3, r2
 800e34e:	3334      	adds	r3, #52	; 0x34
 800e350:	460a      	mov	r2, r1
 800e352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	4413      	add	r3, r2
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d006      	beq.n	800e36e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	3301      	adds	r3, #1
 800e364:	61fb      	str	r3, [r7, #28]
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	2b0f      	cmp	r3, #15
 800e36a:	d9e9      	bls.n	800e340 <prvInitialiseNewTask+0x64>
 800e36c:	e000      	b.n	800e370 <prvInitialiseNewTask+0x94>
			{
				break;
 800e36e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	2200      	movs	r2, #0
 800e374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e378:	e003      	b.n	800e382 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e384:	2b06      	cmp	r3, #6
 800e386:	d901      	bls.n	800e38c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e388:	2306      	movs	r3, #6
 800e38a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e396:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39a:	2200      	movs	r2, #0
 800e39c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff fa64 	bl	800d870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3aa:	3318      	adds	r3, #24
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7ff fa5f 	bl	800d870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	f1c3 0207 	rsb	r2, r3, #7
 800e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3da:	334c      	adds	r3, #76	; 0x4c
 800e3dc:	2260      	movs	r2, #96	; 0x60
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f001 fc54 	bl	800fc8e <memset>
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e8:	4a0c      	ldr	r2, [pc, #48]	; (800e41c <prvInitialiseNewTask+0x140>)
 800e3ea:	651a      	str	r2, [r3, #80]	; 0x50
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	4a0c      	ldr	r2, [pc, #48]	; (800e420 <prvInitialiseNewTask+0x144>)
 800e3f0:	655a      	str	r2, [r3, #84]	; 0x54
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	4a0b      	ldr	r2, [pc, #44]	; (800e424 <prvInitialiseNewTask+0x148>)
 800e3f6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e3f8:	683a      	ldr	r2, [r7, #0]
 800e3fa:	68f9      	ldr	r1, [r7, #12]
 800e3fc:	69b8      	ldr	r0, [r7, #24]
 800e3fe:	f000 ff1d 	bl	800f23c <pxPortInitialiseStack>
 800e402:	4602      	mov	r2, r0
 800e404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e406:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e412:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e414:	bf00      	nop
 800e416:	3720      	adds	r7, #32
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	0801189c 	.word	0x0801189c
 800e420:	080118bc 	.word	0x080118bc
 800e424:	0801187c 	.word	0x0801187c

0800e428 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e430:	f001 f830 	bl	800f494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e434:	4b2a      	ldr	r3, [pc, #168]	; (800e4e0 <prvAddNewTaskToReadyList+0xb8>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3301      	adds	r3, #1
 800e43a:	4a29      	ldr	r2, [pc, #164]	; (800e4e0 <prvAddNewTaskToReadyList+0xb8>)
 800e43c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e43e:	4b29      	ldr	r3, [pc, #164]	; (800e4e4 <prvAddNewTaskToReadyList+0xbc>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d109      	bne.n	800e45a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e446:	4a27      	ldr	r2, [pc, #156]	; (800e4e4 <prvAddNewTaskToReadyList+0xbc>)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e44c:	4b24      	ldr	r3, [pc, #144]	; (800e4e0 <prvAddNewTaskToReadyList+0xb8>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d110      	bne.n	800e476 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e454:	f000 fbd6 	bl	800ec04 <prvInitialiseTaskLists>
 800e458:	e00d      	b.n	800e476 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e45a:	4b23      	ldr	r3, [pc, #140]	; (800e4e8 <prvAddNewTaskToReadyList+0xc0>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d109      	bne.n	800e476 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e462:	4b20      	ldr	r3, [pc, #128]	; (800e4e4 <prvAddNewTaskToReadyList+0xbc>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d802      	bhi.n	800e476 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e470:	4a1c      	ldr	r2, [pc, #112]	; (800e4e4 <prvAddNewTaskToReadyList+0xbc>)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e476:	4b1d      	ldr	r3, [pc, #116]	; (800e4ec <prvAddNewTaskToReadyList+0xc4>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	3301      	adds	r3, #1
 800e47c:	4a1b      	ldr	r2, [pc, #108]	; (800e4ec <prvAddNewTaskToReadyList+0xc4>)
 800e47e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e484:	2201      	movs	r2, #1
 800e486:	409a      	lsls	r2, r3
 800e488:	4b19      	ldr	r3, [pc, #100]	; (800e4f0 <prvAddNewTaskToReadyList+0xc8>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	4a18      	ldr	r2, [pc, #96]	; (800e4f0 <prvAddNewTaskToReadyList+0xc8>)
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e496:	4613      	mov	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4413      	add	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4a15      	ldr	r2, [pc, #84]	; (800e4f4 <prvAddNewTaskToReadyList+0xcc>)
 800e4a0:	441a      	add	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	f7ff f9ee 	bl	800d88a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4ae:	f001 f821 	bl	800f4f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4b2:	4b0d      	ldr	r3, [pc, #52]	; (800e4e8 <prvAddNewTaskToReadyList+0xc0>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00e      	beq.n	800e4d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4ba:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <prvAddNewTaskToReadyList+0xbc>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d207      	bcs.n	800e4d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4c8:	4b0b      	ldr	r3, [pc, #44]	; (800e4f8 <prvAddNewTaskToReadyList+0xd0>)
 800e4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	2000071c 	.word	0x2000071c
 800e4e4:	2000061c 	.word	0x2000061c
 800e4e8:	20000728 	.word	0x20000728
 800e4ec:	20000738 	.word	0x20000738
 800e4f0:	20000724 	.word	0x20000724
 800e4f4:	20000620 	.word	0x20000620
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e504:	2300      	movs	r3, #0
 800e506:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d017      	beq.n	800e53e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e50e:	4b13      	ldr	r3, [pc, #76]	; (800e55c <vTaskDelay+0x60>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <vTaskDelay+0x30>
	__asm volatile
 800e516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	60bb      	str	r3, [r7, #8]
}
 800e528:	bf00      	nop
 800e52a:	e7fe      	b.n	800e52a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e52c:	f000 f884 	bl	800e638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e530:	2100      	movs	r1, #0
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 fe1c 	bl	800f170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e538:	f000 f88c 	bl	800e654 <xTaskResumeAll>
 800e53c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d107      	bne.n	800e554 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e544:	4b06      	ldr	r3, [pc, #24]	; (800e560 <vTaskDelay+0x64>)
 800e546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e554:	bf00      	nop
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	20000744 	.word	0x20000744
 800e560:	e000ed04 	.word	0xe000ed04

0800e564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b08a      	sub	sp, #40	; 0x28
 800e568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e56e:	2300      	movs	r3, #0
 800e570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e572:	463a      	mov	r2, r7
 800e574:	1d39      	adds	r1, r7, #4
 800e576:	f107 0308 	add.w	r3, r7, #8
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f3 fcec 	bl	8001f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	9202      	str	r2, [sp, #8]
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	2300      	movs	r3, #0
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	2300      	movs	r3, #0
 800e590:	460a      	mov	r2, r1
 800e592:	4921      	ldr	r1, [pc, #132]	; (800e618 <vTaskStartScheduler+0xb4>)
 800e594:	4821      	ldr	r0, [pc, #132]	; (800e61c <vTaskStartScheduler+0xb8>)
 800e596:	f7ff fdff 	bl	800e198 <xTaskCreateStatic>
 800e59a:	4603      	mov	r3, r0
 800e59c:	4a20      	ldr	r2, [pc, #128]	; (800e620 <vTaskStartScheduler+0xbc>)
 800e59e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5a0:	4b1f      	ldr	r3, [pc, #124]	; (800e620 <vTaskStartScheduler+0xbc>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	617b      	str	r3, [r7, #20]
 800e5ac:	e001      	b.n	800e5b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d11b      	bne.n	800e5f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	613b      	str	r3, [r7, #16]
}
 800e5ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5cc:	4b15      	ldr	r3, [pc, #84]	; (800e624 <vTaskStartScheduler+0xc0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	334c      	adds	r3, #76	; 0x4c
 800e5d2:	4a15      	ldr	r2, [pc, #84]	; (800e628 <vTaskStartScheduler+0xc4>)
 800e5d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e5d6:	4b15      	ldr	r3, [pc, #84]	; (800e62c <vTaskStartScheduler+0xc8>)
 800e5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e5de:	4b14      	ldr	r3, [pc, #80]	; (800e630 <vTaskStartScheduler+0xcc>)
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e5e4:	4b13      	ldr	r3, [pc, #76]	; (800e634 <vTaskStartScheduler+0xd0>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e5ea:	f000 feb1 	bl	800f350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e5ee:	e00e      	b.n	800e60e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f6:	d10a      	bne.n	800e60e <vTaskStartScheduler+0xaa>
	__asm volatile
 800e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	60fb      	str	r3, [r7, #12]
}
 800e60a:	bf00      	nop
 800e60c:	e7fe      	b.n	800e60c <vTaskStartScheduler+0xa8>
}
 800e60e:	bf00      	nop
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	08011854 	.word	0x08011854
 800e61c:	0800ebd5 	.word	0x0800ebd5
 800e620:	20000740 	.word	0x20000740
 800e624:	2000061c 	.word	0x2000061c
 800e628:	200002cc 	.word	0x200002cc
 800e62c:	2000073c 	.word	0x2000073c
 800e630:	20000728 	.word	0x20000728
 800e634:	20000720 	.word	0x20000720

0800e638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e638:	b480      	push	{r7}
 800e63a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e63c:	4b04      	ldr	r3, [pc, #16]	; (800e650 <vTaskSuspendAll+0x18>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	3301      	adds	r3, #1
 800e642:	4a03      	ldr	r2, [pc, #12]	; (800e650 <vTaskSuspendAll+0x18>)
 800e644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e646:	bf00      	nop
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	20000744 	.word	0x20000744

0800e654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e65a:	2300      	movs	r3, #0
 800e65c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e65e:	2300      	movs	r3, #0
 800e660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e662:	4b41      	ldr	r3, [pc, #260]	; (800e768 <xTaskResumeAll+0x114>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10a      	bne.n	800e680 <xTaskResumeAll+0x2c>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	603b      	str	r3, [r7, #0]
}
 800e67c:	bf00      	nop
 800e67e:	e7fe      	b.n	800e67e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e680:	f000 ff08 	bl	800f494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e684:	4b38      	ldr	r3, [pc, #224]	; (800e768 <xTaskResumeAll+0x114>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3b01      	subs	r3, #1
 800e68a:	4a37      	ldr	r2, [pc, #220]	; (800e768 <xTaskResumeAll+0x114>)
 800e68c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e68e:	4b36      	ldr	r3, [pc, #216]	; (800e768 <xTaskResumeAll+0x114>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d161      	bne.n	800e75a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e696:	4b35      	ldr	r3, [pc, #212]	; (800e76c <xTaskResumeAll+0x118>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d05d      	beq.n	800e75a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e69e:	e02e      	b.n	800e6fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a0:	4b33      	ldr	r3, [pc, #204]	; (800e770 <xTaskResumeAll+0x11c>)
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3318      	adds	r3, #24
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7ff f949 	bl	800d944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff f944 	bl	800d944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	409a      	lsls	r2, r3
 800e6c4:	4b2b      	ldr	r3, [pc, #172]	; (800e774 <xTaskResumeAll+0x120>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	4a2a      	ldr	r2, [pc, #168]	; (800e774 <xTaskResumeAll+0x120>)
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4413      	add	r3, r2
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4a27      	ldr	r2, [pc, #156]	; (800e778 <xTaskResumeAll+0x124>)
 800e6dc:	441a      	add	r2, r3
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3304      	adds	r3, #4
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f7ff f8d0 	bl	800d88a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ee:	4b23      	ldr	r3, [pc, #140]	; (800e77c <xTaskResumeAll+0x128>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d302      	bcc.n	800e6fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e6f8:	4b21      	ldr	r3, [pc, #132]	; (800e780 <xTaskResumeAll+0x12c>)
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6fe:	4b1c      	ldr	r3, [pc, #112]	; (800e770 <xTaskResumeAll+0x11c>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1cc      	bne.n	800e6a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e70c:	f000 fb54 	bl	800edb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e710:	4b1c      	ldr	r3, [pc, #112]	; (800e784 <xTaskResumeAll+0x130>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d010      	beq.n	800e73e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e71c:	f000 f836 	bl	800e78c <xTaskIncrementTick>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e726:	4b16      	ldr	r3, [pc, #88]	; (800e780 <xTaskResumeAll+0x12c>)
 800e728:	2201      	movs	r2, #1
 800e72a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3b01      	subs	r3, #1
 800e730:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1f1      	bne.n	800e71c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e738:	4b12      	ldr	r3, [pc, #72]	; (800e784 <xTaskResumeAll+0x130>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e73e:	4b10      	ldr	r3, [pc, #64]	; (800e780 <xTaskResumeAll+0x12c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d009      	beq.n	800e75a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e746:	2301      	movs	r3, #1
 800e748:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e74a:	4b0f      	ldr	r3, [pc, #60]	; (800e788 <xTaskResumeAll+0x134>)
 800e74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e75a:	f000 fecb 	bl	800f4f4 <vPortExitCritical>

	return xAlreadyYielded;
 800e75e:	68bb      	ldr	r3, [r7, #8]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	20000744 	.word	0x20000744
 800e76c:	2000071c 	.word	0x2000071c
 800e770:	200006dc 	.word	0x200006dc
 800e774:	20000724 	.word	0x20000724
 800e778:	20000620 	.word	0x20000620
 800e77c:	2000061c 	.word	0x2000061c
 800e780:	20000730 	.word	0x20000730
 800e784:	2000072c 	.word	0x2000072c
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e792:	2300      	movs	r3, #0
 800e794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e796:	4b4e      	ldr	r3, [pc, #312]	; (800e8d0 <xTaskIncrementTick+0x144>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f040 808e 	bne.w	800e8bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7a0:	4b4c      	ldr	r3, [pc, #304]	; (800e8d4 <xTaskIncrementTick+0x148>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7a8:	4a4a      	ldr	r2, [pc, #296]	; (800e8d4 <xTaskIncrementTick+0x148>)
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d120      	bne.n	800e7f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e7b4:	4b48      	ldr	r3, [pc, #288]	; (800e8d8 <xTaskIncrementTick+0x14c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00a      	beq.n	800e7d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	603b      	str	r3, [r7, #0]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <xTaskIncrementTick+0x46>
 800e7d4:	4b40      	ldr	r3, [pc, #256]	; (800e8d8 <xTaskIncrementTick+0x14c>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	4b40      	ldr	r3, [pc, #256]	; (800e8dc <xTaskIncrementTick+0x150>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a3e      	ldr	r2, [pc, #248]	; (800e8d8 <xTaskIncrementTick+0x14c>)
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	4a3e      	ldr	r2, [pc, #248]	; (800e8dc <xTaskIncrementTick+0x150>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	4b3d      	ldr	r3, [pc, #244]	; (800e8e0 <xTaskIncrementTick+0x154>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	4a3c      	ldr	r2, [pc, #240]	; (800e8e0 <xTaskIncrementTick+0x154>)
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	f000 fae1 	bl	800edb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7f6:	4b3b      	ldr	r3, [pc, #236]	; (800e8e4 <xTaskIncrementTick+0x158>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	693a      	ldr	r2, [r7, #16]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d348      	bcc.n	800e892 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e800:	4b35      	ldr	r3, [pc, #212]	; (800e8d8 <xTaskIncrementTick+0x14c>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d104      	bne.n	800e814 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e80a:	4b36      	ldr	r3, [pc, #216]	; (800e8e4 <xTaskIncrementTick+0x158>)
 800e80c:	f04f 32ff 	mov.w	r2, #4294967295
 800e810:	601a      	str	r2, [r3, #0]
					break;
 800e812:	e03e      	b.n	800e892 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e814:	4b30      	ldr	r3, [pc, #192]	; (800e8d8 <xTaskIncrementTick+0x14c>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d203      	bcs.n	800e834 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e82c:	4a2d      	ldr	r2, [pc, #180]	; (800e8e4 <xTaskIncrementTick+0x158>)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e832:	e02e      	b.n	800e892 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3304      	adds	r3, #4
 800e838:	4618      	mov	r0, r3
 800e83a:	f7ff f883 	bl	800d944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e842:	2b00      	cmp	r3, #0
 800e844:	d004      	beq.n	800e850 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	3318      	adds	r3, #24
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff f87a 	bl	800d944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e854:	2201      	movs	r2, #1
 800e856:	409a      	lsls	r2, r3
 800e858:	4b23      	ldr	r3, [pc, #140]	; (800e8e8 <xTaskIncrementTick+0x15c>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	4a22      	ldr	r2, [pc, #136]	; (800e8e8 <xTaskIncrementTick+0x15c>)
 800e860:	6013      	str	r3, [r2, #0]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e866:	4613      	mov	r3, r2
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	4413      	add	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4a1f      	ldr	r2, [pc, #124]	; (800e8ec <xTaskIncrementTick+0x160>)
 800e870:	441a      	add	r2, r3
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	3304      	adds	r3, #4
 800e876:	4619      	mov	r1, r3
 800e878:	4610      	mov	r0, r2
 800e87a:	f7ff f806 	bl	800d88a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e882:	4b1b      	ldr	r3, [pc, #108]	; (800e8f0 <xTaskIncrementTick+0x164>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e888:	429a      	cmp	r2, r3
 800e88a:	d3b9      	bcc.n	800e800 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e88c:	2301      	movs	r3, #1
 800e88e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e890:	e7b6      	b.n	800e800 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e892:	4b17      	ldr	r3, [pc, #92]	; (800e8f0 <xTaskIncrementTick+0x164>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e898:	4914      	ldr	r1, [pc, #80]	; (800e8ec <xTaskIncrementTick+0x160>)
 800e89a:	4613      	mov	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	440b      	add	r3, r1
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d901      	bls.n	800e8ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e8ae:	4b11      	ldr	r3, [pc, #68]	; (800e8f4 <xTaskIncrementTick+0x168>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d007      	beq.n	800e8c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	617b      	str	r3, [r7, #20]
 800e8ba:	e004      	b.n	800e8c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e8bc:	4b0e      	ldr	r3, [pc, #56]	; (800e8f8 <xTaskIncrementTick+0x16c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	4a0d      	ldr	r2, [pc, #52]	; (800e8f8 <xTaskIncrementTick+0x16c>)
 800e8c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e8c6:	697b      	ldr	r3, [r7, #20]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	20000744 	.word	0x20000744
 800e8d4:	20000720 	.word	0x20000720
 800e8d8:	200006d4 	.word	0x200006d4
 800e8dc:	200006d8 	.word	0x200006d8
 800e8e0:	20000734 	.word	0x20000734
 800e8e4:	2000073c 	.word	0x2000073c
 800e8e8:	20000724 	.word	0x20000724
 800e8ec:	20000620 	.word	0x20000620
 800e8f0:	2000061c 	.word	0x2000061c
 800e8f4:	20000730 	.word	0x20000730
 800e8f8:	2000072c 	.word	0x2000072c

0800e8fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b087      	sub	sp, #28
 800e900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e902:	4b29      	ldr	r3, [pc, #164]	; (800e9a8 <vTaskSwitchContext+0xac>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e90a:	4b28      	ldr	r3, [pc, #160]	; (800e9ac <vTaskSwitchContext+0xb0>)
 800e90c:	2201      	movs	r2, #1
 800e90e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e910:	e044      	b.n	800e99c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e912:	4b26      	ldr	r3, [pc, #152]	; (800e9ac <vTaskSwitchContext+0xb0>)
 800e914:	2200      	movs	r2, #0
 800e916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e918:	4b25      	ldr	r3, [pc, #148]	; (800e9b0 <vTaskSwitchContext+0xb4>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	fab3 f383 	clz	r3, r3
 800e924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e926:	7afb      	ldrb	r3, [r7, #11]
 800e928:	f1c3 031f 	rsb	r3, r3, #31
 800e92c:	617b      	str	r3, [r7, #20]
 800e92e:	4921      	ldr	r1, [pc, #132]	; (800e9b4 <vTaskSwitchContext+0xb8>)
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	4613      	mov	r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4413      	add	r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	440b      	add	r3, r1
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	607b      	str	r3, [r7, #4]
}
 800e954:	bf00      	nop
 800e956:	e7fe      	b.n	800e956 <vTaskSwitchContext+0x5a>
 800e958:	697a      	ldr	r2, [r7, #20]
 800e95a:	4613      	mov	r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4413      	add	r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	4a14      	ldr	r2, [pc, #80]	; (800e9b4 <vTaskSwitchContext+0xb8>)
 800e964:	4413      	add	r3, r2
 800e966:	613b      	str	r3, [r7, #16]
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	685a      	ldr	r2, [r3, #4]
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	605a      	str	r2, [r3, #4]
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	3308      	adds	r3, #8
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d104      	bne.n	800e988 <vTaskSwitchContext+0x8c>
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	605a      	str	r2, [r3, #4]
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	4a0a      	ldr	r2, [pc, #40]	; (800e9b8 <vTaskSwitchContext+0xbc>)
 800e990:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e992:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <vTaskSwitchContext+0xbc>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	334c      	adds	r3, #76	; 0x4c
 800e998:	4a08      	ldr	r2, [pc, #32]	; (800e9bc <vTaskSwitchContext+0xc0>)
 800e99a:	6013      	str	r3, [r2, #0]
}
 800e99c:	bf00      	nop
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	20000744 	.word	0x20000744
 800e9ac:	20000730 	.word	0x20000730
 800e9b0:	20000724 	.word	0x20000724
 800e9b4:	20000620 	.word	0x20000620
 800e9b8:	2000061c 	.word	0x2000061c
 800e9bc:	200002cc 	.word	0x200002cc

0800e9c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d10a      	bne.n	800e9e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	60fb      	str	r3, [r7, #12]
}
 800e9e2:	bf00      	nop
 800e9e4:	e7fe      	b.n	800e9e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9e6:	4b07      	ldr	r3, [pc, #28]	; (800ea04 <vTaskPlaceOnEventList+0x44>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3318      	adds	r3, #24
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7fe ff6f 	bl	800d8d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	6838      	ldr	r0, [r7, #0]
 800e9f8:	f000 fbba 	bl	800f170 <prvAddCurrentTaskToDelayedList>
}
 800e9fc:	bf00      	nop
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	2000061c 	.word	0x2000061c

0800ea08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10a      	bne.n	800ea34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	60fb      	str	r3, [r7, #12]
}
 800ea30:	bf00      	nop
 800ea32:	e7fe      	b.n	800ea32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	3318      	adds	r3, #24
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fe ff83 	bl	800d944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea3e:	4b1d      	ldr	r3, [pc, #116]	; (800eab4 <xTaskRemoveFromEventList+0xac>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d11c      	bne.n	800ea80 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe ff7a 	bl	800d944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea54:	2201      	movs	r2, #1
 800ea56:	409a      	lsls	r2, r3
 800ea58:	4b17      	ldr	r3, [pc, #92]	; (800eab8 <xTaskRemoveFromEventList+0xb0>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	4a16      	ldr	r2, [pc, #88]	; (800eab8 <xTaskRemoveFromEventList+0xb0>)
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea66:	4613      	mov	r3, r2
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4413      	add	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4a13      	ldr	r2, [pc, #76]	; (800eabc <xTaskRemoveFromEventList+0xb4>)
 800ea70:	441a      	add	r2, r3
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	3304      	adds	r3, #4
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f7fe ff06 	bl	800d88a <vListInsertEnd>
 800ea7e:	e005      	b.n	800ea8c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	3318      	adds	r3, #24
 800ea84:	4619      	mov	r1, r3
 800ea86:	480e      	ldr	r0, [pc, #56]	; (800eac0 <xTaskRemoveFromEventList+0xb8>)
 800ea88:	f7fe feff 	bl	800d88a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea90:	4b0c      	ldr	r3, [pc, #48]	; (800eac4 <xTaskRemoveFromEventList+0xbc>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d905      	bls.n	800eaa6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea9e:	4b0a      	ldr	r3, [pc, #40]	; (800eac8 <xTaskRemoveFromEventList+0xc0>)
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	e001      	b.n	800eaaa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eaaa:	697b      	ldr	r3, [r7, #20]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20000744 	.word	0x20000744
 800eab8:	20000724 	.word	0x20000724
 800eabc:	20000620 	.word	0x20000620
 800eac0:	200006dc 	.word	0x200006dc
 800eac4:	2000061c 	.word	0x2000061c
 800eac8:	20000730 	.word	0x20000730

0800eacc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ead4:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <vTaskInternalSetTimeOutState+0x24>)
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eadc:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <vTaskInternalSetTimeOutState+0x28>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	605a      	str	r2, [r3, #4]
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	20000734 	.word	0x20000734
 800eaf4:	20000720 	.word	0x20000720

0800eaf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b088      	sub	sp, #32
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d10a      	bne.n	800eb1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0c:	f383 8811 	msr	BASEPRI, r3
 800eb10:	f3bf 8f6f 	isb	sy
 800eb14:	f3bf 8f4f 	dsb	sy
 800eb18:	613b      	str	r3, [r7, #16]
}
 800eb1a:	bf00      	nop
 800eb1c:	e7fe      	b.n	800eb1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10a      	bne.n	800eb3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	60fb      	str	r3, [r7, #12]
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eb3a:	f000 fcab 	bl	800f494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb3e:	4b1d      	ldr	r3, [pc, #116]	; (800ebb4 <xTaskCheckForTimeOut+0xbc>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb56:	d102      	bne.n	800eb5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61fb      	str	r3, [r7, #28]
 800eb5c:	e023      	b.n	800eba6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	4b15      	ldr	r3, [pc, #84]	; (800ebb8 <xTaskCheckForTimeOut+0xc0>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d007      	beq.n	800eb7a <xTaskCheckForTimeOut+0x82>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	69ba      	ldr	r2, [r7, #24]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d302      	bcc.n	800eb7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb74:	2301      	movs	r3, #1
 800eb76:	61fb      	str	r3, [r7, #28]
 800eb78:	e015      	b.n	800eba6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d20b      	bcs.n	800eb9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	1ad2      	subs	r2, r2, r3
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7ff ff9b 	bl	800eacc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb96:	2300      	movs	r3, #0
 800eb98:	61fb      	str	r3, [r7, #28]
 800eb9a:	e004      	b.n	800eba6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eba2:	2301      	movs	r3, #1
 800eba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eba6:	f000 fca5 	bl	800f4f4 <vPortExitCritical>

	return xReturn;
 800ebaa:	69fb      	ldr	r3, [r7, #28]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3720      	adds	r7, #32
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	20000720 	.word	0x20000720
 800ebb8:	20000734 	.word	0x20000734

0800ebbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebc0:	4b03      	ldr	r3, [pc, #12]	; (800ebd0 <vTaskMissedYield+0x14>)
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	601a      	str	r2, [r3, #0]
}
 800ebc6:	bf00      	nop
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	20000730 	.word	0x20000730

0800ebd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ebdc:	f000 f852 	bl	800ec84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebe0:	4b06      	ldr	r3, [pc, #24]	; (800ebfc <prvIdleTask+0x28>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d9f9      	bls.n	800ebdc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebe8:	4b05      	ldr	r3, [pc, #20]	; (800ec00 <prvIdleTask+0x2c>)
 800ebea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ebf8:	e7f0      	b.n	800ebdc <prvIdleTask+0x8>
 800ebfa:	bf00      	nop
 800ebfc:	20000620 	.word	0x20000620
 800ec00:	e000ed04 	.word	0xe000ed04

0800ec04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	607b      	str	r3, [r7, #4]
 800ec0e:	e00c      	b.n	800ec2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	4613      	mov	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4413      	add	r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	4a12      	ldr	r2, [pc, #72]	; (800ec64 <prvInitialiseTaskLists+0x60>)
 800ec1c:	4413      	add	r3, r2
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fe fe06 	bl	800d830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	3301      	adds	r3, #1
 800ec28:	607b      	str	r3, [r7, #4]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b06      	cmp	r3, #6
 800ec2e:	d9ef      	bls.n	800ec10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec30:	480d      	ldr	r0, [pc, #52]	; (800ec68 <prvInitialiseTaskLists+0x64>)
 800ec32:	f7fe fdfd 	bl	800d830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec36:	480d      	ldr	r0, [pc, #52]	; (800ec6c <prvInitialiseTaskLists+0x68>)
 800ec38:	f7fe fdfa 	bl	800d830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec3c:	480c      	ldr	r0, [pc, #48]	; (800ec70 <prvInitialiseTaskLists+0x6c>)
 800ec3e:	f7fe fdf7 	bl	800d830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec42:	480c      	ldr	r0, [pc, #48]	; (800ec74 <prvInitialiseTaskLists+0x70>)
 800ec44:	f7fe fdf4 	bl	800d830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec48:	480b      	ldr	r0, [pc, #44]	; (800ec78 <prvInitialiseTaskLists+0x74>)
 800ec4a:	f7fe fdf1 	bl	800d830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec4e:	4b0b      	ldr	r3, [pc, #44]	; (800ec7c <prvInitialiseTaskLists+0x78>)
 800ec50:	4a05      	ldr	r2, [pc, #20]	; (800ec68 <prvInitialiseTaskLists+0x64>)
 800ec52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec54:	4b0a      	ldr	r3, [pc, #40]	; (800ec80 <prvInitialiseTaskLists+0x7c>)
 800ec56:	4a05      	ldr	r2, [pc, #20]	; (800ec6c <prvInitialiseTaskLists+0x68>)
 800ec58:	601a      	str	r2, [r3, #0]
}
 800ec5a:	bf00      	nop
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20000620 	.word	0x20000620
 800ec68:	200006ac 	.word	0x200006ac
 800ec6c:	200006c0 	.word	0x200006c0
 800ec70:	200006dc 	.word	0x200006dc
 800ec74:	200006f0 	.word	0x200006f0
 800ec78:	20000708 	.word	0x20000708
 800ec7c:	200006d4 	.word	0x200006d4
 800ec80:	200006d8 	.word	0x200006d8

0800ec84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec8a:	e019      	b.n	800ecc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec8c:	f000 fc02 	bl	800f494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec90:	4b10      	ldr	r3, [pc, #64]	; (800ecd4 <prvCheckTasksWaitingTermination+0x50>)
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe fe51 	bl	800d944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eca2:	4b0d      	ldr	r3, [pc, #52]	; (800ecd8 <prvCheckTasksWaitingTermination+0x54>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	3b01      	subs	r3, #1
 800eca8:	4a0b      	ldr	r2, [pc, #44]	; (800ecd8 <prvCheckTasksWaitingTermination+0x54>)
 800ecaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecac:	4b0b      	ldr	r3, [pc, #44]	; (800ecdc <prvCheckTasksWaitingTermination+0x58>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	4a0a      	ldr	r2, [pc, #40]	; (800ecdc <prvCheckTasksWaitingTermination+0x58>)
 800ecb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecb6:	f000 fc1d 	bl	800f4f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f848 	bl	800ed50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecc0:	4b06      	ldr	r3, [pc, #24]	; (800ecdc <prvCheckTasksWaitingTermination+0x58>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1e1      	bne.n	800ec8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecc8:	bf00      	nop
 800ecca:	bf00      	nop
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	200006f0 	.word	0x200006f0
 800ecd8:	2000071c 	.word	0x2000071c
 800ecdc:	20000704 	.word	0x20000704

0800ece0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800ece8:	2300      	movs	r3, #0
 800ecea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ecec:	e005      	b.n	800ecfa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	2ba5      	cmp	r3, #165	; 0xa5
 800ed00:	d0f5      	beq.n	800ecee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	089b      	lsrs	r3, r3, #2
 800ed06:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	b29b      	uxth	r3, r3
	}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3714      	adds	r7, #20
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d102      	bne.n	800ed2c <uxTaskGetStackHighWaterMark+0x14>
 800ed26:	4b09      	ldr	r3, [pc, #36]	; (800ed4c <uxTaskGetStackHighWaterMark+0x34>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	e000      	b.n	800ed2e <uxTaskGetStackHighWaterMark+0x16>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed34:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800ed36:	6938      	ldr	r0, [r7, #16]
 800ed38:	f7ff ffd2 	bl	800ece0 <prvTaskCheckFreeStackSpace>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800ed40:	68fb      	ldr	r3, [r7, #12]
	}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3718      	adds	r7, #24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	2000061c 	.word	0x2000061c

0800ed50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	334c      	adds	r3, #76	; 0x4c
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 f895 	bl	800fe8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d108      	bne.n	800ed7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 fd3d 	bl	800f7f0 <vPortFree>
				vPortFree( pxTCB );
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fd3a 	bl	800f7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed7c:	e018      	b.n	800edb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d103      	bne.n	800ed90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 fd31 	bl	800f7f0 <vPortFree>
	}
 800ed8e:	e00f      	b.n	800edb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d00a      	beq.n	800edb0 <prvDeleteTCB+0x60>
	__asm volatile
 800ed9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	60fb      	str	r3, [r7, #12]
}
 800edac:	bf00      	nop
 800edae:	e7fe      	b.n	800edae <prvDeleteTCB+0x5e>
	}
 800edb0:	bf00      	nop
 800edb2:	3710      	adds	r7, #16
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edbe:	4b0c      	ldr	r3, [pc, #48]	; (800edf0 <prvResetNextTaskUnblockTime+0x38>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d104      	bne.n	800edd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800edc8:	4b0a      	ldr	r3, [pc, #40]	; (800edf4 <prvResetNextTaskUnblockTime+0x3c>)
 800edca:	f04f 32ff 	mov.w	r2, #4294967295
 800edce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800edd0:	e008      	b.n	800ede4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edd2:	4b07      	ldr	r3, [pc, #28]	; (800edf0 <prvResetNextTaskUnblockTime+0x38>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	4a04      	ldr	r2, [pc, #16]	; (800edf4 <prvResetNextTaskUnblockTime+0x3c>)
 800ede2:	6013      	str	r3, [r2, #0]
}
 800ede4:	bf00      	nop
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr
 800edf0:	200006d4 	.word	0x200006d4
 800edf4:	2000073c 	.word	0x2000073c

0800edf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800edfe:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <xTaskGetSchedulerState+0x34>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d102      	bne.n	800ee0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee06:	2301      	movs	r3, #1
 800ee08:	607b      	str	r3, [r7, #4]
 800ee0a:	e008      	b.n	800ee1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee0c:	4b08      	ldr	r3, [pc, #32]	; (800ee30 <xTaskGetSchedulerState+0x38>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d102      	bne.n	800ee1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee14:	2302      	movs	r3, #2
 800ee16:	607b      	str	r3, [r7, #4]
 800ee18:	e001      	b.n	800ee1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee1e:	687b      	ldr	r3, [r7, #4]
	}
 800ee20:	4618      	mov	r0, r3
 800ee22:	370c      	adds	r7, #12
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	20000728 	.word	0x20000728
 800ee30:	20000744 	.word	0x20000744

0800ee34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee40:	2300      	movs	r3, #0
 800ee42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d05e      	beq.n	800ef08 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee4e:	4b31      	ldr	r3, [pc, #196]	; (800ef14 <xTaskPriorityInherit+0xe0>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d24e      	bcs.n	800eef6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	db06      	blt.n	800ee6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee60:	4b2c      	ldr	r3, [pc, #176]	; (800ef14 <xTaskPriorityInherit+0xe0>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	f1c3 0207 	rsb	r2, r3, #7
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	6959      	ldr	r1, [r3, #20]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee76:	4613      	mov	r3, r2
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	4413      	add	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	4a26      	ldr	r2, [pc, #152]	; (800ef18 <xTaskPriorityInherit+0xe4>)
 800ee80:	4413      	add	r3, r2
 800ee82:	4299      	cmp	r1, r3
 800ee84:	d12f      	bne.n	800eee6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	3304      	adds	r3, #4
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fd5a 	bl	800d944 <uxListRemove>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10a      	bne.n	800eeac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	fa02 f303 	lsl.w	r3, r2, r3
 800eea0:	43da      	mvns	r2, r3
 800eea2:	4b1e      	ldr	r3, [pc, #120]	; (800ef1c <xTaskPriorityInherit+0xe8>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4013      	ands	r3, r2
 800eea8:	4a1c      	ldr	r2, [pc, #112]	; (800ef1c <xTaskPriorityInherit+0xe8>)
 800eeaa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eeac:	4b19      	ldr	r3, [pc, #100]	; (800ef14 <xTaskPriorityInherit+0xe0>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeba:	2201      	movs	r2, #1
 800eebc:	409a      	lsls	r2, r3
 800eebe:	4b17      	ldr	r3, [pc, #92]	; (800ef1c <xTaskPriorityInherit+0xe8>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	4a15      	ldr	r2, [pc, #84]	; (800ef1c <xTaskPriorityInherit+0xe8>)
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4a10      	ldr	r2, [pc, #64]	; (800ef18 <xTaskPriorityInherit+0xe4>)
 800eed6:	441a      	add	r2, r3
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	3304      	adds	r3, #4
 800eedc:	4619      	mov	r1, r3
 800eede:	4610      	mov	r0, r2
 800eee0:	f7fe fcd3 	bl	800d88a <vListInsertEnd>
 800eee4:	e004      	b.n	800eef0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eee6:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <xTaskPriorityInherit+0xe0>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eef0:	2301      	movs	r3, #1
 800eef2:	60fb      	str	r3, [r7, #12]
 800eef4:	e008      	b.n	800ef08 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eefa:	4b06      	ldr	r3, [pc, #24]	; (800ef14 <xTaskPriorityInherit+0xe0>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d201      	bcs.n	800ef08 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef04:	2301      	movs	r3, #1
 800ef06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef08:	68fb      	ldr	r3, [r7, #12]
	}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	2000061c 	.word	0x2000061c
 800ef18:	20000620 	.word	0x20000620
 800ef1c:	20000724 	.word	0x20000724

0800ef20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d06e      	beq.n	800f014 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef36:	4b3a      	ldr	r3, [pc, #232]	; (800f020 <xTaskPriorityDisinherit+0x100>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d00a      	beq.n	800ef56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	60fb      	str	r3, [r7, #12]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10a      	bne.n	800ef74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	60bb      	str	r3, [r7, #8]
}
 800ef70:	bf00      	nop
 800ef72:	e7fe      	b.n	800ef72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef78:	1e5a      	subs	r2, r3, #1
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d044      	beq.n	800f014 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d140      	bne.n	800f014 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	3304      	adds	r3, #4
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fe fcd4 	bl	800d944 <uxListRemove>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d115      	bne.n	800efce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa6:	491f      	ldr	r1, [pc, #124]	; (800f024 <xTaskPriorityDisinherit+0x104>)
 800efa8:	4613      	mov	r3, r2
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	440b      	add	r3, r1
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10a      	bne.n	800efce <xTaskPriorityDisinherit+0xae>
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efbc:	2201      	movs	r2, #1
 800efbe:	fa02 f303 	lsl.w	r3, r2, r3
 800efc2:	43da      	mvns	r2, r3
 800efc4:	4b18      	ldr	r3, [pc, #96]	; (800f028 <xTaskPriorityDisinherit+0x108>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4013      	ands	r3, r2
 800efca:	4a17      	ldr	r2, [pc, #92]	; (800f028 <xTaskPriorityDisinherit+0x108>)
 800efcc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efda:	f1c3 0207 	rsb	r2, r3, #7
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe6:	2201      	movs	r2, #1
 800efe8:	409a      	lsls	r2, r3
 800efea:	4b0f      	ldr	r3, [pc, #60]	; (800f028 <xTaskPriorityDisinherit+0x108>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4313      	orrs	r3, r2
 800eff0:	4a0d      	ldr	r2, [pc, #52]	; (800f028 <xTaskPriorityDisinherit+0x108>)
 800eff2:	6013      	str	r3, [r2, #0]
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff8:	4613      	mov	r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	4413      	add	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4a08      	ldr	r2, [pc, #32]	; (800f024 <xTaskPriorityDisinherit+0x104>)
 800f002:	441a      	add	r2, r3
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	3304      	adds	r3, #4
 800f008:	4619      	mov	r1, r3
 800f00a:	4610      	mov	r0, r2
 800f00c:	f7fe fc3d 	bl	800d88a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f010:	2301      	movs	r3, #1
 800f012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f014:	697b      	ldr	r3, [r7, #20]
	}
 800f016:	4618      	mov	r0, r3
 800f018:	3718      	adds	r7, #24
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	2000061c 	.word	0x2000061c
 800f024:	20000620 	.word	0x20000620
 800f028:	20000724 	.word	0x20000724

0800f02c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f03a:	2301      	movs	r3, #1
 800f03c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d077      	beq.n	800f134 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10a      	bne.n	800f062 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60fb      	str	r3, [r7, #12]
}
 800f05e:	bf00      	nop
 800f060:	e7fe      	b.n	800f060 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d902      	bls.n	800f072 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	61fb      	str	r3, [r7, #28]
 800f070:	e002      	b.n	800f078 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f076:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	69fa      	ldr	r2, [r7, #28]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d058      	beq.n	800f134 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d153      	bne.n	800f134 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f08c:	4b2b      	ldr	r3, [pc, #172]	; (800f13c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	429a      	cmp	r2, r3
 800f094:	d10a      	bne.n	800f0ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	60bb      	str	r3, [r7, #8]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	69fa      	ldr	r2, [r7, #28]
 800f0b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	699b      	ldr	r3, [r3, #24]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	db04      	blt.n	800f0ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	f1c3 0207 	rsb	r2, r3, #7
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	6959      	ldr	r1, [r3, #20]
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	4413      	add	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	4a19      	ldr	r2, [pc, #100]	; (800f140 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f0da:	4413      	add	r3, r2
 800f0dc:	4299      	cmp	r1, r3
 800f0de:	d129      	bne.n	800f134 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fe fc2d 	bl	800d944 <uxListRemove>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10a      	bne.n	800f106 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f0fa:	43da      	mvns	r2, r3
 800f0fc:	4b11      	ldr	r3, [pc, #68]	; (800f144 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4013      	ands	r3, r2
 800f102:	4a10      	ldr	r2, [pc, #64]	; (800f144 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f104:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10a:	2201      	movs	r2, #1
 800f10c:	409a      	lsls	r2, r3
 800f10e:	4b0d      	ldr	r3, [pc, #52]	; (800f144 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4313      	orrs	r3, r2
 800f114:	4a0b      	ldr	r2, [pc, #44]	; (800f144 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f11c:	4613      	mov	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	4a06      	ldr	r2, [pc, #24]	; (800f140 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f126:	441a      	add	r2, r3
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	3304      	adds	r3, #4
 800f12c:	4619      	mov	r1, r3
 800f12e:	4610      	mov	r0, r2
 800f130:	f7fe fbab 	bl	800d88a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f134:	bf00      	nop
 800f136:	3720      	adds	r7, #32
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	2000061c 	.word	0x2000061c
 800f140:	20000620 	.word	0x20000620
 800f144:	20000724 	.word	0x20000724

0800f148 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f148:	b480      	push	{r7}
 800f14a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f14c:	4b07      	ldr	r3, [pc, #28]	; (800f16c <pvTaskIncrementMutexHeldCount+0x24>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d004      	beq.n	800f15e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f154:	4b05      	ldr	r3, [pc, #20]	; (800f16c <pvTaskIncrementMutexHeldCount+0x24>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f15a:	3201      	adds	r2, #1
 800f15c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f15e:	4b03      	ldr	r3, [pc, #12]	; (800f16c <pvTaskIncrementMutexHeldCount+0x24>)
 800f160:	681b      	ldr	r3, [r3, #0]
	}
 800f162:	4618      	mov	r0, r3
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr
 800f16c:	2000061c 	.word	0x2000061c

0800f170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f17a:	4b29      	ldr	r3, [pc, #164]	; (800f220 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f180:	4b28      	ldr	r3, [pc, #160]	; (800f224 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	3304      	adds	r3, #4
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe fbdc 	bl	800d944 <uxListRemove>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10b      	bne.n	800f1aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f192:	4b24      	ldr	r3, [pc, #144]	; (800f224 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f198:	2201      	movs	r2, #1
 800f19a:	fa02 f303 	lsl.w	r3, r2, r3
 800f19e:	43da      	mvns	r2, r3
 800f1a0:	4b21      	ldr	r3, [pc, #132]	; (800f228 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	4a20      	ldr	r2, [pc, #128]	; (800f228 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b0:	d10a      	bne.n	800f1c8 <prvAddCurrentTaskToDelayedList+0x58>
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1b8:	4b1a      	ldr	r3, [pc, #104]	; (800f224 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	4619      	mov	r1, r3
 800f1c0:	481a      	ldr	r0, [pc, #104]	; (800f22c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f1c2:	f7fe fb62 	bl	800d88a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1c6:	e026      	b.n	800f216 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1d0:	4b14      	ldr	r3, [pc, #80]	; (800f224 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d209      	bcs.n	800f1f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e0:	4b13      	ldr	r3, [pc, #76]	; (800f230 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	4b0f      	ldr	r3, [pc, #60]	; (800f224 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	f7fe fb70 	bl	800d8d2 <vListInsert>
}
 800f1f2:	e010      	b.n	800f216 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1f4:	4b0f      	ldr	r3, [pc, #60]	; (800f234 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	3304      	adds	r3, #4
 800f1fe:	4619      	mov	r1, r3
 800f200:	4610      	mov	r0, r2
 800f202:	f7fe fb66 	bl	800d8d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f206:	4b0c      	ldr	r3, [pc, #48]	; (800f238 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d202      	bcs.n	800f216 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f210:	4a09      	ldr	r2, [pc, #36]	; (800f238 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	6013      	str	r3, [r2, #0]
}
 800f216:	bf00      	nop
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	20000720 	.word	0x20000720
 800f224:	2000061c 	.word	0x2000061c
 800f228:	20000724 	.word	0x20000724
 800f22c:	20000708 	.word	0x20000708
 800f230:	200006d8 	.word	0x200006d8
 800f234:	200006d4 	.word	0x200006d4
 800f238:	2000073c 	.word	0x2000073c

0800f23c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	3b04      	subs	r3, #4
 800f24c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3b04      	subs	r3, #4
 800f25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	f023 0201 	bic.w	r2, r3, #1
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3b04      	subs	r3, #4
 800f26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f26c:	4a0c      	ldr	r2, [pc, #48]	; (800f2a0 <pxPortInitialiseStack+0x64>)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3b14      	subs	r3, #20
 800f276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	3b04      	subs	r3, #4
 800f282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f06f 0202 	mvn.w	r2, #2
 800f28a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	3b20      	subs	r3, #32
 800f290:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f292:	68fb      	ldr	r3, [r7, #12]
}
 800f294:	4618      	mov	r0, r3
 800f296:	3714      	adds	r7, #20
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr
 800f2a0:	0800f2a5 	.word	0x0800f2a5

0800f2a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f2ae:	4b12      	ldr	r3, [pc, #72]	; (800f2f8 <prvTaskExitError+0x54>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b6:	d00a      	beq.n	800f2ce <prvTaskExitError+0x2a>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	60fb      	str	r3, [r7, #12]
}
 800f2ca:	bf00      	nop
 800f2cc:	e7fe      	b.n	800f2cc <prvTaskExitError+0x28>
	__asm volatile
 800f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d2:	f383 8811 	msr	BASEPRI, r3
 800f2d6:	f3bf 8f6f 	isb	sy
 800f2da:	f3bf 8f4f 	dsb	sy
 800f2de:	60bb      	str	r3, [r7, #8]
}
 800f2e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f2e2:	bf00      	nop
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0fc      	beq.n	800f2e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f2ea:	bf00      	nop
 800f2ec:	bf00      	nop
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	200002c8 	.word	0x200002c8
 800f2fc:	00000000 	.word	0x00000000

0800f300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f300:	4b07      	ldr	r3, [pc, #28]	; (800f320 <pxCurrentTCBConst2>)
 800f302:	6819      	ldr	r1, [r3, #0]
 800f304:	6808      	ldr	r0, [r1, #0]
 800f306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30a:	f380 8809 	msr	PSP, r0
 800f30e:	f3bf 8f6f 	isb	sy
 800f312:	f04f 0000 	mov.w	r0, #0
 800f316:	f380 8811 	msr	BASEPRI, r0
 800f31a:	4770      	bx	lr
 800f31c:	f3af 8000 	nop.w

0800f320 <pxCurrentTCBConst2>:
 800f320:	2000061c 	.word	0x2000061c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f324:	bf00      	nop
 800f326:	bf00      	nop

0800f328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f328:	4808      	ldr	r0, [pc, #32]	; (800f34c <prvPortStartFirstTask+0x24>)
 800f32a:	6800      	ldr	r0, [r0, #0]
 800f32c:	6800      	ldr	r0, [r0, #0]
 800f32e:	f380 8808 	msr	MSP, r0
 800f332:	f04f 0000 	mov.w	r0, #0
 800f336:	f380 8814 	msr	CONTROL, r0
 800f33a:	b662      	cpsie	i
 800f33c:	b661      	cpsie	f
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	df00      	svc	0
 800f348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f34a:	bf00      	nop
 800f34c:	e000ed08 	.word	0xe000ed08

0800f350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f356:	4b46      	ldr	r3, [pc, #280]	; (800f470 <xPortStartScheduler+0x120>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a46      	ldr	r2, [pc, #280]	; (800f474 <xPortStartScheduler+0x124>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d10a      	bne.n	800f376 <xPortStartScheduler+0x26>
	__asm volatile
 800f360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	613b      	str	r3, [r7, #16]
}
 800f372:	bf00      	nop
 800f374:	e7fe      	b.n	800f374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f376:	4b3e      	ldr	r3, [pc, #248]	; (800f470 <xPortStartScheduler+0x120>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a3f      	ldr	r2, [pc, #252]	; (800f478 <xPortStartScheduler+0x128>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d10a      	bne.n	800f396 <xPortStartScheduler+0x46>
	__asm volatile
 800f380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	60fb      	str	r3, [r7, #12]
}
 800f392:	bf00      	nop
 800f394:	e7fe      	b.n	800f394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f396:	4b39      	ldr	r3, [pc, #228]	; (800f47c <xPortStartScheduler+0x12c>)
 800f398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	22ff      	movs	r2, #255	; 0xff
 800f3a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f3b0:	78fb      	ldrb	r3, [r7, #3]
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f3b8:	b2da      	uxtb	r2, r3
 800f3ba:	4b31      	ldr	r3, [pc, #196]	; (800f480 <xPortStartScheduler+0x130>)
 800f3bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f3be:	4b31      	ldr	r3, [pc, #196]	; (800f484 <xPortStartScheduler+0x134>)
 800f3c0:	2207      	movs	r2, #7
 800f3c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3c4:	e009      	b.n	800f3da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f3c6:	4b2f      	ldr	r3, [pc, #188]	; (800f484 <xPortStartScheduler+0x134>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	4a2d      	ldr	r2, [pc, #180]	; (800f484 <xPortStartScheduler+0x134>)
 800f3ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3d0:	78fb      	ldrb	r3, [r7, #3]
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	005b      	lsls	r3, r3, #1
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3da:	78fb      	ldrb	r3, [r7, #3]
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3e2:	2b80      	cmp	r3, #128	; 0x80
 800f3e4:	d0ef      	beq.n	800f3c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3e6:	4b27      	ldr	r3, [pc, #156]	; (800f484 <xPortStartScheduler+0x134>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f1c3 0307 	rsb	r3, r3, #7
 800f3ee:	2b04      	cmp	r3, #4
 800f3f0:	d00a      	beq.n	800f408 <xPortStartScheduler+0xb8>
	__asm volatile
 800f3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	60bb      	str	r3, [r7, #8]
}
 800f404:	bf00      	nop
 800f406:	e7fe      	b.n	800f406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f408:	4b1e      	ldr	r3, [pc, #120]	; (800f484 <xPortStartScheduler+0x134>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	021b      	lsls	r3, r3, #8
 800f40e:	4a1d      	ldr	r2, [pc, #116]	; (800f484 <xPortStartScheduler+0x134>)
 800f410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f412:	4b1c      	ldr	r3, [pc, #112]	; (800f484 <xPortStartScheduler+0x134>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f41a:	4a1a      	ldr	r2, [pc, #104]	; (800f484 <xPortStartScheduler+0x134>)
 800f41c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	b2da      	uxtb	r2, r3
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f426:	4b18      	ldr	r3, [pc, #96]	; (800f488 <xPortStartScheduler+0x138>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a17      	ldr	r2, [pc, #92]	; (800f488 <xPortStartScheduler+0x138>)
 800f42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f432:	4b15      	ldr	r3, [pc, #84]	; (800f488 <xPortStartScheduler+0x138>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a14      	ldr	r2, [pc, #80]	; (800f488 <xPortStartScheduler+0x138>)
 800f438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f43c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f43e:	f000 f8dd 	bl	800f5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f442:	4b12      	ldr	r3, [pc, #72]	; (800f48c <xPortStartScheduler+0x13c>)
 800f444:	2200      	movs	r2, #0
 800f446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f448:	f000 f8fc 	bl	800f644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f44c:	4b10      	ldr	r3, [pc, #64]	; (800f490 <xPortStartScheduler+0x140>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a0f      	ldr	r2, [pc, #60]	; (800f490 <xPortStartScheduler+0x140>)
 800f452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f458:	f7ff ff66 	bl	800f328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f45c:	f7ff fa4e 	bl	800e8fc <vTaskSwitchContext>
	prvTaskExitError();
 800f460:	f7ff ff20 	bl	800f2a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	e000ed00 	.word	0xe000ed00
 800f474:	410fc271 	.word	0x410fc271
 800f478:	410fc270 	.word	0x410fc270
 800f47c:	e000e400 	.word	0xe000e400
 800f480:	20000748 	.word	0x20000748
 800f484:	2000074c 	.word	0x2000074c
 800f488:	e000ed20 	.word	0xe000ed20
 800f48c:	200002c8 	.word	0x200002c8
 800f490:	e000ef34 	.word	0xe000ef34

0800f494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	607b      	str	r3, [r7, #4]
}
 800f4ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f4ae:	4b0f      	ldr	r3, [pc, #60]	; (800f4ec <vPortEnterCritical+0x58>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	4a0d      	ldr	r2, [pc, #52]	; (800f4ec <vPortEnterCritical+0x58>)
 800f4b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f4b8:	4b0c      	ldr	r3, [pc, #48]	; (800f4ec <vPortEnterCritical+0x58>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d10f      	bne.n	800f4e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <vPortEnterCritical+0x5c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00a      	beq.n	800f4e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	603b      	str	r3, [r7, #0]
}
 800f4dc:	bf00      	nop
 800f4de:	e7fe      	b.n	800f4de <vPortEnterCritical+0x4a>
	}
}
 800f4e0:	bf00      	nop
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	200002c8 	.word	0x200002c8
 800f4f0:	e000ed04 	.word	0xe000ed04

0800f4f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f4fa:	4b12      	ldr	r3, [pc, #72]	; (800f544 <vPortExitCritical+0x50>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d10a      	bne.n	800f518 <vPortExitCritical+0x24>
	__asm volatile
 800f502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f506:	f383 8811 	msr	BASEPRI, r3
 800f50a:	f3bf 8f6f 	isb	sy
 800f50e:	f3bf 8f4f 	dsb	sy
 800f512:	607b      	str	r3, [r7, #4]
}
 800f514:	bf00      	nop
 800f516:	e7fe      	b.n	800f516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f518:	4b0a      	ldr	r3, [pc, #40]	; (800f544 <vPortExitCritical+0x50>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	4a09      	ldr	r2, [pc, #36]	; (800f544 <vPortExitCritical+0x50>)
 800f520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f522:	4b08      	ldr	r3, [pc, #32]	; (800f544 <vPortExitCritical+0x50>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d105      	bne.n	800f536 <vPortExitCritical+0x42>
 800f52a:	2300      	movs	r3, #0
 800f52c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f536:	bf00      	nop
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	200002c8 	.word	0x200002c8
	...

0800f550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f550:	f3ef 8009 	mrs	r0, PSP
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	4b15      	ldr	r3, [pc, #84]	; (800f5b0 <pxCurrentTCBConst>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	f01e 0f10 	tst.w	lr, #16
 800f560:	bf08      	it	eq
 800f562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56a:	6010      	str	r0, [r2, #0]
 800f56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f570:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f574:	f380 8811 	msr	BASEPRI, r0
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	f3bf 8f6f 	isb	sy
 800f580:	f7ff f9bc 	bl	800e8fc <vTaskSwitchContext>
 800f584:	f04f 0000 	mov.w	r0, #0
 800f588:	f380 8811 	msr	BASEPRI, r0
 800f58c:	bc09      	pop	{r0, r3}
 800f58e:	6819      	ldr	r1, [r3, #0]
 800f590:	6808      	ldr	r0, [r1, #0]
 800f592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f596:	f01e 0f10 	tst.w	lr, #16
 800f59a:	bf08      	it	eq
 800f59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f5a0:	f380 8809 	msr	PSP, r0
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	f3af 8000 	nop.w

0800f5b0 <pxCurrentTCBConst>:
 800f5b0:	2000061c 	.word	0x2000061c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop

0800f5b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	607b      	str	r3, [r7, #4]
}
 800f5d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5d2:	f7ff f8db 	bl	800e78c <xTaskIncrementTick>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d003      	beq.n	800f5e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5dc:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <SysTick_Handler+0x40>)
 800f5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	f383 8811 	msr	BASEPRI, r3
}
 800f5ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5f0:	bf00      	nop
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	e000ed04 	.word	0xe000ed04

0800f5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f600:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <vPortSetupTimerInterrupt+0x34>)
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f606:	4b0b      	ldr	r3, [pc, #44]	; (800f634 <vPortSetupTimerInterrupt+0x38>)
 800f608:	2200      	movs	r2, #0
 800f60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f60c:	4b0a      	ldr	r3, [pc, #40]	; (800f638 <vPortSetupTimerInterrupt+0x3c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a0a      	ldr	r2, [pc, #40]	; (800f63c <vPortSetupTimerInterrupt+0x40>)
 800f612:	fba2 2303 	umull	r2, r3, r2, r3
 800f616:	099b      	lsrs	r3, r3, #6
 800f618:	4a09      	ldr	r2, [pc, #36]	; (800f640 <vPortSetupTimerInterrupt+0x44>)
 800f61a:	3b01      	subs	r3, #1
 800f61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f61e:	4b04      	ldr	r3, [pc, #16]	; (800f630 <vPortSetupTimerInterrupt+0x34>)
 800f620:	2207      	movs	r2, #7
 800f622:	601a      	str	r2, [r3, #0]
}
 800f624:	bf00      	nop
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	e000e010 	.word	0xe000e010
 800f634:	e000e018 	.word	0xe000e018
 800f638:	20000000 	.word	0x20000000
 800f63c:	10624dd3 	.word	0x10624dd3
 800f640:	e000e014 	.word	0xe000e014

0800f644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f654 <vPortEnableVFP+0x10>
 800f648:	6801      	ldr	r1, [r0, #0]
 800f64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f64e:	6001      	str	r1, [r0, #0]
 800f650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f652:	bf00      	nop
 800f654:	e000ed88 	.word	0xe000ed88

0800f658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f660:	2300      	movs	r3, #0
 800f662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f664:	f7fe ffe8 	bl	800e638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f668:	4b5b      	ldr	r3, [pc, #364]	; (800f7d8 <pvPortMalloc+0x180>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d101      	bne.n	800f674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f670:	f000 f920 	bl	800f8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f674:	4b59      	ldr	r3, [pc, #356]	; (800f7dc <pvPortMalloc+0x184>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4013      	ands	r3, r2
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f040 8093 	bne.w	800f7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d01d      	beq.n	800f6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f688:	2208      	movs	r2, #8
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4413      	add	r3, r2
 800f68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f003 0307 	and.w	r3, r3, #7
 800f696:	2b00      	cmp	r3, #0
 800f698:	d014      	beq.n	800f6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f023 0307 	bic.w	r3, r3, #7
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f003 0307 	and.w	r3, r3, #7
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00a      	beq.n	800f6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800f6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b2:	f383 8811 	msr	BASEPRI, r3
 800f6b6:	f3bf 8f6f 	isb	sy
 800f6ba:	f3bf 8f4f 	dsb	sy
 800f6be:	617b      	str	r3, [r7, #20]
}
 800f6c0:	bf00      	nop
 800f6c2:	e7fe      	b.n	800f6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d06e      	beq.n	800f7a8 <pvPortMalloc+0x150>
 800f6ca:	4b45      	ldr	r3, [pc, #276]	; (800f7e0 <pvPortMalloc+0x188>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d869      	bhi.n	800f7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f6d4:	4b43      	ldr	r3, [pc, #268]	; (800f7e4 <pvPortMalloc+0x18c>)
 800f6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f6d8:	4b42      	ldr	r3, [pc, #264]	; (800f7e4 <pvPortMalloc+0x18c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6de:	e004      	b.n	800f6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d903      	bls.n	800f6fc <pvPortMalloc+0xa4>
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1f1      	bne.n	800f6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f6fc:	4b36      	ldr	r3, [pc, #216]	; (800f7d8 <pvPortMalloc+0x180>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f702:	429a      	cmp	r2, r3
 800f704:	d050      	beq.n	800f7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f706:	6a3b      	ldr	r3, [r7, #32]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2208      	movs	r2, #8
 800f70c:	4413      	add	r3, r2
 800f70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	1ad2      	subs	r2, r2, r3
 800f720:	2308      	movs	r3, #8
 800f722:	005b      	lsls	r3, r3, #1
 800f724:	429a      	cmp	r2, r3
 800f726:	d91f      	bls.n	800f768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4413      	add	r3, r2
 800f72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	f003 0307 	and.w	r3, r3, #7
 800f736:	2b00      	cmp	r3, #0
 800f738:	d00a      	beq.n	800f750 <pvPortMalloc+0xf8>
	__asm volatile
 800f73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f73e:	f383 8811 	msr	BASEPRI, r3
 800f742:	f3bf 8f6f 	isb	sy
 800f746:	f3bf 8f4f 	dsb	sy
 800f74a:	613b      	str	r3, [r7, #16]
}
 800f74c:	bf00      	nop
 800f74e:	e7fe      	b.n	800f74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	685a      	ldr	r2, [r3, #4]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	1ad2      	subs	r2, r2, r3
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f762:	69b8      	ldr	r0, [r7, #24]
 800f764:	f000 f908 	bl	800f978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f768:	4b1d      	ldr	r3, [pc, #116]	; (800f7e0 <pvPortMalloc+0x188>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	4a1b      	ldr	r2, [pc, #108]	; (800f7e0 <pvPortMalloc+0x188>)
 800f774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f776:	4b1a      	ldr	r3, [pc, #104]	; (800f7e0 <pvPortMalloc+0x188>)
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	4b1b      	ldr	r3, [pc, #108]	; (800f7e8 <pvPortMalloc+0x190>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d203      	bcs.n	800f78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f782:	4b17      	ldr	r3, [pc, #92]	; (800f7e0 <pvPortMalloc+0x188>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a18      	ldr	r2, [pc, #96]	; (800f7e8 <pvPortMalloc+0x190>)
 800f788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	4b13      	ldr	r3, [pc, #76]	; (800f7dc <pvPortMalloc+0x184>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	431a      	orrs	r2, r3
 800f794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79a:	2200      	movs	r2, #0
 800f79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f79e:	4b13      	ldr	r3, [pc, #76]	; (800f7ec <pvPortMalloc+0x194>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	4a11      	ldr	r2, [pc, #68]	; (800f7ec <pvPortMalloc+0x194>)
 800f7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f7a8:	f7fe ff54 	bl	800e654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	f003 0307 	and.w	r3, r3, #7
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00a      	beq.n	800f7cc <pvPortMalloc+0x174>
	__asm volatile
 800f7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ba:	f383 8811 	msr	BASEPRI, r3
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	60fb      	str	r3, [r7, #12]
}
 800f7c8:	bf00      	nop
 800f7ca:	e7fe      	b.n	800f7ca <pvPortMalloc+0x172>
	return pvReturn;
 800f7cc:	69fb      	ldr	r3, [r7, #28]
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3728      	adds	r7, #40	; 0x28
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20004358 	.word	0x20004358
 800f7dc:	2000436c 	.word	0x2000436c
 800f7e0:	2000435c 	.word	0x2000435c
 800f7e4:	20004350 	.word	0x20004350
 800f7e8:	20004360 	.word	0x20004360
 800f7ec:	20004364 	.word	0x20004364

0800f7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b086      	sub	sp, #24
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d04d      	beq.n	800f89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f802:	2308      	movs	r3, #8
 800f804:	425b      	negs	r3, r3
 800f806:	697a      	ldr	r2, [r7, #20]
 800f808:	4413      	add	r3, r2
 800f80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	685a      	ldr	r2, [r3, #4]
 800f814:	4b24      	ldr	r3, [pc, #144]	; (800f8a8 <vPortFree+0xb8>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4013      	ands	r3, r2
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10a      	bne.n	800f834 <vPortFree+0x44>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	60fb      	str	r3, [r7, #12]
}
 800f830:	bf00      	nop
 800f832:	e7fe      	b.n	800f832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00a      	beq.n	800f852 <vPortFree+0x62>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	60bb      	str	r3, [r7, #8]
}
 800f84e:	bf00      	nop
 800f850:	e7fe      	b.n	800f850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	4b14      	ldr	r3, [pc, #80]	; (800f8a8 <vPortFree+0xb8>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4013      	ands	r3, r2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d01e      	beq.n	800f89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d11a      	bne.n	800f89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	685a      	ldr	r2, [r3, #4]
 800f86c:	4b0e      	ldr	r3, [pc, #56]	; (800f8a8 <vPortFree+0xb8>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	43db      	mvns	r3, r3
 800f872:	401a      	ands	r2, r3
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f878:	f7fe fede 	bl	800e638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	685a      	ldr	r2, [r3, #4]
 800f880:	4b0a      	ldr	r3, [pc, #40]	; (800f8ac <vPortFree+0xbc>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4413      	add	r3, r2
 800f886:	4a09      	ldr	r2, [pc, #36]	; (800f8ac <vPortFree+0xbc>)
 800f888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f88a:	6938      	ldr	r0, [r7, #16]
 800f88c:	f000 f874 	bl	800f978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f890:	4b07      	ldr	r3, [pc, #28]	; (800f8b0 <vPortFree+0xc0>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3301      	adds	r3, #1
 800f896:	4a06      	ldr	r2, [pc, #24]	; (800f8b0 <vPortFree+0xc0>)
 800f898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f89a:	f7fe fedb 	bl	800e654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f89e:	bf00      	nop
 800f8a0:	3718      	adds	r7, #24
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	2000436c 	.word	0x2000436c
 800f8ac:	2000435c 	.word	0x2000435c
 800f8b0:	20004368 	.word	0x20004368

0800f8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b085      	sub	sp, #20
 800f8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f8ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f8c0:	4b27      	ldr	r3, [pc, #156]	; (800f960 <prvHeapInit+0xac>)
 800f8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f003 0307 	and.w	r3, r3, #7
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00c      	beq.n	800f8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3307      	adds	r3, #7
 800f8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f023 0307 	bic.w	r3, r3, #7
 800f8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	4a1f      	ldr	r2, [pc, #124]	; (800f960 <prvHeapInit+0xac>)
 800f8e4:	4413      	add	r3, r2
 800f8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f8ec:	4a1d      	ldr	r2, [pc, #116]	; (800f964 <prvHeapInit+0xb0>)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f8f2:	4b1c      	ldr	r3, [pc, #112]	; (800f964 <prvHeapInit+0xb0>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f900:	2208      	movs	r2, #8
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	1a9b      	subs	r3, r3, r2
 800f906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f023 0307 	bic.w	r3, r3, #7
 800f90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4a15      	ldr	r2, [pc, #84]	; (800f968 <prvHeapInit+0xb4>)
 800f914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f916:	4b14      	ldr	r3, [pc, #80]	; (800f968 <prvHeapInit+0xb4>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2200      	movs	r2, #0
 800f91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f91e:	4b12      	ldr	r3, [pc, #72]	; (800f968 <prvHeapInit+0xb4>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	1ad2      	subs	r2, r2, r3
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f934:	4b0c      	ldr	r3, [pc, #48]	; (800f968 <prvHeapInit+0xb4>)
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	4a0a      	ldr	r2, [pc, #40]	; (800f96c <prvHeapInit+0xb8>)
 800f942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	4a09      	ldr	r2, [pc, #36]	; (800f970 <prvHeapInit+0xbc>)
 800f94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f94c:	4b09      	ldr	r3, [pc, #36]	; (800f974 <prvHeapInit+0xc0>)
 800f94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f952:	601a      	str	r2, [r3, #0]
}
 800f954:	bf00      	nop
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr
 800f960:	20000750 	.word	0x20000750
 800f964:	20004350 	.word	0x20004350
 800f968:	20004358 	.word	0x20004358
 800f96c:	20004360 	.word	0x20004360
 800f970:	2000435c 	.word	0x2000435c
 800f974:	2000436c 	.word	0x2000436c

0800f978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f980:	4b28      	ldr	r3, [pc, #160]	; (800fa24 <prvInsertBlockIntoFreeList+0xac>)
 800f982:	60fb      	str	r3, [r7, #12]
 800f984:	e002      	b.n	800f98c <prvInsertBlockIntoFreeList+0x14>
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	60fb      	str	r3, [r7, #12]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	429a      	cmp	r2, r3
 800f994:	d8f7      	bhi.n	800f986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	68ba      	ldr	r2, [r7, #8]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d108      	bne.n	800f9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	685a      	ldr	r2, [r3, #4]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	441a      	add	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	441a      	add	r2, r3
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d118      	bne.n	800fa00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	4b15      	ldr	r3, [pc, #84]	; (800fa28 <prvInsertBlockIntoFreeList+0xb0>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d00d      	beq.n	800f9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	685a      	ldr	r2, [r3, #4]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	441a      	add	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	601a      	str	r2, [r3, #0]
 800f9f4:	e008      	b.n	800fa08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f9f6:	4b0c      	ldr	r3, [pc, #48]	; (800fa28 <prvInsertBlockIntoFreeList+0xb0>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	601a      	str	r2, [r3, #0]
 800f9fe:	e003      	b.n	800fa08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d002      	beq.n	800fa16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa16:	bf00      	nop
 800fa18:	3714      	adds	r7, #20
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	20004350 	.word	0x20004350
 800fa28:	20004358 	.word	0x20004358

0800fa2c <__errno>:
 800fa2c:	4b01      	ldr	r3, [pc, #4]	; (800fa34 <__errno+0x8>)
 800fa2e:	6818      	ldr	r0, [r3, #0]
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	200002cc 	.word	0x200002cc

0800fa38 <std>:
 800fa38:	2300      	movs	r3, #0
 800fa3a:	b510      	push	{r4, lr}
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	e9c0 3300 	strd	r3, r3, [r0]
 800fa42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa46:	6083      	str	r3, [r0, #8]
 800fa48:	8181      	strh	r1, [r0, #12]
 800fa4a:	6643      	str	r3, [r0, #100]	; 0x64
 800fa4c:	81c2      	strh	r2, [r0, #14]
 800fa4e:	6183      	str	r3, [r0, #24]
 800fa50:	4619      	mov	r1, r3
 800fa52:	2208      	movs	r2, #8
 800fa54:	305c      	adds	r0, #92	; 0x5c
 800fa56:	f000 f91a 	bl	800fc8e <memset>
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <std+0x38>)
 800fa5c:	6263      	str	r3, [r4, #36]	; 0x24
 800fa5e:	4b05      	ldr	r3, [pc, #20]	; (800fa74 <std+0x3c>)
 800fa60:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa62:	4b05      	ldr	r3, [pc, #20]	; (800fa78 <std+0x40>)
 800fa64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa66:	4b05      	ldr	r3, [pc, #20]	; (800fa7c <std+0x44>)
 800fa68:	6224      	str	r4, [r4, #32]
 800fa6a:	6323      	str	r3, [r4, #48]	; 0x30
 800fa6c:	bd10      	pop	{r4, pc}
 800fa6e:	bf00      	nop
 800fa70:	0800ffa5 	.word	0x0800ffa5
 800fa74:	0800ffc7 	.word	0x0800ffc7
 800fa78:	0800ffff 	.word	0x0800ffff
 800fa7c:	08010023 	.word	0x08010023

0800fa80 <_cleanup_r>:
 800fa80:	4901      	ldr	r1, [pc, #4]	; (800fa88 <_cleanup_r+0x8>)
 800fa82:	f000 b8af 	b.w	800fbe4 <_fwalk_reent>
 800fa86:	bf00      	nop
 800fa88:	0801030d 	.word	0x0801030d

0800fa8c <__sfmoreglue>:
 800fa8c:	b570      	push	{r4, r5, r6, lr}
 800fa8e:	1e4a      	subs	r2, r1, #1
 800fa90:	2568      	movs	r5, #104	; 0x68
 800fa92:	4355      	muls	r5, r2
 800fa94:	460e      	mov	r6, r1
 800fa96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa9a:	f000 f901 	bl	800fca0 <_malloc_r>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	b140      	cbz	r0, 800fab4 <__sfmoreglue+0x28>
 800faa2:	2100      	movs	r1, #0
 800faa4:	e9c0 1600 	strd	r1, r6, [r0]
 800faa8:	300c      	adds	r0, #12
 800faaa:	60a0      	str	r0, [r4, #8]
 800faac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fab0:	f000 f8ed 	bl	800fc8e <memset>
 800fab4:	4620      	mov	r0, r4
 800fab6:	bd70      	pop	{r4, r5, r6, pc}

0800fab8 <__sfp_lock_acquire>:
 800fab8:	4801      	ldr	r0, [pc, #4]	; (800fac0 <__sfp_lock_acquire+0x8>)
 800faba:	f000 b8d8 	b.w	800fc6e <__retarget_lock_acquire_recursive>
 800fabe:	bf00      	nop
 800fac0:	20004c4c 	.word	0x20004c4c

0800fac4 <__sfp_lock_release>:
 800fac4:	4801      	ldr	r0, [pc, #4]	; (800facc <__sfp_lock_release+0x8>)
 800fac6:	f000 b8d3 	b.w	800fc70 <__retarget_lock_release_recursive>
 800faca:	bf00      	nop
 800facc:	20004c4c 	.word	0x20004c4c

0800fad0 <__sinit_lock_acquire>:
 800fad0:	4801      	ldr	r0, [pc, #4]	; (800fad8 <__sinit_lock_acquire+0x8>)
 800fad2:	f000 b8cc 	b.w	800fc6e <__retarget_lock_acquire_recursive>
 800fad6:	bf00      	nop
 800fad8:	20004c47 	.word	0x20004c47

0800fadc <__sinit_lock_release>:
 800fadc:	4801      	ldr	r0, [pc, #4]	; (800fae4 <__sinit_lock_release+0x8>)
 800fade:	f000 b8c7 	b.w	800fc70 <__retarget_lock_release_recursive>
 800fae2:	bf00      	nop
 800fae4:	20004c47 	.word	0x20004c47

0800fae8 <__sinit>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	4604      	mov	r4, r0
 800faec:	f7ff fff0 	bl	800fad0 <__sinit_lock_acquire>
 800faf0:	69a3      	ldr	r3, [r4, #24]
 800faf2:	b11b      	cbz	r3, 800fafc <__sinit+0x14>
 800faf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faf8:	f7ff bff0 	b.w	800fadc <__sinit_lock_release>
 800fafc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fb00:	6523      	str	r3, [r4, #80]	; 0x50
 800fb02:	4b13      	ldr	r3, [pc, #76]	; (800fb50 <__sinit+0x68>)
 800fb04:	4a13      	ldr	r2, [pc, #76]	; (800fb54 <__sinit+0x6c>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb0a:	42a3      	cmp	r3, r4
 800fb0c:	bf04      	itt	eq
 800fb0e:	2301      	moveq	r3, #1
 800fb10:	61a3      	streq	r3, [r4, #24]
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 f820 	bl	800fb58 <__sfp>
 800fb18:	6060      	str	r0, [r4, #4]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 f81c 	bl	800fb58 <__sfp>
 800fb20:	60a0      	str	r0, [r4, #8]
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 f818 	bl	800fb58 <__sfp>
 800fb28:	2200      	movs	r2, #0
 800fb2a:	60e0      	str	r0, [r4, #12]
 800fb2c:	2104      	movs	r1, #4
 800fb2e:	6860      	ldr	r0, [r4, #4]
 800fb30:	f7ff ff82 	bl	800fa38 <std>
 800fb34:	68a0      	ldr	r0, [r4, #8]
 800fb36:	2201      	movs	r2, #1
 800fb38:	2109      	movs	r1, #9
 800fb3a:	f7ff ff7d 	bl	800fa38 <std>
 800fb3e:	68e0      	ldr	r0, [r4, #12]
 800fb40:	2202      	movs	r2, #2
 800fb42:	2112      	movs	r1, #18
 800fb44:	f7ff ff78 	bl	800fa38 <std>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	61a3      	str	r3, [r4, #24]
 800fb4c:	e7d2      	b.n	800faf4 <__sinit+0xc>
 800fb4e:	bf00      	nop
 800fb50:	080118dc 	.word	0x080118dc
 800fb54:	0800fa81 	.word	0x0800fa81

0800fb58 <__sfp>:
 800fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5a:	4607      	mov	r7, r0
 800fb5c:	f7ff ffac 	bl	800fab8 <__sfp_lock_acquire>
 800fb60:	4b1e      	ldr	r3, [pc, #120]	; (800fbdc <__sfp+0x84>)
 800fb62:	681e      	ldr	r6, [r3, #0]
 800fb64:	69b3      	ldr	r3, [r6, #24]
 800fb66:	b913      	cbnz	r3, 800fb6e <__sfp+0x16>
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f7ff ffbd 	bl	800fae8 <__sinit>
 800fb6e:	3648      	adds	r6, #72	; 0x48
 800fb70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	d503      	bpl.n	800fb80 <__sfp+0x28>
 800fb78:	6833      	ldr	r3, [r6, #0]
 800fb7a:	b30b      	cbz	r3, 800fbc0 <__sfp+0x68>
 800fb7c:	6836      	ldr	r6, [r6, #0]
 800fb7e:	e7f7      	b.n	800fb70 <__sfp+0x18>
 800fb80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb84:	b9d5      	cbnz	r5, 800fbbc <__sfp+0x64>
 800fb86:	4b16      	ldr	r3, [pc, #88]	; (800fbe0 <__sfp+0x88>)
 800fb88:	60e3      	str	r3, [r4, #12]
 800fb8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb8e:	6665      	str	r5, [r4, #100]	; 0x64
 800fb90:	f000 f86c 	bl	800fc6c <__retarget_lock_init_recursive>
 800fb94:	f7ff ff96 	bl	800fac4 <__sfp_lock_release>
 800fb98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fba0:	6025      	str	r5, [r4, #0]
 800fba2:	61a5      	str	r5, [r4, #24]
 800fba4:	2208      	movs	r2, #8
 800fba6:	4629      	mov	r1, r5
 800fba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fbac:	f000 f86f 	bl	800fc8e <memset>
 800fbb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fbb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fbb8:	4620      	mov	r0, r4
 800fbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbbc:	3468      	adds	r4, #104	; 0x68
 800fbbe:	e7d9      	b.n	800fb74 <__sfp+0x1c>
 800fbc0:	2104      	movs	r1, #4
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	f7ff ff62 	bl	800fa8c <__sfmoreglue>
 800fbc8:	4604      	mov	r4, r0
 800fbca:	6030      	str	r0, [r6, #0]
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d1d5      	bne.n	800fb7c <__sfp+0x24>
 800fbd0:	f7ff ff78 	bl	800fac4 <__sfp_lock_release>
 800fbd4:	230c      	movs	r3, #12
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	e7ee      	b.n	800fbb8 <__sfp+0x60>
 800fbda:	bf00      	nop
 800fbdc:	080118dc 	.word	0x080118dc
 800fbe0:	ffff0001 	.word	0xffff0001

0800fbe4 <_fwalk_reent>:
 800fbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe8:	4606      	mov	r6, r0
 800fbea:	4688      	mov	r8, r1
 800fbec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbf0:	2700      	movs	r7, #0
 800fbf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbf6:	f1b9 0901 	subs.w	r9, r9, #1
 800fbfa:	d505      	bpl.n	800fc08 <_fwalk_reent+0x24>
 800fbfc:	6824      	ldr	r4, [r4, #0]
 800fbfe:	2c00      	cmp	r4, #0
 800fc00:	d1f7      	bne.n	800fbf2 <_fwalk_reent+0xe>
 800fc02:	4638      	mov	r0, r7
 800fc04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc08:	89ab      	ldrh	r3, [r5, #12]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d907      	bls.n	800fc1e <_fwalk_reent+0x3a>
 800fc0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc12:	3301      	adds	r3, #1
 800fc14:	d003      	beq.n	800fc1e <_fwalk_reent+0x3a>
 800fc16:	4629      	mov	r1, r5
 800fc18:	4630      	mov	r0, r6
 800fc1a:	47c0      	blx	r8
 800fc1c:	4307      	orrs	r7, r0
 800fc1e:	3568      	adds	r5, #104	; 0x68
 800fc20:	e7e9      	b.n	800fbf6 <_fwalk_reent+0x12>
	...

0800fc24 <__libc_init_array>:
 800fc24:	b570      	push	{r4, r5, r6, lr}
 800fc26:	4d0d      	ldr	r5, [pc, #52]	; (800fc5c <__libc_init_array+0x38>)
 800fc28:	4c0d      	ldr	r4, [pc, #52]	; (800fc60 <__libc_init_array+0x3c>)
 800fc2a:	1b64      	subs	r4, r4, r5
 800fc2c:	10a4      	asrs	r4, r4, #2
 800fc2e:	2600      	movs	r6, #0
 800fc30:	42a6      	cmp	r6, r4
 800fc32:	d109      	bne.n	800fc48 <__libc_init_array+0x24>
 800fc34:	4d0b      	ldr	r5, [pc, #44]	; (800fc64 <__libc_init_array+0x40>)
 800fc36:	4c0c      	ldr	r4, [pc, #48]	; (800fc68 <__libc_init_array+0x44>)
 800fc38:	f001 fb4a 	bl	80112d0 <_init>
 800fc3c:	1b64      	subs	r4, r4, r5
 800fc3e:	10a4      	asrs	r4, r4, #2
 800fc40:	2600      	movs	r6, #0
 800fc42:	42a6      	cmp	r6, r4
 800fc44:	d105      	bne.n	800fc52 <__libc_init_array+0x2e>
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc4c:	4798      	blx	r3
 800fc4e:	3601      	adds	r6, #1
 800fc50:	e7ee      	b.n	800fc30 <__libc_init_array+0xc>
 800fc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc56:	4798      	blx	r3
 800fc58:	3601      	adds	r6, #1
 800fc5a:	e7f2      	b.n	800fc42 <__libc_init_array+0x1e>
 800fc5c:	0801191c 	.word	0x0801191c
 800fc60:	0801191c 	.word	0x0801191c
 800fc64:	0801191c 	.word	0x0801191c
 800fc68:	08011920 	.word	0x08011920

0800fc6c <__retarget_lock_init_recursive>:
 800fc6c:	4770      	bx	lr

0800fc6e <__retarget_lock_acquire_recursive>:
 800fc6e:	4770      	bx	lr

0800fc70 <__retarget_lock_release_recursive>:
 800fc70:	4770      	bx	lr

0800fc72 <memcpy>:
 800fc72:	440a      	add	r2, r1
 800fc74:	4291      	cmp	r1, r2
 800fc76:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc7a:	d100      	bne.n	800fc7e <memcpy+0xc>
 800fc7c:	4770      	bx	lr
 800fc7e:	b510      	push	{r4, lr}
 800fc80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc88:	4291      	cmp	r1, r2
 800fc8a:	d1f9      	bne.n	800fc80 <memcpy+0xe>
 800fc8c:	bd10      	pop	{r4, pc}

0800fc8e <memset>:
 800fc8e:	4402      	add	r2, r0
 800fc90:	4603      	mov	r3, r0
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d100      	bne.n	800fc98 <memset+0xa>
 800fc96:	4770      	bx	lr
 800fc98:	f803 1b01 	strb.w	r1, [r3], #1
 800fc9c:	e7f9      	b.n	800fc92 <memset+0x4>
	...

0800fca0 <_malloc_r>:
 800fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca2:	1ccd      	adds	r5, r1, #3
 800fca4:	f025 0503 	bic.w	r5, r5, #3
 800fca8:	3508      	adds	r5, #8
 800fcaa:	2d0c      	cmp	r5, #12
 800fcac:	bf38      	it	cc
 800fcae:	250c      	movcc	r5, #12
 800fcb0:	2d00      	cmp	r5, #0
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	db01      	blt.n	800fcba <_malloc_r+0x1a>
 800fcb6:	42a9      	cmp	r1, r5
 800fcb8:	d903      	bls.n	800fcc2 <_malloc_r+0x22>
 800fcba:	230c      	movs	r3, #12
 800fcbc:	6033      	str	r3, [r6, #0]
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcc2:	f000 fbd5 	bl	8010470 <__malloc_lock>
 800fcc6:	4921      	ldr	r1, [pc, #132]	; (800fd4c <_malloc_r+0xac>)
 800fcc8:	680a      	ldr	r2, [r1, #0]
 800fcca:	4614      	mov	r4, r2
 800fccc:	b99c      	cbnz	r4, 800fcf6 <_malloc_r+0x56>
 800fcce:	4f20      	ldr	r7, [pc, #128]	; (800fd50 <_malloc_r+0xb0>)
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	b923      	cbnz	r3, 800fcde <_malloc_r+0x3e>
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	f000 f934 	bl	800ff44 <_sbrk_r>
 800fcdc:	6038      	str	r0, [r7, #0]
 800fcde:	4629      	mov	r1, r5
 800fce0:	4630      	mov	r0, r6
 800fce2:	f000 f92f 	bl	800ff44 <_sbrk_r>
 800fce6:	1c43      	adds	r3, r0, #1
 800fce8:	d123      	bne.n	800fd32 <_malloc_r+0x92>
 800fcea:	230c      	movs	r3, #12
 800fcec:	6033      	str	r3, [r6, #0]
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f000 fbc4 	bl	801047c <__malloc_unlock>
 800fcf4:	e7e3      	b.n	800fcbe <_malloc_r+0x1e>
 800fcf6:	6823      	ldr	r3, [r4, #0]
 800fcf8:	1b5b      	subs	r3, r3, r5
 800fcfa:	d417      	bmi.n	800fd2c <_malloc_r+0x8c>
 800fcfc:	2b0b      	cmp	r3, #11
 800fcfe:	d903      	bls.n	800fd08 <_malloc_r+0x68>
 800fd00:	6023      	str	r3, [r4, #0]
 800fd02:	441c      	add	r4, r3
 800fd04:	6025      	str	r5, [r4, #0]
 800fd06:	e004      	b.n	800fd12 <_malloc_r+0x72>
 800fd08:	6863      	ldr	r3, [r4, #4]
 800fd0a:	42a2      	cmp	r2, r4
 800fd0c:	bf0c      	ite	eq
 800fd0e:	600b      	streq	r3, [r1, #0]
 800fd10:	6053      	strne	r3, [r2, #4]
 800fd12:	4630      	mov	r0, r6
 800fd14:	f000 fbb2 	bl	801047c <__malloc_unlock>
 800fd18:	f104 000b 	add.w	r0, r4, #11
 800fd1c:	1d23      	adds	r3, r4, #4
 800fd1e:	f020 0007 	bic.w	r0, r0, #7
 800fd22:	1ac2      	subs	r2, r0, r3
 800fd24:	d0cc      	beq.n	800fcc0 <_malloc_r+0x20>
 800fd26:	1a1b      	subs	r3, r3, r0
 800fd28:	50a3      	str	r3, [r4, r2]
 800fd2a:	e7c9      	b.n	800fcc0 <_malloc_r+0x20>
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	6864      	ldr	r4, [r4, #4]
 800fd30:	e7cc      	b.n	800fccc <_malloc_r+0x2c>
 800fd32:	1cc4      	adds	r4, r0, #3
 800fd34:	f024 0403 	bic.w	r4, r4, #3
 800fd38:	42a0      	cmp	r0, r4
 800fd3a:	d0e3      	beq.n	800fd04 <_malloc_r+0x64>
 800fd3c:	1a21      	subs	r1, r4, r0
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f000 f900 	bl	800ff44 <_sbrk_r>
 800fd44:	3001      	adds	r0, #1
 800fd46:	d1dd      	bne.n	800fd04 <_malloc_r+0x64>
 800fd48:	e7cf      	b.n	800fcea <_malloc_r+0x4a>
 800fd4a:	bf00      	nop
 800fd4c:	20004370 	.word	0x20004370
 800fd50:	20004374 	.word	0x20004374

0800fd54 <iprintf>:
 800fd54:	b40f      	push	{r0, r1, r2, r3}
 800fd56:	4b0a      	ldr	r3, [pc, #40]	; (800fd80 <iprintf+0x2c>)
 800fd58:	b513      	push	{r0, r1, r4, lr}
 800fd5a:	681c      	ldr	r4, [r3, #0]
 800fd5c:	b124      	cbz	r4, 800fd68 <iprintf+0x14>
 800fd5e:	69a3      	ldr	r3, [r4, #24]
 800fd60:	b913      	cbnz	r3, 800fd68 <iprintf+0x14>
 800fd62:	4620      	mov	r0, r4
 800fd64:	f7ff fec0 	bl	800fae8 <__sinit>
 800fd68:	ab05      	add	r3, sp, #20
 800fd6a:	9a04      	ldr	r2, [sp, #16]
 800fd6c:	68a1      	ldr	r1, [r4, #8]
 800fd6e:	9301      	str	r3, [sp, #4]
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fd5f 	bl	8010834 <_vfiprintf_r>
 800fd76:	b002      	add	sp, #8
 800fd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd7c:	b004      	add	sp, #16
 800fd7e:	4770      	bx	lr
 800fd80:	200002cc 	.word	0x200002cc

0800fd84 <_puts_r>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	460e      	mov	r6, r1
 800fd88:	4605      	mov	r5, r0
 800fd8a:	b118      	cbz	r0, 800fd94 <_puts_r+0x10>
 800fd8c:	6983      	ldr	r3, [r0, #24]
 800fd8e:	b90b      	cbnz	r3, 800fd94 <_puts_r+0x10>
 800fd90:	f7ff feaa 	bl	800fae8 <__sinit>
 800fd94:	69ab      	ldr	r3, [r5, #24]
 800fd96:	68ac      	ldr	r4, [r5, #8]
 800fd98:	b913      	cbnz	r3, 800fda0 <_puts_r+0x1c>
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f7ff fea4 	bl	800fae8 <__sinit>
 800fda0:	4b2c      	ldr	r3, [pc, #176]	; (800fe54 <_puts_r+0xd0>)
 800fda2:	429c      	cmp	r4, r3
 800fda4:	d120      	bne.n	800fde8 <_puts_r+0x64>
 800fda6:	686c      	ldr	r4, [r5, #4]
 800fda8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdaa:	07db      	lsls	r3, r3, #31
 800fdac:	d405      	bmi.n	800fdba <_puts_r+0x36>
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	0598      	lsls	r0, r3, #22
 800fdb2:	d402      	bmi.n	800fdba <_puts_r+0x36>
 800fdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdb6:	f7ff ff5a 	bl	800fc6e <__retarget_lock_acquire_recursive>
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	0719      	lsls	r1, r3, #28
 800fdbe:	d51d      	bpl.n	800fdfc <_puts_r+0x78>
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	b1db      	cbz	r3, 800fdfc <_puts_r+0x78>
 800fdc4:	3e01      	subs	r6, #1
 800fdc6:	68a3      	ldr	r3, [r4, #8]
 800fdc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	60a3      	str	r3, [r4, #8]
 800fdd0:	bb39      	cbnz	r1, 800fe22 <_puts_r+0x9e>
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	da38      	bge.n	800fe48 <_puts_r+0xc4>
 800fdd6:	4622      	mov	r2, r4
 800fdd8:	210a      	movs	r1, #10
 800fdda:	4628      	mov	r0, r5
 800fddc:	f000 f92e 	bl	801003c <__swbuf_r>
 800fde0:	3001      	adds	r0, #1
 800fde2:	d011      	beq.n	800fe08 <_puts_r+0x84>
 800fde4:	250a      	movs	r5, #10
 800fde6:	e011      	b.n	800fe0c <_puts_r+0x88>
 800fde8:	4b1b      	ldr	r3, [pc, #108]	; (800fe58 <_puts_r+0xd4>)
 800fdea:	429c      	cmp	r4, r3
 800fdec:	d101      	bne.n	800fdf2 <_puts_r+0x6e>
 800fdee:	68ac      	ldr	r4, [r5, #8]
 800fdf0:	e7da      	b.n	800fda8 <_puts_r+0x24>
 800fdf2:	4b1a      	ldr	r3, [pc, #104]	; (800fe5c <_puts_r+0xd8>)
 800fdf4:	429c      	cmp	r4, r3
 800fdf6:	bf08      	it	eq
 800fdf8:	68ec      	ldreq	r4, [r5, #12]
 800fdfa:	e7d5      	b.n	800fda8 <_puts_r+0x24>
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f000 f980 	bl	8010104 <__swsetup_r>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d0dd      	beq.n	800fdc4 <_puts_r+0x40>
 800fe08:	f04f 35ff 	mov.w	r5, #4294967295
 800fe0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe0e:	07da      	lsls	r2, r3, #31
 800fe10:	d405      	bmi.n	800fe1e <_puts_r+0x9a>
 800fe12:	89a3      	ldrh	r3, [r4, #12]
 800fe14:	059b      	lsls	r3, r3, #22
 800fe16:	d402      	bmi.n	800fe1e <_puts_r+0x9a>
 800fe18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe1a:	f7ff ff29 	bl	800fc70 <__retarget_lock_release_recursive>
 800fe1e:	4628      	mov	r0, r5
 800fe20:	bd70      	pop	{r4, r5, r6, pc}
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	da04      	bge.n	800fe30 <_puts_r+0xac>
 800fe26:	69a2      	ldr	r2, [r4, #24]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	dc06      	bgt.n	800fe3a <_puts_r+0xb6>
 800fe2c:	290a      	cmp	r1, #10
 800fe2e:	d004      	beq.n	800fe3a <_puts_r+0xb6>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	6022      	str	r2, [r4, #0]
 800fe36:	7019      	strb	r1, [r3, #0]
 800fe38:	e7c5      	b.n	800fdc6 <_puts_r+0x42>
 800fe3a:	4622      	mov	r2, r4
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f000 f8fd 	bl	801003c <__swbuf_r>
 800fe42:	3001      	adds	r0, #1
 800fe44:	d1bf      	bne.n	800fdc6 <_puts_r+0x42>
 800fe46:	e7df      	b.n	800fe08 <_puts_r+0x84>
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	250a      	movs	r5, #10
 800fe4c:	1c5a      	adds	r2, r3, #1
 800fe4e:	6022      	str	r2, [r4, #0]
 800fe50:	701d      	strb	r5, [r3, #0]
 800fe52:	e7db      	b.n	800fe0c <_puts_r+0x88>
 800fe54:	0801189c 	.word	0x0801189c
 800fe58:	080118bc 	.word	0x080118bc
 800fe5c:	0801187c 	.word	0x0801187c

0800fe60 <puts>:
 800fe60:	4b02      	ldr	r3, [pc, #8]	; (800fe6c <puts+0xc>)
 800fe62:	4601      	mov	r1, r0
 800fe64:	6818      	ldr	r0, [r3, #0]
 800fe66:	f7ff bf8d 	b.w	800fd84 <_puts_r>
 800fe6a:	bf00      	nop
 800fe6c:	200002cc 	.word	0x200002cc

0800fe70 <cleanup_glue>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	460c      	mov	r4, r1
 800fe74:	6809      	ldr	r1, [r1, #0]
 800fe76:	4605      	mov	r5, r0
 800fe78:	b109      	cbz	r1, 800fe7e <cleanup_glue+0xe>
 800fe7a:	f7ff fff9 	bl	800fe70 <cleanup_glue>
 800fe7e:	4621      	mov	r1, r4
 800fe80:	4628      	mov	r0, r5
 800fe82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe86:	f000 baff 	b.w	8010488 <_free_r>
	...

0800fe8c <_reclaim_reent>:
 800fe8c:	4b2c      	ldr	r3, [pc, #176]	; (800ff40 <_reclaim_reent+0xb4>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4283      	cmp	r3, r0
 800fe92:	b570      	push	{r4, r5, r6, lr}
 800fe94:	4604      	mov	r4, r0
 800fe96:	d051      	beq.n	800ff3c <_reclaim_reent+0xb0>
 800fe98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fe9a:	b143      	cbz	r3, 800feae <_reclaim_reent+0x22>
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d14a      	bne.n	800ff38 <_reclaim_reent+0xac>
 800fea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fea4:	6819      	ldr	r1, [r3, #0]
 800fea6:	b111      	cbz	r1, 800feae <_reclaim_reent+0x22>
 800fea8:	4620      	mov	r0, r4
 800feaa:	f000 faed 	bl	8010488 <_free_r>
 800feae:	6961      	ldr	r1, [r4, #20]
 800feb0:	b111      	cbz	r1, 800feb8 <_reclaim_reent+0x2c>
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 fae8 	bl	8010488 <_free_r>
 800feb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800feba:	b111      	cbz	r1, 800fec2 <_reclaim_reent+0x36>
 800febc:	4620      	mov	r0, r4
 800febe:	f000 fae3 	bl	8010488 <_free_r>
 800fec2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fec4:	b111      	cbz	r1, 800fecc <_reclaim_reent+0x40>
 800fec6:	4620      	mov	r0, r4
 800fec8:	f000 fade 	bl	8010488 <_free_r>
 800fecc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fece:	b111      	cbz	r1, 800fed6 <_reclaim_reent+0x4a>
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 fad9 	bl	8010488 <_free_r>
 800fed6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fed8:	b111      	cbz	r1, 800fee0 <_reclaim_reent+0x54>
 800feda:	4620      	mov	r0, r4
 800fedc:	f000 fad4 	bl	8010488 <_free_r>
 800fee0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fee2:	b111      	cbz	r1, 800feea <_reclaim_reent+0x5e>
 800fee4:	4620      	mov	r0, r4
 800fee6:	f000 facf 	bl	8010488 <_free_r>
 800feea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800feec:	b111      	cbz	r1, 800fef4 <_reclaim_reent+0x68>
 800feee:	4620      	mov	r0, r4
 800fef0:	f000 faca 	bl	8010488 <_free_r>
 800fef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fef6:	b111      	cbz	r1, 800fefe <_reclaim_reent+0x72>
 800fef8:	4620      	mov	r0, r4
 800fefa:	f000 fac5 	bl	8010488 <_free_r>
 800fefe:	69a3      	ldr	r3, [r4, #24]
 800ff00:	b1e3      	cbz	r3, 800ff3c <_reclaim_reent+0xb0>
 800ff02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ff04:	4620      	mov	r0, r4
 800ff06:	4798      	blx	r3
 800ff08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ff0a:	b1b9      	cbz	r1, 800ff3c <_reclaim_reent+0xb0>
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff12:	f7ff bfad 	b.w	800fe70 <cleanup_glue>
 800ff16:	5949      	ldr	r1, [r1, r5]
 800ff18:	b941      	cbnz	r1, 800ff2c <_reclaim_reent+0xa0>
 800ff1a:	3504      	adds	r5, #4
 800ff1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff1e:	2d80      	cmp	r5, #128	; 0x80
 800ff20:	68d9      	ldr	r1, [r3, #12]
 800ff22:	d1f8      	bne.n	800ff16 <_reclaim_reent+0x8a>
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 faaf 	bl	8010488 <_free_r>
 800ff2a:	e7ba      	b.n	800fea2 <_reclaim_reent+0x16>
 800ff2c:	680e      	ldr	r6, [r1, #0]
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f000 faaa 	bl	8010488 <_free_r>
 800ff34:	4631      	mov	r1, r6
 800ff36:	e7ef      	b.n	800ff18 <_reclaim_reent+0x8c>
 800ff38:	2500      	movs	r5, #0
 800ff3a:	e7ef      	b.n	800ff1c <_reclaim_reent+0x90>
 800ff3c:	bd70      	pop	{r4, r5, r6, pc}
 800ff3e:	bf00      	nop
 800ff40:	200002cc 	.word	0x200002cc

0800ff44 <_sbrk_r>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	4d06      	ldr	r5, [pc, #24]	; (800ff60 <_sbrk_r+0x1c>)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	602b      	str	r3, [r5, #0]
 800ff50:	f7f2 fea4 	bl	8002c9c <_sbrk>
 800ff54:	1c43      	adds	r3, r0, #1
 800ff56:	d102      	bne.n	800ff5e <_sbrk_r+0x1a>
 800ff58:	682b      	ldr	r3, [r5, #0]
 800ff5a:	b103      	cbz	r3, 800ff5e <_sbrk_r+0x1a>
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	bd38      	pop	{r3, r4, r5, pc}
 800ff60:	20004c50 	.word	0x20004c50

0800ff64 <siprintf>:
 800ff64:	b40e      	push	{r1, r2, r3}
 800ff66:	b500      	push	{lr}
 800ff68:	b09c      	sub	sp, #112	; 0x70
 800ff6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ff6c:	9002      	str	r0, [sp, #8]
 800ff6e:	9006      	str	r0, [sp, #24]
 800ff70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff74:	4809      	ldr	r0, [pc, #36]	; (800ff9c <siprintf+0x38>)
 800ff76:	9107      	str	r1, [sp, #28]
 800ff78:	9104      	str	r1, [sp, #16]
 800ff7a:	4909      	ldr	r1, [pc, #36]	; (800ffa0 <siprintf+0x3c>)
 800ff7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff80:	9105      	str	r1, [sp, #20]
 800ff82:	6800      	ldr	r0, [r0, #0]
 800ff84:	9301      	str	r3, [sp, #4]
 800ff86:	a902      	add	r1, sp, #8
 800ff88:	f000 fb2a 	bl	80105e0 <_svfiprintf_r>
 800ff8c:	9b02      	ldr	r3, [sp, #8]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	701a      	strb	r2, [r3, #0]
 800ff92:	b01c      	add	sp, #112	; 0x70
 800ff94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff98:	b003      	add	sp, #12
 800ff9a:	4770      	bx	lr
 800ff9c:	200002cc 	.word	0x200002cc
 800ffa0:	ffff0208 	.word	0xffff0208

0800ffa4 <__sread>:
 800ffa4:	b510      	push	{r4, lr}
 800ffa6:	460c      	mov	r4, r1
 800ffa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffac:	f000 ff06 	bl	8010dbc <_read_r>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	bfab      	itete	ge
 800ffb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ffb8:	181b      	addge	r3, r3, r0
 800ffba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffbe:	bfac      	ite	ge
 800ffc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffc2:	81a3      	strhlt	r3, [r4, #12]
 800ffc4:	bd10      	pop	{r4, pc}

0800ffc6 <__swrite>:
 800ffc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffca:	461f      	mov	r7, r3
 800ffcc:	898b      	ldrh	r3, [r1, #12]
 800ffce:	05db      	lsls	r3, r3, #23
 800ffd0:	4605      	mov	r5, r0
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	4616      	mov	r6, r2
 800ffd6:	d505      	bpl.n	800ffe4 <__swrite+0x1e>
 800ffd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffdc:	2302      	movs	r3, #2
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f000 f9d0 	bl	8010384 <_lseek_r>
 800ffe4:	89a3      	ldrh	r3, [r4, #12]
 800ffe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffee:	81a3      	strh	r3, [r4, #12]
 800fff0:	4632      	mov	r2, r6
 800fff2:	463b      	mov	r3, r7
 800fff4:	4628      	mov	r0, r5
 800fff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fffa:	f000 b871 	b.w	80100e0 <_write_r>

0800fffe <__sseek>:
 800fffe:	b510      	push	{r4, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010006:	f000 f9bd 	bl	8010384 <_lseek_r>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	89a3      	ldrh	r3, [r4, #12]
 801000e:	bf15      	itete	ne
 8010010:	6560      	strne	r0, [r4, #84]	; 0x54
 8010012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801001a:	81a3      	strheq	r3, [r4, #12]
 801001c:	bf18      	it	ne
 801001e:	81a3      	strhne	r3, [r4, #12]
 8010020:	bd10      	pop	{r4, pc}

08010022 <__sclose>:
 8010022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010026:	f000 b8db 	b.w	80101e0 <_close_r>

0801002a <strcpy>:
 801002a:	4603      	mov	r3, r0
 801002c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010030:	f803 2b01 	strb.w	r2, [r3], #1
 8010034:	2a00      	cmp	r2, #0
 8010036:	d1f9      	bne.n	801002c <strcpy+0x2>
 8010038:	4770      	bx	lr
	...

0801003c <__swbuf_r>:
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	460e      	mov	r6, r1
 8010040:	4614      	mov	r4, r2
 8010042:	4605      	mov	r5, r0
 8010044:	b118      	cbz	r0, 801004e <__swbuf_r+0x12>
 8010046:	6983      	ldr	r3, [r0, #24]
 8010048:	b90b      	cbnz	r3, 801004e <__swbuf_r+0x12>
 801004a:	f7ff fd4d 	bl	800fae8 <__sinit>
 801004e:	4b21      	ldr	r3, [pc, #132]	; (80100d4 <__swbuf_r+0x98>)
 8010050:	429c      	cmp	r4, r3
 8010052:	d12b      	bne.n	80100ac <__swbuf_r+0x70>
 8010054:	686c      	ldr	r4, [r5, #4]
 8010056:	69a3      	ldr	r3, [r4, #24]
 8010058:	60a3      	str	r3, [r4, #8]
 801005a:	89a3      	ldrh	r3, [r4, #12]
 801005c:	071a      	lsls	r2, r3, #28
 801005e:	d52f      	bpl.n	80100c0 <__swbuf_r+0x84>
 8010060:	6923      	ldr	r3, [r4, #16]
 8010062:	b36b      	cbz	r3, 80100c0 <__swbuf_r+0x84>
 8010064:	6923      	ldr	r3, [r4, #16]
 8010066:	6820      	ldr	r0, [r4, #0]
 8010068:	1ac0      	subs	r0, r0, r3
 801006a:	6963      	ldr	r3, [r4, #20]
 801006c:	b2f6      	uxtb	r6, r6
 801006e:	4283      	cmp	r3, r0
 8010070:	4637      	mov	r7, r6
 8010072:	dc04      	bgt.n	801007e <__swbuf_r+0x42>
 8010074:	4621      	mov	r1, r4
 8010076:	4628      	mov	r0, r5
 8010078:	f000 f948 	bl	801030c <_fflush_r>
 801007c:	bb30      	cbnz	r0, 80100cc <__swbuf_r+0x90>
 801007e:	68a3      	ldr	r3, [r4, #8]
 8010080:	3b01      	subs	r3, #1
 8010082:	60a3      	str	r3, [r4, #8]
 8010084:	6823      	ldr	r3, [r4, #0]
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	6022      	str	r2, [r4, #0]
 801008a:	701e      	strb	r6, [r3, #0]
 801008c:	6963      	ldr	r3, [r4, #20]
 801008e:	3001      	adds	r0, #1
 8010090:	4283      	cmp	r3, r0
 8010092:	d004      	beq.n	801009e <__swbuf_r+0x62>
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	07db      	lsls	r3, r3, #31
 8010098:	d506      	bpl.n	80100a8 <__swbuf_r+0x6c>
 801009a:	2e0a      	cmp	r6, #10
 801009c:	d104      	bne.n	80100a8 <__swbuf_r+0x6c>
 801009e:	4621      	mov	r1, r4
 80100a0:	4628      	mov	r0, r5
 80100a2:	f000 f933 	bl	801030c <_fflush_r>
 80100a6:	b988      	cbnz	r0, 80100cc <__swbuf_r+0x90>
 80100a8:	4638      	mov	r0, r7
 80100aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100ac:	4b0a      	ldr	r3, [pc, #40]	; (80100d8 <__swbuf_r+0x9c>)
 80100ae:	429c      	cmp	r4, r3
 80100b0:	d101      	bne.n	80100b6 <__swbuf_r+0x7a>
 80100b2:	68ac      	ldr	r4, [r5, #8]
 80100b4:	e7cf      	b.n	8010056 <__swbuf_r+0x1a>
 80100b6:	4b09      	ldr	r3, [pc, #36]	; (80100dc <__swbuf_r+0xa0>)
 80100b8:	429c      	cmp	r4, r3
 80100ba:	bf08      	it	eq
 80100bc:	68ec      	ldreq	r4, [r5, #12]
 80100be:	e7ca      	b.n	8010056 <__swbuf_r+0x1a>
 80100c0:	4621      	mov	r1, r4
 80100c2:	4628      	mov	r0, r5
 80100c4:	f000 f81e 	bl	8010104 <__swsetup_r>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d0cb      	beq.n	8010064 <__swbuf_r+0x28>
 80100cc:	f04f 37ff 	mov.w	r7, #4294967295
 80100d0:	e7ea      	b.n	80100a8 <__swbuf_r+0x6c>
 80100d2:	bf00      	nop
 80100d4:	0801189c 	.word	0x0801189c
 80100d8:	080118bc 	.word	0x080118bc
 80100dc:	0801187c 	.word	0x0801187c

080100e0 <_write_r>:
 80100e0:	b538      	push	{r3, r4, r5, lr}
 80100e2:	4d07      	ldr	r5, [pc, #28]	; (8010100 <_write_r+0x20>)
 80100e4:	4604      	mov	r4, r0
 80100e6:	4608      	mov	r0, r1
 80100e8:	4611      	mov	r1, r2
 80100ea:	2200      	movs	r2, #0
 80100ec:	602a      	str	r2, [r5, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	f7f2 fd83 	bl	8002bfa <_write>
 80100f4:	1c43      	adds	r3, r0, #1
 80100f6:	d102      	bne.n	80100fe <_write_r+0x1e>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	b103      	cbz	r3, 80100fe <_write_r+0x1e>
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
 8010100:	20004c50 	.word	0x20004c50

08010104 <__swsetup_r>:
 8010104:	4b32      	ldr	r3, [pc, #200]	; (80101d0 <__swsetup_r+0xcc>)
 8010106:	b570      	push	{r4, r5, r6, lr}
 8010108:	681d      	ldr	r5, [r3, #0]
 801010a:	4606      	mov	r6, r0
 801010c:	460c      	mov	r4, r1
 801010e:	b125      	cbz	r5, 801011a <__swsetup_r+0x16>
 8010110:	69ab      	ldr	r3, [r5, #24]
 8010112:	b913      	cbnz	r3, 801011a <__swsetup_r+0x16>
 8010114:	4628      	mov	r0, r5
 8010116:	f7ff fce7 	bl	800fae8 <__sinit>
 801011a:	4b2e      	ldr	r3, [pc, #184]	; (80101d4 <__swsetup_r+0xd0>)
 801011c:	429c      	cmp	r4, r3
 801011e:	d10f      	bne.n	8010140 <__swsetup_r+0x3c>
 8010120:	686c      	ldr	r4, [r5, #4]
 8010122:	89a3      	ldrh	r3, [r4, #12]
 8010124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010128:	0719      	lsls	r1, r3, #28
 801012a:	d42c      	bmi.n	8010186 <__swsetup_r+0x82>
 801012c:	06dd      	lsls	r5, r3, #27
 801012e:	d411      	bmi.n	8010154 <__swsetup_r+0x50>
 8010130:	2309      	movs	r3, #9
 8010132:	6033      	str	r3, [r6, #0]
 8010134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010138:	81a3      	strh	r3, [r4, #12]
 801013a:	f04f 30ff 	mov.w	r0, #4294967295
 801013e:	e03e      	b.n	80101be <__swsetup_r+0xba>
 8010140:	4b25      	ldr	r3, [pc, #148]	; (80101d8 <__swsetup_r+0xd4>)
 8010142:	429c      	cmp	r4, r3
 8010144:	d101      	bne.n	801014a <__swsetup_r+0x46>
 8010146:	68ac      	ldr	r4, [r5, #8]
 8010148:	e7eb      	b.n	8010122 <__swsetup_r+0x1e>
 801014a:	4b24      	ldr	r3, [pc, #144]	; (80101dc <__swsetup_r+0xd8>)
 801014c:	429c      	cmp	r4, r3
 801014e:	bf08      	it	eq
 8010150:	68ec      	ldreq	r4, [r5, #12]
 8010152:	e7e6      	b.n	8010122 <__swsetup_r+0x1e>
 8010154:	0758      	lsls	r0, r3, #29
 8010156:	d512      	bpl.n	801017e <__swsetup_r+0x7a>
 8010158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801015a:	b141      	cbz	r1, 801016e <__swsetup_r+0x6a>
 801015c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010160:	4299      	cmp	r1, r3
 8010162:	d002      	beq.n	801016a <__swsetup_r+0x66>
 8010164:	4630      	mov	r0, r6
 8010166:	f000 f98f 	bl	8010488 <_free_r>
 801016a:	2300      	movs	r3, #0
 801016c:	6363      	str	r3, [r4, #52]	; 0x34
 801016e:	89a3      	ldrh	r3, [r4, #12]
 8010170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010174:	81a3      	strh	r3, [r4, #12]
 8010176:	2300      	movs	r3, #0
 8010178:	6063      	str	r3, [r4, #4]
 801017a:	6923      	ldr	r3, [r4, #16]
 801017c:	6023      	str	r3, [r4, #0]
 801017e:	89a3      	ldrh	r3, [r4, #12]
 8010180:	f043 0308 	orr.w	r3, r3, #8
 8010184:	81a3      	strh	r3, [r4, #12]
 8010186:	6923      	ldr	r3, [r4, #16]
 8010188:	b94b      	cbnz	r3, 801019e <__swsetup_r+0x9a>
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010194:	d003      	beq.n	801019e <__swsetup_r+0x9a>
 8010196:	4621      	mov	r1, r4
 8010198:	4630      	mov	r0, r6
 801019a:	f000 f929 	bl	80103f0 <__smakebuf_r>
 801019e:	89a0      	ldrh	r0, [r4, #12]
 80101a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101a4:	f010 0301 	ands.w	r3, r0, #1
 80101a8:	d00a      	beq.n	80101c0 <__swsetup_r+0xbc>
 80101aa:	2300      	movs	r3, #0
 80101ac:	60a3      	str	r3, [r4, #8]
 80101ae:	6963      	ldr	r3, [r4, #20]
 80101b0:	425b      	negs	r3, r3
 80101b2:	61a3      	str	r3, [r4, #24]
 80101b4:	6923      	ldr	r3, [r4, #16]
 80101b6:	b943      	cbnz	r3, 80101ca <__swsetup_r+0xc6>
 80101b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101bc:	d1ba      	bne.n	8010134 <__swsetup_r+0x30>
 80101be:	bd70      	pop	{r4, r5, r6, pc}
 80101c0:	0781      	lsls	r1, r0, #30
 80101c2:	bf58      	it	pl
 80101c4:	6963      	ldrpl	r3, [r4, #20]
 80101c6:	60a3      	str	r3, [r4, #8]
 80101c8:	e7f4      	b.n	80101b4 <__swsetup_r+0xb0>
 80101ca:	2000      	movs	r0, #0
 80101cc:	e7f7      	b.n	80101be <__swsetup_r+0xba>
 80101ce:	bf00      	nop
 80101d0:	200002cc 	.word	0x200002cc
 80101d4:	0801189c 	.word	0x0801189c
 80101d8:	080118bc 	.word	0x080118bc
 80101dc:	0801187c 	.word	0x0801187c

080101e0 <_close_r>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	4d06      	ldr	r5, [pc, #24]	; (80101fc <_close_r+0x1c>)
 80101e4:	2300      	movs	r3, #0
 80101e6:	4604      	mov	r4, r0
 80101e8:	4608      	mov	r0, r1
 80101ea:	602b      	str	r3, [r5, #0]
 80101ec:	f7f2 fd21 	bl	8002c32 <_close>
 80101f0:	1c43      	adds	r3, r0, #1
 80101f2:	d102      	bne.n	80101fa <_close_r+0x1a>
 80101f4:	682b      	ldr	r3, [r5, #0]
 80101f6:	b103      	cbz	r3, 80101fa <_close_r+0x1a>
 80101f8:	6023      	str	r3, [r4, #0]
 80101fa:	bd38      	pop	{r3, r4, r5, pc}
 80101fc:	20004c50 	.word	0x20004c50

08010200 <__sflush_r>:
 8010200:	898a      	ldrh	r2, [r1, #12]
 8010202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010206:	4605      	mov	r5, r0
 8010208:	0710      	lsls	r0, r2, #28
 801020a:	460c      	mov	r4, r1
 801020c:	d458      	bmi.n	80102c0 <__sflush_r+0xc0>
 801020e:	684b      	ldr	r3, [r1, #4]
 8010210:	2b00      	cmp	r3, #0
 8010212:	dc05      	bgt.n	8010220 <__sflush_r+0x20>
 8010214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010216:	2b00      	cmp	r3, #0
 8010218:	dc02      	bgt.n	8010220 <__sflush_r+0x20>
 801021a:	2000      	movs	r0, #0
 801021c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010222:	2e00      	cmp	r6, #0
 8010224:	d0f9      	beq.n	801021a <__sflush_r+0x1a>
 8010226:	2300      	movs	r3, #0
 8010228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801022c:	682f      	ldr	r7, [r5, #0]
 801022e:	602b      	str	r3, [r5, #0]
 8010230:	d032      	beq.n	8010298 <__sflush_r+0x98>
 8010232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010234:	89a3      	ldrh	r3, [r4, #12]
 8010236:	075a      	lsls	r2, r3, #29
 8010238:	d505      	bpl.n	8010246 <__sflush_r+0x46>
 801023a:	6863      	ldr	r3, [r4, #4]
 801023c:	1ac0      	subs	r0, r0, r3
 801023e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010240:	b10b      	cbz	r3, 8010246 <__sflush_r+0x46>
 8010242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010244:	1ac0      	subs	r0, r0, r3
 8010246:	2300      	movs	r3, #0
 8010248:	4602      	mov	r2, r0
 801024a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801024c:	6a21      	ldr	r1, [r4, #32]
 801024e:	4628      	mov	r0, r5
 8010250:	47b0      	blx	r6
 8010252:	1c43      	adds	r3, r0, #1
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	d106      	bne.n	8010266 <__sflush_r+0x66>
 8010258:	6829      	ldr	r1, [r5, #0]
 801025a:	291d      	cmp	r1, #29
 801025c:	d82c      	bhi.n	80102b8 <__sflush_r+0xb8>
 801025e:	4a2a      	ldr	r2, [pc, #168]	; (8010308 <__sflush_r+0x108>)
 8010260:	40ca      	lsrs	r2, r1
 8010262:	07d6      	lsls	r6, r2, #31
 8010264:	d528      	bpl.n	80102b8 <__sflush_r+0xb8>
 8010266:	2200      	movs	r2, #0
 8010268:	6062      	str	r2, [r4, #4]
 801026a:	04d9      	lsls	r1, r3, #19
 801026c:	6922      	ldr	r2, [r4, #16]
 801026e:	6022      	str	r2, [r4, #0]
 8010270:	d504      	bpl.n	801027c <__sflush_r+0x7c>
 8010272:	1c42      	adds	r2, r0, #1
 8010274:	d101      	bne.n	801027a <__sflush_r+0x7a>
 8010276:	682b      	ldr	r3, [r5, #0]
 8010278:	b903      	cbnz	r3, 801027c <__sflush_r+0x7c>
 801027a:	6560      	str	r0, [r4, #84]	; 0x54
 801027c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801027e:	602f      	str	r7, [r5, #0]
 8010280:	2900      	cmp	r1, #0
 8010282:	d0ca      	beq.n	801021a <__sflush_r+0x1a>
 8010284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010288:	4299      	cmp	r1, r3
 801028a:	d002      	beq.n	8010292 <__sflush_r+0x92>
 801028c:	4628      	mov	r0, r5
 801028e:	f000 f8fb 	bl	8010488 <_free_r>
 8010292:	2000      	movs	r0, #0
 8010294:	6360      	str	r0, [r4, #52]	; 0x34
 8010296:	e7c1      	b.n	801021c <__sflush_r+0x1c>
 8010298:	6a21      	ldr	r1, [r4, #32]
 801029a:	2301      	movs	r3, #1
 801029c:	4628      	mov	r0, r5
 801029e:	47b0      	blx	r6
 80102a0:	1c41      	adds	r1, r0, #1
 80102a2:	d1c7      	bne.n	8010234 <__sflush_r+0x34>
 80102a4:	682b      	ldr	r3, [r5, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d0c4      	beq.n	8010234 <__sflush_r+0x34>
 80102aa:	2b1d      	cmp	r3, #29
 80102ac:	d001      	beq.n	80102b2 <__sflush_r+0xb2>
 80102ae:	2b16      	cmp	r3, #22
 80102b0:	d101      	bne.n	80102b6 <__sflush_r+0xb6>
 80102b2:	602f      	str	r7, [r5, #0]
 80102b4:	e7b1      	b.n	801021a <__sflush_r+0x1a>
 80102b6:	89a3      	ldrh	r3, [r4, #12]
 80102b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102bc:	81a3      	strh	r3, [r4, #12]
 80102be:	e7ad      	b.n	801021c <__sflush_r+0x1c>
 80102c0:	690f      	ldr	r7, [r1, #16]
 80102c2:	2f00      	cmp	r7, #0
 80102c4:	d0a9      	beq.n	801021a <__sflush_r+0x1a>
 80102c6:	0793      	lsls	r3, r2, #30
 80102c8:	680e      	ldr	r6, [r1, #0]
 80102ca:	bf08      	it	eq
 80102cc:	694b      	ldreq	r3, [r1, #20]
 80102ce:	600f      	str	r7, [r1, #0]
 80102d0:	bf18      	it	ne
 80102d2:	2300      	movne	r3, #0
 80102d4:	eba6 0807 	sub.w	r8, r6, r7
 80102d8:	608b      	str	r3, [r1, #8]
 80102da:	f1b8 0f00 	cmp.w	r8, #0
 80102de:	dd9c      	ble.n	801021a <__sflush_r+0x1a>
 80102e0:	6a21      	ldr	r1, [r4, #32]
 80102e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102e4:	4643      	mov	r3, r8
 80102e6:	463a      	mov	r2, r7
 80102e8:	4628      	mov	r0, r5
 80102ea:	47b0      	blx	r6
 80102ec:	2800      	cmp	r0, #0
 80102ee:	dc06      	bgt.n	80102fe <__sflush_r+0xfe>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102f6:	81a3      	strh	r3, [r4, #12]
 80102f8:	f04f 30ff 	mov.w	r0, #4294967295
 80102fc:	e78e      	b.n	801021c <__sflush_r+0x1c>
 80102fe:	4407      	add	r7, r0
 8010300:	eba8 0800 	sub.w	r8, r8, r0
 8010304:	e7e9      	b.n	80102da <__sflush_r+0xda>
 8010306:	bf00      	nop
 8010308:	20400001 	.word	0x20400001

0801030c <_fflush_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	690b      	ldr	r3, [r1, #16]
 8010310:	4605      	mov	r5, r0
 8010312:	460c      	mov	r4, r1
 8010314:	b913      	cbnz	r3, 801031c <_fflush_r+0x10>
 8010316:	2500      	movs	r5, #0
 8010318:	4628      	mov	r0, r5
 801031a:	bd38      	pop	{r3, r4, r5, pc}
 801031c:	b118      	cbz	r0, 8010326 <_fflush_r+0x1a>
 801031e:	6983      	ldr	r3, [r0, #24]
 8010320:	b90b      	cbnz	r3, 8010326 <_fflush_r+0x1a>
 8010322:	f7ff fbe1 	bl	800fae8 <__sinit>
 8010326:	4b14      	ldr	r3, [pc, #80]	; (8010378 <_fflush_r+0x6c>)
 8010328:	429c      	cmp	r4, r3
 801032a:	d11b      	bne.n	8010364 <_fflush_r+0x58>
 801032c:	686c      	ldr	r4, [r5, #4]
 801032e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d0ef      	beq.n	8010316 <_fflush_r+0xa>
 8010336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010338:	07d0      	lsls	r0, r2, #31
 801033a:	d404      	bmi.n	8010346 <_fflush_r+0x3a>
 801033c:	0599      	lsls	r1, r3, #22
 801033e:	d402      	bmi.n	8010346 <_fflush_r+0x3a>
 8010340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010342:	f7ff fc94 	bl	800fc6e <__retarget_lock_acquire_recursive>
 8010346:	4628      	mov	r0, r5
 8010348:	4621      	mov	r1, r4
 801034a:	f7ff ff59 	bl	8010200 <__sflush_r>
 801034e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010350:	07da      	lsls	r2, r3, #31
 8010352:	4605      	mov	r5, r0
 8010354:	d4e0      	bmi.n	8010318 <_fflush_r+0xc>
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	059b      	lsls	r3, r3, #22
 801035a:	d4dd      	bmi.n	8010318 <_fflush_r+0xc>
 801035c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801035e:	f7ff fc87 	bl	800fc70 <__retarget_lock_release_recursive>
 8010362:	e7d9      	b.n	8010318 <_fflush_r+0xc>
 8010364:	4b05      	ldr	r3, [pc, #20]	; (801037c <_fflush_r+0x70>)
 8010366:	429c      	cmp	r4, r3
 8010368:	d101      	bne.n	801036e <_fflush_r+0x62>
 801036a:	68ac      	ldr	r4, [r5, #8]
 801036c:	e7df      	b.n	801032e <_fflush_r+0x22>
 801036e:	4b04      	ldr	r3, [pc, #16]	; (8010380 <_fflush_r+0x74>)
 8010370:	429c      	cmp	r4, r3
 8010372:	bf08      	it	eq
 8010374:	68ec      	ldreq	r4, [r5, #12]
 8010376:	e7da      	b.n	801032e <_fflush_r+0x22>
 8010378:	0801189c 	.word	0x0801189c
 801037c:	080118bc 	.word	0x080118bc
 8010380:	0801187c 	.word	0x0801187c

08010384 <_lseek_r>:
 8010384:	b538      	push	{r3, r4, r5, lr}
 8010386:	4d07      	ldr	r5, [pc, #28]	; (80103a4 <_lseek_r+0x20>)
 8010388:	4604      	mov	r4, r0
 801038a:	4608      	mov	r0, r1
 801038c:	4611      	mov	r1, r2
 801038e:	2200      	movs	r2, #0
 8010390:	602a      	str	r2, [r5, #0]
 8010392:	461a      	mov	r2, r3
 8010394:	f7f2 fc74 	bl	8002c80 <_lseek>
 8010398:	1c43      	adds	r3, r0, #1
 801039a:	d102      	bne.n	80103a2 <_lseek_r+0x1e>
 801039c:	682b      	ldr	r3, [r5, #0]
 801039e:	b103      	cbz	r3, 80103a2 <_lseek_r+0x1e>
 80103a0:	6023      	str	r3, [r4, #0]
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	20004c50 	.word	0x20004c50

080103a8 <__swhatbuf_r>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	460e      	mov	r6, r1
 80103ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b0:	2900      	cmp	r1, #0
 80103b2:	b096      	sub	sp, #88	; 0x58
 80103b4:	4614      	mov	r4, r2
 80103b6:	461d      	mov	r5, r3
 80103b8:	da07      	bge.n	80103ca <__swhatbuf_r+0x22>
 80103ba:	2300      	movs	r3, #0
 80103bc:	602b      	str	r3, [r5, #0]
 80103be:	89b3      	ldrh	r3, [r6, #12]
 80103c0:	061a      	lsls	r2, r3, #24
 80103c2:	d410      	bmi.n	80103e6 <__swhatbuf_r+0x3e>
 80103c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103c8:	e00e      	b.n	80103e8 <__swhatbuf_r+0x40>
 80103ca:	466a      	mov	r2, sp
 80103cc:	f000 fd08 	bl	8010de0 <_fstat_r>
 80103d0:	2800      	cmp	r0, #0
 80103d2:	dbf2      	blt.n	80103ba <__swhatbuf_r+0x12>
 80103d4:	9a01      	ldr	r2, [sp, #4]
 80103d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103de:	425a      	negs	r2, r3
 80103e0:	415a      	adcs	r2, r3
 80103e2:	602a      	str	r2, [r5, #0]
 80103e4:	e7ee      	b.n	80103c4 <__swhatbuf_r+0x1c>
 80103e6:	2340      	movs	r3, #64	; 0x40
 80103e8:	2000      	movs	r0, #0
 80103ea:	6023      	str	r3, [r4, #0]
 80103ec:	b016      	add	sp, #88	; 0x58
 80103ee:	bd70      	pop	{r4, r5, r6, pc}

080103f0 <__smakebuf_r>:
 80103f0:	898b      	ldrh	r3, [r1, #12]
 80103f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103f4:	079d      	lsls	r5, r3, #30
 80103f6:	4606      	mov	r6, r0
 80103f8:	460c      	mov	r4, r1
 80103fa:	d507      	bpl.n	801040c <__smakebuf_r+0x1c>
 80103fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	6123      	str	r3, [r4, #16]
 8010404:	2301      	movs	r3, #1
 8010406:	6163      	str	r3, [r4, #20]
 8010408:	b002      	add	sp, #8
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	ab01      	add	r3, sp, #4
 801040e:	466a      	mov	r2, sp
 8010410:	f7ff ffca 	bl	80103a8 <__swhatbuf_r>
 8010414:	9900      	ldr	r1, [sp, #0]
 8010416:	4605      	mov	r5, r0
 8010418:	4630      	mov	r0, r6
 801041a:	f7ff fc41 	bl	800fca0 <_malloc_r>
 801041e:	b948      	cbnz	r0, 8010434 <__smakebuf_r+0x44>
 8010420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010424:	059a      	lsls	r2, r3, #22
 8010426:	d4ef      	bmi.n	8010408 <__smakebuf_r+0x18>
 8010428:	f023 0303 	bic.w	r3, r3, #3
 801042c:	f043 0302 	orr.w	r3, r3, #2
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	e7e3      	b.n	80103fc <__smakebuf_r+0xc>
 8010434:	4b0d      	ldr	r3, [pc, #52]	; (801046c <__smakebuf_r+0x7c>)
 8010436:	62b3      	str	r3, [r6, #40]	; 0x28
 8010438:	89a3      	ldrh	r3, [r4, #12]
 801043a:	6020      	str	r0, [r4, #0]
 801043c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010440:	81a3      	strh	r3, [r4, #12]
 8010442:	9b00      	ldr	r3, [sp, #0]
 8010444:	6163      	str	r3, [r4, #20]
 8010446:	9b01      	ldr	r3, [sp, #4]
 8010448:	6120      	str	r0, [r4, #16]
 801044a:	b15b      	cbz	r3, 8010464 <__smakebuf_r+0x74>
 801044c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010450:	4630      	mov	r0, r6
 8010452:	f000 fcd7 	bl	8010e04 <_isatty_r>
 8010456:	b128      	cbz	r0, 8010464 <__smakebuf_r+0x74>
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	f023 0303 	bic.w	r3, r3, #3
 801045e:	f043 0301 	orr.w	r3, r3, #1
 8010462:	81a3      	strh	r3, [r4, #12]
 8010464:	89a0      	ldrh	r0, [r4, #12]
 8010466:	4305      	orrs	r5, r0
 8010468:	81a5      	strh	r5, [r4, #12]
 801046a:	e7cd      	b.n	8010408 <__smakebuf_r+0x18>
 801046c:	0800fa81 	.word	0x0800fa81

08010470 <__malloc_lock>:
 8010470:	4801      	ldr	r0, [pc, #4]	; (8010478 <__malloc_lock+0x8>)
 8010472:	f7ff bbfc 	b.w	800fc6e <__retarget_lock_acquire_recursive>
 8010476:	bf00      	nop
 8010478:	20004c48 	.word	0x20004c48

0801047c <__malloc_unlock>:
 801047c:	4801      	ldr	r0, [pc, #4]	; (8010484 <__malloc_unlock+0x8>)
 801047e:	f7ff bbf7 	b.w	800fc70 <__retarget_lock_release_recursive>
 8010482:	bf00      	nop
 8010484:	20004c48 	.word	0x20004c48

08010488 <_free_r>:
 8010488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801048a:	2900      	cmp	r1, #0
 801048c:	d048      	beq.n	8010520 <_free_r+0x98>
 801048e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010492:	9001      	str	r0, [sp, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	f1a1 0404 	sub.w	r4, r1, #4
 801049a:	bfb8      	it	lt
 801049c:	18e4      	addlt	r4, r4, r3
 801049e:	f7ff ffe7 	bl	8010470 <__malloc_lock>
 80104a2:	4a20      	ldr	r2, [pc, #128]	; (8010524 <_free_r+0x9c>)
 80104a4:	9801      	ldr	r0, [sp, #4]
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	4615      	mov	r5, r2
 80104aa:	b933      	cbnz	r3, 80104ba <_free_r+0x32>
 80104ac:	6063      	str	r3, [r4, #4]
 80104ae:	6014      	str	r4, [r2, #0]
 80104b0:	b003      	add	sp, #12
 80104b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104b6:	f7ff bfe1 	b.w	801047c <__malloc_unlock>
 80104ba:	42a3      	cmp	r3, r4
 80104bc:	d90b      	bls.n	80104d6 <_free_r+0x4e>
 80104be:	6821      	ldr	r1, [r4, #0]
 80104c0:	1862      	adds	r2, r4, r1
 80104c2:	4293      	cmp	r3, r2
 80104c4:	bf04      	itt	eq
 80104c6:	681a      	ldreq	r2, [r3, #0]
 80104c8:	685b      	ldreq	r3, [r3, #4]
 80104ca:	6063      	str	r3, [r4, #4]
 80104cc:	bf04      	itt	eq
 80104ce:	1852      	addeq	r2, r2, r1
 80104d0:	6022      	streq	r2, [r4, #0]
 80104d2:	602c      	str	r4, [r5, #0]
 80104d4:	e7ec      	b.n	80104b0 <_free_r+0x28>
 80104d6:	461a      	mov	r2, r3
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	b10b      	cbz	r3, 80104e0 <_free_r+0x58>
 80104dc:	42a3      	cmp	r3, r4
 80104de:	d9fa      	bls.n	80104d6 <_free_r+0x4e>
 80104e0:	6811      	ldr	r1, [r2, #0]
 80104e2:	1855      	adds	r5, r2, r1
 80104e4:	42a5      	cmp	r5, r4
 80104e6:	d10b      	bne.n	8010500 <_free_r+0x78>
 80104e8:	6824      	ldr	r4, [r4, #0]
 80104ea:	4421      	add	r1, r4
 80104ec:	1854      	adds	r4, r2, r1
 80104ee:	42a3      	cmp	r3, r4
 80104f0:	6011      	str	r1, [r2, #0]
 80104f2:	d1dd      	bne.n	80104b0 <_free_r+0x28>
 80104f4:	681c      	ldr	r4, [r3, #0]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	6053      	str	r3, [r2, #4]
 80104fa:	4421      	add	r1, r4
 80104fc:	6011      	str	r1, [r2, #0]
 80104fe:	e7d7      	b.n	80104b0 <_free_r+0x28>
 8010500:	d902      	bls.n	8010508 <_free_r+0x80>
 8010502:	230c      	movs	r3, #12
 8010504:	6003      	str	r3, [r0, #0]
 8010506:	e7d3      	b.n	80104b0 <_free_r+0x28>
 8010508:	6825      	ldr	r5, [r4, #0]
 801050a:	1961      	adds	r1, r4, r5
 801050c:	428b      	cmp	r3, r1
 801050e:	bf04      	itt	eq
 8010510:	6819      	ldreq	r1, [r3, #0]
 8010512:	685b      	ldreq	r3, [r3, #4]
 8010514:	6063      	str	r3, [r4, #4]
 8010516:	bf04      	itt	eq
 8010518:	1949      	addeq	r1, r1, r5
 801051a:	6021      	streq	r1, [r4, #0]
 801051c:	6054      	str	r4, [r2, #4]
 801051e:	e7c7      	b.n	80104b0 <_free_r+0x28>
 8010520:	b003      	add	sp, #12
 8010522:	bd30      	pop	{r4, r5, pc}
 8010524:	20004370 	.word	0x20004370

08010528 <__ssputs_r>:
 8010528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801052c:	688e      	ldr	r6, [r1, #8]
 801052e:	429e      	cmp	r6, r3
 8010530:	4682      	mov	sl, r0
 8010532:	460c      	mov	r4, r1
 8010534:	4690      	mov	r8, r2
 8010536:	461f      	mov	r7, r3
 8010538:	d838      	bhi.n	80105ac <__ssputs_r+0x84>
 801053a:	898a      	ldrh	r2, [r1, #12]
 801053c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010540:	d032      	beq.n	80105a8 <__ssputs_r+0x80>
 8010542:	6825      	ldr	r5, [r4, #0]
 8010544:	6909      	ldr	r1, [r1, #16]
 8010546:	eba5 0901 	sub.w	r9, r5, r1
 801054a:	6965      	ldr	r5, [r4, #20]
 801054c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010554:	3301      	adds	r3, #1
 8010556:	444b      	add	r3, r9
 8010558:	106d      	asrs	r5, r5, #1
 801055a:	429d      	cmp	r5, r3
 801055c:	bf38      	it	cc
 801055e:	461d      	movcc	r5, r3
 8010560:	0553      	lsls	r3, r2, #21
 8010562:	d531      	bpl.n	80105c8 <__ssputs_r+0xa0>
 8010564:	4629      	mov	r1, r5
 8010566:	f7ff fb9b 	bl	800fca0 <_malloc_r>
 801056a:	4606      	mov	r6, r0
 801056c:	b950      	cbnz	r0, 8010584 <__ssputs_r+0x5c>
 801056e:	230c      	movs	r3, #12
 8010570:	f8ca 3000 	str.w	r3, [sl]
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801057a:	81a3      	strh	r3, [r4, #12]
 801057c:	f04f 30ff 	mov.w	r0, #4294967295
 8010580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010584:	6921      	ldr	r1, [r4, #16]
 8010586:	464a      	mov	r2, r9
 8010588:	f7ff fb73 	bl	800fc72 <memcpy>
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010596:	81a3      	strh	r3, [r4, #12]
 8010598:	6126      	str	r6, [r4, #16]
 801059a:	6165      	str	r5, [r4, #20]
 801059c:	444e      	add	r6, r9
 801059e:	eba5 0509 	sub.w	r5, r5, r9
 80105a2:	6026      	str	r6, [r4, #0]
 80105a4:	60a5      	str	r5, [r4, #8]
 80105a6:	463e      	mov	r6, r7
 80105a8:	42be      	cmp	r6, r7
 80105aa:	d900      	bls.n	80105ae <__ssputs_r+0x86>
 80105ac:	463e      	mov	r6, r7
 80105ae:	4632      	mov	r2, r6
 80105b0:	6820      	ldr	r0, [r4, #0]
 80105b2:	4641      	mov	r1, r8
 80105b4:	f000 fc36 	bl	8010e24 <memmove>
 80105b8:	68a3      	ldr	r3, [r4, #8]
 80105ba:	6822      	ldr	r2, [r4, #0]
 80105bc:	1b9b      	subs	r3, r3, r6
 80105be:	4432      	add	r2, r6
 80105c0:	60a3      	str	r3, [r4, #8]
 80105c2:	6022      	str	r2, [r4, #0]
 80105c4:	2000      	movs	r0, #0
 80105c6:	e7db      	b.n	8010580 <__ssputs_r+0x58>
 80105c8:	462a      	mov	r2, r5
 80105ca:	f000 fc45 	bl	8010e58 <_realloc_r>
 80105ce:	4606      	mov	r6, r0
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d1e1      	bne.n	8010598 <__ssputs_r+0x70>
 80105d4:	6921      	ldr	r1, [r4, #16]
 80105d6:	4650      	mov	r0, sl
 80105d8:	f7ff ff56 	bl	8010488 <_free_r>
 80105dc:	e7c7      	b.n	801056e <__ssputs_r+0x46>
	...

080105e0 <_svfiprintf_r>:
 80105e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	4698      	mov	r8, r3
 80105e6:	898b      	ldrh	r3, [r1, #12]
 80105e8:	061b      	lsls	r3, r3, #24
 80105ea:	b09d      	sub	sp, #116	; 0x74
 80105ec:	4607      	mov	r7, r0
 80105ee:	460d      	mov	r5, r1
 80105f0:	4614      	mov	r4, r2
 80105f2:	d50e      	bpl.n	8010612 <_svfiprintf_r+0x32>
 80105f4:	690b      	ldr	r3, [r1, #16]
 80105f6:	b963      	cbnz	r3, 8010612 <_svfiprintf_r+0x32>
 80105f8:	2140      	movs	r1, #64	; 0x40
 80105fa:	f7ff fb51 	bl	800fca0 <_malloc_r>
 80105fe:	6028      	str	r0, [r5, #0]
 8010600:	6128      	str	r0, [r5, #16]
 8010602:	b920      	cbnz	r0, 801060e <_svfiprintf_r+0x2e>
 8010604:	230c      	movs	r3, #12
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	f04f 30ff 	mov.w	r0, #4294967295
 801060c:	e0d1      	b.n	80107b2 <_svfiprintf_r+0x1d2>
 801060e:	2340      	movs	r3, #64	; 0x40
 8010610:	616b      	str	r3, [r5, #20]
 8010612:	2300      	movs	r3, #0
 8010614:	9309      	str	r3, [sp, #36]	; 0x24
 8010616:	2320      	movs	r3, #32
 8010618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801061c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010620:	2330      	movs	r3, #48	; 0x30
 8010622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107cc <_svfiprintf_r+0x1ec>
 8010626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801062a:	f04f 0901 	mov.w	r9, #1
 801062e:	4623      	mov	r3, r4
 8010630:	469a      	mov	sl, r3
 8010632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010636:	b10a      	cbz	r2, 801063c <_svfiprintf_r+0x5c>
 8010638:	2a25      	cmp	r2, #37	; 0x25
 801063a:	d1f9      	bne.n	8010630 <_svfiprintf_r+0x50>
 801063c:	ebba 0b04 	subs.w	fp, sl, r4
 8010640:	d00b      	beq.n	801065a <_svfiprintf_r+0x7a>
 8010642:	465b      	mov	r3, fp
 8010644:	4622      	mov	r2, r4
 8010646:	4629      	mov	r1, r5
 8010648:	4638      	mov	r0, r7
 801064a:	f7ff ff6d 	bl	8010528 <__ssputs_r>
 801064e:	3001      	adds	r0, #1
 8010650:	f000 80aa 	beq.w	80107a8 <_svfiprintf_r+0x1c8>
 8010654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010656:	445a      	add	r2, fp
 8010658:	9209      	str	r2, [sp, #36]	; 0x24
 801065a:	f89a 3000 	ldrb.w	r3, [sl]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f000 80a2 	beq.w	80107a8 <_svfiprintf_r+0x1c8>
 8010664:	2300      	movs	r3, #0
 8010666:	f04f 32ff 	mov.w	r2, #4294967295
 801066a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801066e:	f10a 0a01 	add.w	sl, sl, #1
 8010672:	9304      	str	r3, [sp, #16]
 8010674:	9307      	str	r3, [sp, #28]
 8010676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801067a:	931a      	str	r3, [sp, #104]	; 0x68
 801067c:	4654      	mov	r4, sl
 801067e:	2205      	movs	r2, #5
 8010680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010684:	4851      	ldr	r0, [pc, #324]	; (80107cc <_svfiprintf_r+0x1ec>)
 8010686:	f7ef fdc3 	bl	8000210 <memchr>
 801068a:	9a04      	ldr	r2, [sp, #16]
 801068c:	b9d8      	cbnz	r0, 80106c6 <_svfiprintf_r+0xe6>
 801068e:	06d0      	lsls	r0, r2, #27
 8010690:	bf44      	itt	mi
 8010692:	2320      	movmi	r3, #32
 8010694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010698:	0711      	lsls	r1, r2, #28
 801069a:	bf44      	itt	mi
 801069c:	232b      	movmi	r3, #43	; 0x2b
 801069e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106a2:	f89a 3000 	ldrb.w	r3, [sl]
 80106a6:	2b2a      	cmp	r3, #42	; 0x2a
 80106a8:	d015      	beq.n	80106d6 <_svfiprintf_r+0xf6>
 80106aa:	9a07      	ldr	r2, [sp, #28]
 80106ac:	4654      	mov	r4, sl
 80106ae:	2000      	movs	r0, #0
 80106b0:	f04f 0c0a 	mov.w	ip, #10
 80106b4:	4621      	mov	r1, r4
 80106b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106ba:	3b30      	subs	r3, #48	; 0x30
 80106bc:	2b09      	cmp	r3, #9
 80106be:	d94e      	bls.n	801075e <_svfiprintf_r+0x17e>
 80106c0:	b1b0      	cbz	r0, 80106f0 <_svfiprintf_r+0x110>
 80106c2:	9207      	str	r2, [sp, #28]
 80106c4:	e014      	b.n	80106f0 <_svfiprintf_r+0x110>
 80106c6:	eba0 0308 	sub.w	r3, r0, r8
 80106ca:	fa09 f303 	lsl.w	r3, r9, r3
 80106ce:	4313      	orrs	r3, r2
 80106d0:	9304      	str	r3, [sp, #16]
 80106d2:	46a2      	mov	sl, r4
 80106d4:	e7d2      	b.n	801067c <_svfiprintf_r+0x9c>
 80106d6:	9b03      	ldr	r3, [sp, #12]
 80106d8:	1d19      	adds	r1, r3, #4
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	9103      	str	r1, [sp, #12]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	bfbb      	ittet	lt
 80106e2:	425b      	neglt	r3, r3
 80106e4:	f042 0202 	orrlt.w	r2, r2, #2
 80106e8:	9307      	strge	r3, [sp, #28]
 80106ea:	9307      	strlt	r3, [sp, #28]
 80106ec:	bfb8      	it	lt
 80106ee:	9204      	strlt	r2, [sp, #16]
 80106f0:	7823      	ldrb	r3, [r4, #0]
 80106f2:	2b2e      	cmp	r3, #46	; 0x2e
 80106f4:	d10c      	bne.n	8010710 <_svfiprintf_r+0x130>
 80106f6:	7863      	ldrb	r3, [r4, #1]
 80106f8:	2b2a      	cmp	r3, #42	; 0x2a
 80106fa:	d135      	bne.n	8010768 <_svfiprintf_r+0x188>
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	1d1a      	adds	r2, r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	9203      	str	r2, [sp, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfb8      	it	lt
 8010708:	f04f 33ff 	movlt.w	r3, #4294967295
 801070c:	3402      	adds	r4, #2
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80107dc <_svfiprintf_r+0x1fc>
 8010714:	7821      	ldrb	r1, [r4, #0]
 8010716:	2203      	movs	r2, #3
 8010718:	4650      	mov	r0, sl
 801071a:	f7ef fd79 	bl	8000210 <memchr>
 801071e:	b140      	cbz	r0, 8010732 <_svfiprintf_r+0x152>
 8010720:	2340      	movs	r3, #64	; 0x40
 8010722:	eba0 000a 	sub.w	r0, r0, sl
 8010726:	fa03 f000 	lsl.w	r0, r3, r0
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	4303      	orrs	r3, r0
 801072e:	3401      	adds	r4, #1
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010736:	4826      	ldr	r0, [pc, #152]	; (80107d0 <_svfiprintf_r+0x1f0>)
 8010738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801073c:	2206      	movs	r2, #6
 801073e:	f7ef fd67 	bl	8000210 <memchr>
 8010742:	2800      	cmp	r0, #0
 8010744:	d038      	beq.n	80107b8 <_svfiprintf_r+0x1d8>
 8010746:	4b23      	ldr	r3, [pc, #140]	; (80107d4 <_svfiprintf_r+0x1f4>)
 8010748:	bb1b      	cbnz	r3, 8010792 <_svfiprintf_r+0x1b2>
 801074a:	9b03      	ldr	r3, [sp, #12]
 801074c:	3307      	adds	r3, #7
 801074e:	f023 0307 	bic.w	r3, r3, #7
 8010752:	3308      	adds	r3, #8
 8010754:	9303      	str	r3, [sp, #12]
 8010756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010758:	4433      	add	r3, r6
 801075a:	9309      	str	r3, [sp, #36]	; 0x24
 801075c:	e767      	b.n	801062e <_svfiprintf_r+0x4e>
 801075e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010762:	460c      	mov	r4, r1
 8010764:	2001      	movs	r0, #1
 8010766:	e7a5      	b.n	80106b4 <_svfiprintf_r+0xd4>
 8010768:	2300      	movs	r3, #0
 801076a:	3401      	adds	r4, #1
 801076c:	9305      	str	r3, [sp, #20]
 801076e:	4619      	mov	r1, r3
 8010770:	f04f 0c0a 	mov.w	ip, #10
 8010774:	4620      	mov	r0, r4
 8010776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801077a:	3a30      	subs	r2, #48	; 0x30
 801077c:	2a09      	cmp	r2, #9
 801077e:	d903      	bls.n	8010788 <_svfiprintf_r+0x1a8>
 8010780:	2b00      	cmp	r3, #0
 8010782:	d0c5      	beq.n	8010710 <_svfiprintf_r+0x130>
 8010784:	9105      	str	r1, [sp, #20]
 8010786:	e7c3      	b.n	8010710 <_svfiprintf_r+0x130>
 8010788:	fb0c 2101 	mla	r1, ip, r1, r2
 801078c:	4604      	mov	r4, r0
 801078e:	2301      	movs	r3, #1
 8010790:	e7f0      	b.n	8010774 <_svfiprintf_r+0x194>
 8010792:	ab03      	add	r3, sp, #12
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	462a      	mov	r2, r5
 8010798:	4b0f      	ldr	r3, [pc, #60]	; (80107d8 <_svfiprintf_r+0x1f8>)
 801079a:	a904      	add	r1, sp, #16
 801079c:	4638      	mov	r0, r7
 801079e:	f3af 8000 	nop.w
 80107a2:	1c42      	adds	r2, r0, #1
 80107a4:	4606      	mov	r6, r0
 80107a6:	d1d6      	bne.n	8010756 <_svfiprintf_r+0x176>
 80107a8:	89ab      	ldrh	r3, [r5, #12]
 80107aa:	065b      	lsls	r3, r3, #25
 80107ac:	f53f af2c 	bmi.w	8010608 <_svfiprintf_r+0x28>
 80107b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107b2:	b01d      	add	sp, #116	; 0x74
 80107b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	462a      	mov	r2, r5
 80107be:	4b06      	ldr	r3, [pc, #24]	; (80107d8 <_svfiprintf_r+0x1f8>)
 80107c0:	a904      	add	r1, sp, #16
 80107c2:	4638      	mov	r0, r7
 80107c4:	f000 f9d4 	bl	8010b70 <_printf_i>
 80107c8:	e7eb      	b.n	80107a2 <_svfiprintf_r+0x1c2>
 80107ca:	bf00      	nop
 80107cc:	080118e0 	.word	0x080118e0
 80107d0:	080118ea 	.word	0x080118ea
 80107d4:	00000000 	.word	0x00000000
 80107d8:	08010529 	.word	0x08010529
 80107dc:	080118e6 	.word	0x080118e6

080107e0 <__sfputc_r>:
 80107e0:	6893      	ldr	r3, [r2, #8]
 80107e2:	3b01      	subs	r3, #1
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	b410      	push	{r4}
 80107e8:	6093      	str	r3, [r2, #8]
 80107ea:	da08      	bge.n	80107fe <__sfputc_r+0x1e>
 80107ec:	6994      	ldr	r4, [r2, #24]
 80107ee:	42a3      	cmp	r3, r4
 80107f0:	db01      	blt.n	80107f6 <__sfputc_r+0x16>
 80107f2:	290a      	cmp	r1, #10
 80107f4:	d103      	bne.n	80107fe <__sfputc_r+0x1e>
 80107f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107fa:	f7ff bc1f 	b.w	801003c <__swbuf_r>
 80107fe:	6813      	ldr	r3, [r2, #0]
 8010800:	1c58      	adds	r0, r3, #1
 8010802:	6010      	str	r0, [r2, #0]
 8010804:	7019      	strb	r1, [r3, #0]
 8010806:	4608      	mov	r0, r1
 8010808:	f85d 4b04 	ldr.w	r4, [sp], #4
 801080c:	4770      	bx	lr

0801080e <__sfputs_r>:
 801080e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010810:	4606      	mov	r6, r0
 8010812:	460f      	mov	r7, r1
 8010814:	4614      	mov	r4, r2
 8010816:	18d5      	adds	r5, r2, r3
 8010818:	42ac      	cmp	r4, r5
 801081a:	d101      	bne.n	8010820 <__sfputs_r+0x12>
 801081c:	2000      	movs	r0, #0
 801081e:	e007      	b.n	8010830 <__sfputs_r+0x22>
 8010820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010824:	463a      	mov	r2, r7
 8010826:	4630      	mov	r0, r6
 8010828:	f7ff ffda 	bl	80107e0 <__sfputc_r>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d1f3      	bne.n	8010818 <__sfputs_r+0xa>
 8010830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010834 <_vfiprintf_r>:
 8010834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010838:	460d      	mov	r5, r1
 801083a:	b09d      	sub	sp, #116	; 0x74
 801083c:	4614      	mov	r4, r2
 801083e:	4698      	mov	r8, r3
 8010840:	4606      	mov	r6, r0
 8010842:	b118      	cbz	r0, 801084c <_vfiprintf_r+0x18>
 8010844:	6983      	ldr	r3, [r0, #24]
 8010846:	b90b      	cbnz	r3, 801084c <_vfiprintf_r+0x18>
 8010848:	f7ff f94e 	bl	800fae8 <__sinit>
 801084c:	4b89      	ldr	r3, [pc, #548]	; (8010a74 <_vfiprintf_r+0x240>)
 801084e:	429d      	cmp	r5, r3
 8010850:	d11b      	bne.n	801088a <_vfiprintf_r+0x56>
 8010852:	6875      	ldr	r5, [r6, #4]
 8010854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010856:	07d9      	lsls	r1, r3, #31
 8010858:	d405      	bmi.n	8010866 <_vfiprintf_r+0x32>
 801085a:	89ab      	ldrh	r3, [r5, #12]
 801085c:	059a      	lsls	r2, r3, #22
 801085e:	d402      	bmi.n	8010866 <_vfiprintf_r+0x32>
 8010860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010862:	f7ff fa04 	bl	800fc6e <__retarget_lock_acquire_recursive>
 8010866:	89ab      	ldrh	r3, [r5, #12]
 8010868:	071b      	lsls	r3, r3, #28
 801086a:	d501      	bpl.n	8010870 <_vfiprintf_r+0x3c>
 801086c:	692b      	ldr	r3, [r5, #16]
 801086e:	b9eb      	cbnz	r3, 80108ac <_vfiprintf_r+0x78>
 8010870:	4629      	mov	r1, r5
 8010872:	4630      	mov	r0, r6
 8010874:	f7ff fc46 	bl	8010104 <__swsetup_r>
 8010878:	b1c0      	cbz	r0, 80108ac <_vfiprintf_r+0x78>
 801087a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801087c:	07dc      	lsls	r4, r3, #31
 801087e:	d50e      	bpl.n	801089e <_vfiprintf_r+0x6a>
 8010880:	f04f 30ff 	mov.w	r0, #4294967295
 8010884:	b01d      	add	sp, #116	; 0x74
 8010886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088a:	4b7b      	ldr	r3, [pc, #492]	; (8010a78 <_vfiprintf_r+0x244>)
 801088c:	429d      	cmp	r5, r3
 801088e:	d101      	bne.n	8010894 <_vfiprintf_r+0x60>
 8010890:	68b5      	ldr	r5, [r6, #8]
 8010892:	e7df      	b.n	8010854 <_vfiprintf_r+0x20>
 8010894:	4b79      	ldr	r3, [pc, #484]	; (8010a7c <_vfiprintf_r+0x248>)
 8010896:	429d      	cmp	r5, r3
 8010898:	bf08      	it	eq
 801089a:	68f5      	ldreq	r5, [r6, #12]
 801089c:	e7da      	b.n	8010854 <_vfiprintf_r+0x20>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	0598      	lsls	r0, r3, #22
 80108a2:	d4ed      	bmi.n	8010880 <_vfiprintf_r+0x4c>
 80108a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108a6:	f7ff f9e3 	bl	800fc70 <__retarget_lock_release_recursive>
 80108aa:	e7e9      	b.n	8010880 <_vfiprintf_r+0x4c>
 80108ac:	2300      	movs	r3, #0
 80108ae:	9309      	str	r3, [sp, #36]	; 0x24
 80108b0:	2320      	movs	r3, #32
 80108b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80108ba:	2330      	movs	r3, #48	; 0x30
 80108bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a80 <_vfiprintf_r+0x24c>
 80108c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108c4:	f04f 0901 	mov.w	r9, #1
 80108c8:	4623      	mov	r3, r4
 80108ca:	469a      	mov	sl, r3
 80108cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108d0:	b10a      	cbz	r2, 80108d6 <_vfiprintf_r+0xa2>
 80108d2:	2a25      	cmp	r2, #37	; 0x25
 80108d4:	d1f9      	bne.n	80108ca <_vfiprintf_r+0x96>
 80108d6:	ebba 0b04 	subs.w	fp, sl, r4
 80108da:	d00b      	beq.n	80108f4 <_vfiprintf_r+0xc0>
 80108dc:	465b      	mov	r3, fp
 80108de:	4622      	mov	r2, r4
 80108e0:	4629      	mov	r1, r5
 80108e2:	4630      	mov	r0, r6
 80108e4:	f7ff ff93 	bl	801080e <__sfputs_r>
 80108e8:	3001      	adds	r0, #1
 80108ea:	f000 80aa 	beq.w	8010a42 <_vfiprintf_r+0x20e>
 80108ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108f0:	445a      	add	r2, fp
 80108f2:	9209      	str	r2, [sp, #36]	; 0x24
 80108f4:	f89a 3000 	ldrb.w	r3, [sl]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f000 80a2 	beq.w	8010a42 <_vfiprintf_r+0x20e>
 80108fe:	2300      	movs	r3, #0
 8010900:	f04f 32ff 	mov.w	r2, #4294967295
 8010904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010908:	f10a 0a01 	add.w	sl, sl, #1
 801090c:	9304      	str	r3, [sp, #16]
 801090e:	9307      	str	r3, [sp, #28]
 8010910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010914:	931a      	str	r3, [sp, #104]	; 0x68
 8010916:	4654      	mov	r4, sl
 8010918:	2205      	movs	r2, #5
 801091a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801091e:	4858      	ldr	r0, [pc, #352]	; (8010a80 <_vfiprintf_r+0x24c>)
 8010920:	f7ef fc76 	bl	8000210 <memchr>
 8010924:	9a04      	ldr	r2, [sp, #16]
 8010926:	b9d8      	cbnz	r0, 8010960 <_vfiprintf_r+0x12c>
 8010928:	06d1      	lsls	r1, r2, #27
 801092a:	bf44      	itt	mi
 801092c:	2320      	movmi	r3, #32
 801092e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010932:	0713      	lsls	r3, r2, #28
 8010934:	bf44      	itt	mi
 8010936:	232b      	movmi	r3, #43	; 0x2b
 8010938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801093c:	f89a 3000 	ldrb.w	r3, [sl]
 8010940:	2b2a      	cmp	r3, #42	; 0x2a
 8010942:	d015      	beq.n	8010970 <_vfiprintf_r+0x13c>
 8010944:	9a07      	ldr	r2, [sp, #28]
 8010946:	4654      	mov	r4, sl
 8010948:	2000      	movs	r0, #0
 801094a:	f04f 0c0a 	mov.w	ip, #10
 801094e:	4621      	mov	r1, r4
 8010950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010954:	3b30      	subs	r3, #48	; 0x30
 8010956:	2b09      	cmp	r3, #9
 8010958:	d94e      	bls.n	80109f8 <_vfiprintf_r+0x1c4>
 801095a:	b1b0      	cbz	r0, 801098a <_vfiprintf_r+0x156>
 801095c:	9207      	str	r2, [sp, #28]
 801095e:	e014      	b.n	801098a <_vfiprintf_r+0x156>
 8010960:	eba0 0308 	sub.w	r3, r0, r8
 8010964:	fa09 f303 	lsl.w	r3, r9, r3
 8010968:	4313      	orrs	r3, r2
 801096a:	9304      	str	r3, [sp, #16]
 801096c:	46a2      	mov	sl, r4
 801096e:	e7d2      	b.n	8010916 <_vfiprintf_r+0xe2>
 8010970:	9b03      	ldr	r3, [sp, #12]
 8010972:	1d19      	adds	r1, r3, #4
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	9103      	str	r1, [sp, #12]
 8010978:	2b00      	cmp	r3, #0
 801097a:	bfbb      	ittet	lt
 801097c:	425b      	neglt	r3, r3
 801097e:	f042 0202 	orrlt.w	r2, r2, #2
 8010982:	9307      	strge	r3, [sp, #28]
 8010984:	9307      	strlt	r3, [sp, #28]
 8010986:	bfb8      	it	lt
 8010988:	9204      	strlt	r2, [sp, #16]
 801098a:	7823      	ldrb	r3, [r4, #0]
 801098c:	2b2e      	cmp	r3, #46	; 0x2e
 801098e:	d10c      	bne.n	80109aa <_vfiprintf_r+0x176>
 8010990:	7863      	ldrb	r3, [r4, #1]
 8010992:	2b2a      	cmp	r3, #42	; 0x2a
 8010994:	d135      	bne.n	8010a02 <_vfiprintf_r+0x1ce>
 8010996:	9b03      	ldr	r3, [sp, #12]
 8010998:	1d1a      	adds	r2, r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	9203      	str	r2, [sp, #12]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	bfb8      	it	lt
 80109a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80109a6:	3402      	adds	r4, #2
 80109a8:	9305      	str	r3, [sp, #20]
 80109aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a90 <_vfiprintf_r+0x25c>
 80109ae:	7821      	ldrb	r1, [r4, #0]
 80109b0:	2203      	movs	r2, #3
 80109b2:	4650      	mov	r0, sl
 80109b4:	f7ef fc2c 	bl	8000210 <memchr>
 80109b8:	b140      	cbz	r0, 80109cc <_vfiprintf_r+0x198>
 80109ba:	2340      	movs	r3, #64	; 0x40
 80109bc:	eba0 000a 	sub.w	r0, r0, sl
 80109c0:	fa03 f000 	lsl.w	r0, r3, r0
 80109c4:	9b04      	ldr	r3, [sp, #16]
 80109c6:	4303      	orrs	r3, r0
 80109c8:	3401      	adds	r4, #1
 80109ca:	9304      	str	r3, [sp, #16]
 80109cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109d0:	482c      	ldr	r0, [pc, #176]	; (8010a84 <_vfiprintf_r+0x250>)
 80109d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109d6:	2206      	movs	r2, #6
 80109d8:	f7ef fc1a 	bl	8000210 <memchr>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d03f      	beq.n	8010a60 <_vfiprintf_r+0x22c>
 80109e0:	4b29      	ldr	r3, [pc, #164]	; (8010a88 <_vfiprintf_r+0x254>)
 80109e2:	bb1b      	cbnz	r3, 8010a2c <_vfiprintf_r+0x1f8>
 80109e4:	9b03      	ldr	r3, [sp, #12]
 80109e6:	3307      	adds	r3, #7
 80109e8:	f023 0307 	bic.w	r3, r3, #7
 80109ec:	3308      	adds	r3, #8
 80109ee:	9303      	str	r3, [sp, #12]
 80109f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f2:	443b      	add	r3, r7
 80109f4:	9309      	str	r3, [sp, #36]	; 0x24
 80109f6:	e767      	b.n	80108c8 <_vfiprintf_r+0x94>
 80109f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80109fc:	460c      	mov	r4, r1
 80109fe:	2001      	movs	r0, #1
 8010a00:	e7a5      	b.n	801094e <_vfiprintf_r+0x11a>
 8010a02:	2300      	movs	r3, #0
 8010a04:	3401      	adds	r4, #1
 8010a06:	9305      	str	r3, [sp, #20]
 8010a08:	4619      	mov	r1, r3
 8010a0a:	f04f 0c0a 	mov.w	ip, #10
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a14:	3a30      	subs	r2, #48	; 0x30
 8010a16:	2a09      	cmp	r2, #9
 8010a18:	d903      	bls.n	8010a22 <_vfiprintf_r+0x1ee>
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d0c5      	beq.n	80109aa <_vfiprintf_r+0x176>
 8010a1e:	9105      	str	r1, [sp, #20]
 8010a20:	e7c3      	b.n	80109aa <_vfiprintf_r+0x176>
 8010a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a26:	4604      	mov	r4, r0
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e7f0      	b.n	8010a0e <_vfiprintf_r+0x1da>
 8010a2c:	ab03      	add	r3, sp, #12
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	462a      	mov	r2, r5
 8010a32:	4b16      	ldr	r3, [pc, #88]	; (8010a8c <_vfiprintf_r+0x258>)
 8010a34:	a904      	add	r1, sp, #16
 8010a36:	4630      	mov	r0, r6
 8010a38:	f3af 8000 	nop.w
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	1c78      	adds	r0, r7, #1
 8010a40:	d1d6      	bne.n	80109f0 <_vfiprintf_r+0x1bc>
 8010a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a44:	07d9      	lsls	r1, r3, #31
 8010a46:	d405      	bmi.n	8010a54 <_vfiprintf_r+0x220>
 8010a48:	89ab      	ldrh	r3, [r5, #12]
 8010a4a:	059a      	lsls	r2, r3, #22
 8010a4c:	d402      	bmi.n	8010a54 <_vfiprintf_r+0x220>
 8010a4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a50:	f7ff f90e 	bl	800fc70 <__retarget_lock_release_recursive>
 8010a54:	89ab      	ldrh	r3, [r5, #12]
 8010a56:	065b      	lsls	r3, r3, #25
 8010a58:	f53f af12 	bmi.w	8010880 <_vfiprintf_r+0x4c>
 8010a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a5e:	e711      	b.n	8010884 <_vfiprintf_r+0x50>
 8010a60:	ab03      	add	r3, sp, #12
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	462a      	mov	r2, r5
 8010a66:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <_vfiprintf_r+0x258>)
 8010a68:	a904      	add	r1, sp, #16
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	f000 f880 	bl	8010b70 <_printf_i>
 8010a70:	e7e4      	b.n	8010a3c <_vfiprintf_r+0x208>
 8010a72:	bf00      	nop
 8010a74:	0801189c 	.word	0x0801189c
 8010a78:	080118bc 	.word	0x080118bc
 8010a7c:	0801187c 	.word	0x0801187c
 8010a80:	080118e0 	.word	0x080118e0
 8010a84:	080118ea 	.word	0x080118ea
 8010a88:	00000000 	.word	0x00000000
 8010a8c:	0801080f 	.word	0x0801080f
 8010a90:	080118e6 	.word	0x080118e6

08010a94 <_printf_common>:
 8010a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a98:	4616      	mov	r6, r2
 8010a9a:	4699      	mov	r9, r3
 8010a9c:	688a      	ldr	r2, [r1, #8]
 8010a9e:	690b      	ldr	r3, [r1, #16]
 8010aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	bfb8      	it	lt
 8010aa8:	4613      	movlt	r3, r2
 8010aaa:	6033      	str	r3, [r6, #0]
 8010aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ab0:	4607      	mov	r7, r0
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	b10a      	cbz	r2, 8010aba <_printf_common+0x26>
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	6033      	str	r3, [r6, #0]
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	0699      	lsls	r1, r3, #26
 8010abe:	bf42      	ittt	mi
 8010ac0:	6833      	ldrmi	r3, [r6, #0]
 8010ac2:	3302      	addmi	r3, #2
 8010ac4:	6033      	strmi	r3, [r6, #0]
 8010ac6:	6825      	ldr	r5, [r4, #0]
 8010ac8:	f015 0506 	ands.w	r5, r5, #6
 8010acc:	d106      	bne.n	8010adc <_printf_common+0x48>
 8010ace:	f104 0a19 	add.w	sl, r4, #25
 8010ad2:	68e3      	ldr	r3, [r4, #12]
 8010ad4:	6832      	ldr	r2, [r6, #0]
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	42ab      	cmp	r3, r5
 8010ada:	dc26      	bgt.n	8010b2a <_printf_common+0x96>
 8010adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ae0:	1e13      	subs	r3, r2, #0
 8010ae2:	6822      	ldr	r2, [r4, #0]
 8010ae4:	bf18      	it	ne
 8010ae6:	2301      	movne	r3, #1
 8010ae8:	0692      	lsls	r2, r2, #26
 8010aea:	d42b      	bmi.n	8010b44 <_printf_common+0xb0>
 8010aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010af0:	4649      	mov	r1, r9
 8010af2:	4638      	mov	r0, r7
 8010af4:	47c0      	blx	r8
 8010af6:	3001      	adds	r0, #1
 8010af8:	d01e      	beq.n	8010b38 <_printf_common+0xa4>
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	68e5      	ldr	r5, [r4, #12]
 8010afe:	6832      	ldr	r2, [r6, #0]
 8010b00:	f003 0306 	and.w	r3, r3, #6
 8010b04:	2b04      	cmp	r3, #4
 8010b06:	bf08      	it	eq
 8010b08:	1aad      	subeq	r5, r5, r2
 8010b0a:	68a3      	ldr	r3, [r4, #8]
 8010b0c:	6922      	ldr	r2, [r4, #16]
 8010b0e:	bf0c      	ite	eq
 8010b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b14:	2500      	movne	r5, #0
 8010b16:	4293      	cmp	r3, r2
 8010b18:	bfc4      	itt	gt
 8010b1a:	1a9b      	subgt	r3, r3, r2
 8010b1c:	18ed      	addgt	r5, r5, r3
 8010b1e:	2600      	movs	r6, #0
 8010b20:	341a      	adds	r4, #26
 8010b22:	42b5      	cmp	r5, r6
 8010b24:	d11a      	bne.n	8010b5c <_printf_common+0xc8>
 8010b26:	2000      	movs	r0, #0
 8010b28:	e008      	b.n	8010b3c <_printf_common+0xa8>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	4649      	mov	r1, r9
 8010b30:	4638      	mov	r0, r7
 8010b32:	47c0      	blx	r8
 8010b34:	3001      	adds	r0, #1
 8010b36:	d103      	bne.n	8010b40 <_printf_common+0xac>
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b40:	3501      	adds	r5, #1
 8010b42:	e7c6      	b.n	8010ad2 <_printf_common+0x3e>
 8010b44:	18e1      	adds	r1, r4, r3
 8010b46:	1c5a      	adds	r2, r3, #1
 8010b48:	2030      	movs	r0, #48	; 0x30
 8010b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b4e:	4422      	add	r2, r4
 8010b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b58:	3302      	adds	r3, #2
 8010b5a:	e7c7      	b.n	8010aec <_printf_common+0x58>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	4622      	mov	r2, r4
 8010b60:	4649      	mov	r1, r9
 8010b62:	4638      	mov	r0, r7
 8010b64:	47c0      	blx	r8
 8010b66:	3001      	adds	r0, #1
 8010b68:	d0e6      	beq.n	8010b38 <_printf_common+0xa4>
 8010b6a:	3601      	adds	r6, #1
 8010b6c:	e7d9      	b.n	8010b22 <_printf_common+0x8e>
	...

08010b70 <_printf_i>:
 8010b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b74:	460c      	mov	r4, r1
 8010b76:	4691      	mov	r9, r2
 8010b78:	7e27      	ldrb	r7, [r4, #24]
 8010b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b7c:	2f78      	cmp	r7, #120	; 0x78
 8010b7e:	4680      	mov	r8, r0
 8010b80:	469a      	mov	sl, r3
 8010b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b86:	d807      	bhi.n	8010b98 <_printf_i+0x28>
 8010b88:	2f62      	cmp	r7, #98	; 0x62
 8010b8a:	d80a      	bhi.n	8010ba2 <_printf_i+0x32>
 8010b8c:	2f00      	cmp	r7, #0
 8010b8e:	f000 80d8 	beq.w	8010d42 <_printf_i+0x1d2>
 8010b92:	2f58      	cmp	r7, #88	; 0x58
 8010b94:	f000 80a3 	beq.w	8010cde <_printf_i+0x16e>
 8010b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ba0:	e03a      	b.n	8010c18 <_printf_i+0xa8>
 8010ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ba6:	2b15      	cmp	r3, #21
 8010ba8:	d8f6      	bhi.n	8010b98 <_printf_i+0x28>
 8010baa:	a001      	add	r0, pc, #4	; (adr r0, 8010bb0 <_printf_i+0x40>)
 8010bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010bb0:	08010c09 	.word	0x08010c09
 8010bb4:	08010c1d 	.word	0x08010c1d
 8010bb8:	08010b99 	.word	0x08010b99
 8010bbc:	08010b99 	.word	0x08010b99
 8010bc0:	08010b99 	.word	0x08010b99
 8010bc4:	08010b99 	.word	0x08010b99
 8010bc8:	08010c1d 	.word	0x08010c1d
 8010bcc:	08010b99 	.word	0x08010b99
 8010bd0:	08010b99 	.word	0x08010b99
 8010bd4:	08010b99 	.word	0x08010b99
 8010bd8:	08010b99 	.word	0x08010b99
 8010bdc:	08010d29 	.word	0x08010d29
 8010be0:	08010c4d 	.word	0x08010c4d
 8010be4:	08010d0b 	.word	0x08010d0b
 8010be8:	08010b99 	.word	0x08010b99
 8010bec:	08010b99 	.word	0x08010b99
 8010bf0:	08010d4b 	.word	0x08010d4b
 8010bf4:	08010b99 	.word	0x08010b99
 8010bf8:	08010c4d 	.word	0x08010c4d
 8010bfc:	08010b99 	.word	0x08010b99
 8010c00:	08010b99 	.word	0x08010b99
 8010c04:	08010d13 	.word	0x08010d13
 8010c08:	680b      	ldr	r3, [r1, #0]
 8010c0a:	1d1a      	adds	r2, r3, #4
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	600a      	str	r2, [r1, #0]
 8010c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e0a3      	b.n	8010d64 <_printf_i+0x1f4>
 8010c1c:	6825      	ldr	r5, [r4, #0]
 8010c1e:	6808      	ldr	r0, [r1, #0]
 8010c20:	062e      	lsls	r6, r5, #24
 8010c22:	f100 0304 	add.w	r3, r0, #4
 8010c26:	d50a      	bpl.n	8010c3e <_printf_i+0xce>
 8010c28:	6805      	ldr	r5, [r0, #0]
 8010c2a:	600b      	str	r3, [r1, #0]
 8010c2c:	2d00      	cmp	r5, #0
 8010c2e:	da03      	bge.n	8010c38 <_printf_i+0xc8>
 8010c30:	232d      	movs	r3, #45	; 0x2d
 8010c32:	426d      	negs	r5, r5
 8010c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c38:	485e      	ldr	r0, [pc, #376]	; (8010db4 <_printf_i+0x244>)
 8010c3a:	230a      	movs	r3, #10
 8010c3c:	e019      	b.n	8010c72 <_printf_i+0x102>
 8010c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010c42:	6805      	ldr	r5, [r0, #0]
 8010c44:	600b      	str	r3, [r1, #0]
 8010c46:	bf18      	it	ne
 8010c48:	b22d      	sxthne	r5, r5
 8010c4a:	e7ef      	b.n	8010c2c <_printf_i+0xbc>
 8010c4c:	680b      	ldr	r3, [r1, #0]
 8010c4e:	6825      	ldr	r5, [r4, #0]
 8010c50:	1d18      	adds	r0, r3, #4
 8010c52:	6008      	str	r0, [r1, #0]
 8010c54:	0628      	lsls	r0, r5, #24
 8010c56:	d501      	bpl.n	8010c5c <_printf_i+0xec>
 8010c58:	681d      	ldr	r5, [r3, #0]
 8010c5a:	e002      	b.n	8010c62 <_printf_i+0xf2>
 8010c5c:	0669      	lsls	r1, r5, #25
 8010c5e:	d5fb      	bpl.n	8010c58 <_printf_i+0xe8>
 8010c60:	881d      	ldrh	r5, [r3, #0]
 8010c62:	4854      	ldr	r0, [pc, #336]	; (8010db4 <_printf_i+0x244>)
 8010c64:	2f6f      	cmp	r7, #111	; 0x6f
 8010c66:	bf0c      	ite	eq
 8010c68:	2308      	moveq	r3, #8
 8010c6a:	230a      	movne	r3, #10
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c72:	6866      	ldr	r6, [r4, #4]
 8010c74:	60a6      	str	r6, [r4, #8]
 8010c76:	2e00      	cmp	r6, #0
 8010c78:	bfa2      	ittt	ge
 8010c7a:	6821      	ldrge	r1, [r4, #0]
 8010c7c:	f021 0104 	bicge.w	r1, r1, #4
 8010c80:	6021      	strge	r1, [r4, #0]
 8010c82:	b90d      	cbnz	r5, 8010c88 <_printf_i+0x118>
 8010c84:	2e00      	cmp	r6, #0
 8010c86:	d04d      	beq.n	8010d24 <_printf_i+0x1b4>
 8010c88:	4616      	mov	r6, r2
 8010c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8010c92:	5dc7      	ldrb	r7, [r0, r7]
 8010c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010c98:	462f      	mov	r7, r5
 8010c9a:	42bb      	cmp	r3, r7
 8010c9c:	460d      	mov	r5, r1
 8010c9e:	d9f4      	bls.n	8010c8a <_printf_i+0x11a>
 8010ca0:	2b08      	cmp	r3, #8
 8010ca2:	d10b      	bne.n	8010cbc <_printf_i+0x14c>
 8010ca4:	6823      	ldr	r3, [r4, #0]
 8010ca6:	07df      	lsls	r7, r3, #31
 8010ca8:	d508      	bpl.n	8010cbc <_printf_i+0x14c>
 8010caa:	6923      	ldr	r3, [r4, #16]
 8010cac:	6861      	ldr	r1, [r4, #4]
 8010cae:	4299      	cmp	r1, r3
 8010cb0:	bfde      	ittt	le
 8010cb2:	2330      	movle	r3, #48	; 0x30
 8010cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010cbc:	1b92      	subs	r2, r2, r6
 8010cbe:	6122      	str	r2, [r4, #16]
 8010cc0:	f8cd a000 	str.w	sl, [sp]
 8010cc4:	464b      	mov	r3, r9
 8010cc6:	aa03      	add	r2, sp, #12
 8010cc8:	4621      	mov	r1, r4
 8010cca:	4640      	mov	r0, r8
 8010ccc:	f7ff fee2 	bl	8010a94 <_printf_common>
 8010cd0:	3001      	adds	r0, #1
 8010cd2:	d14c      	bne.n	8010d6e <_printf_i+0x1fe>
 8010cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd8:	b004      	add	sp, #16
 8010cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cde:	4835      	ldr	r0, [pc, #212]	; (8010db4 <_printf_i+0x244>)
 8010ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ce4:	6823      	ldr	r3, [r4, #0]
 8010ce6:	680e      	ldr	r6, [r1, #0]
 8010ce8:	061f      	lsls	r7, r3, #24
 8010cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8010cee:	600e      	str	r6, [r1, #0]
 8010cf0:	d514      	bpl.n	8010d1c <_printf_i+0x1ac>
 8010cf2:	07d9      	lsls	r1, r3, #31
 8010cf4:	bf44      	itt	mi
 8010cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8010cfa:	6023      	strmi	r3, [r4, #0]
 8010cfc:	b91d      	cbnz	r5, 8010d06 <_printf_i+0x196>
 8010cfe:	6823      	ldr	r3, [r4, #0]
 8010d00:	f023 0320 	bic.w	r3, r3, #32
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	2310      	movs	r3, #16
 8010d08:	e7b0      	b.n	8010c6c <_printf_i+0xfc>
 8010d0a:	6823      	ldr	r3, [r4, #0]
 8010d0c:	f043 0320 	orr.w	r3, r3, #32
 8010d10:	6023      	str	r3, [r4, #0]
 8010d12:	2378      	movs	r3, #120	; 0x78
 8010d14:	4828      	ldr	r0, [pc, #160]	; (8010db8 <_printf_i+0x248>)
 8010d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d1a:	e7e3      	b.n	8010ce4 <_printf_i+0x174>
 8010d1c:	065e      	lsls	r6, r3, #25
 8010d1e:	bf48      	it	mi
 8010d20:	b2ad      	uxthmi	r5, r5
 8010d22:	e7e6      	b.n	8010cf2 <_printf_i+0x182>
 8010d24:	4616      	mov	r6, r2
 8010d26:	e7bb      	b.n	8010ca0 <_printf_i+0x130>
 8010d28:	680b      	ldr	r3, [r1, #0]
 8010d2a:	6826      	ldr	r6, [r4, #0]
 8010d2c:	6960      	ldr	r0, [r4, #20]
 8010d2e:	1d1d      	adds	r5, r3, #4
 8010d30:	600d      	str	r5, [r1, #0]
 8010d32:	0635      	lsls	r5, r6, #24
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	d501      	bpl.n	8010d3c <_printf_i+0x1cc>
 8010d38:	6018      	str	r0, [r3, #0]
 8010d3a:	e002      	b.n	8010d42 <_printf_i+0x1d2>
 8010d3c:	0671      	lsls	r1, r6, #25
 8010d3e:	d5fb      	bpl.n	8010d38 <_printf_i+0x1c8>
 8010d40:	8018      	strh	r0, [r3, #0]
 8010d42:	2300      	movs	r3, #0
 8010d44:	6123      	str	r3, [r4, #16]
 8010d46:	4616      	mov	r6, r2
 8010d48:	e7ba      	b.n	8010cc0 <_printf_i+0x150>
 8010d4a:	680b      	ldr	r3, [r1, #0]
 8010d4c:	1d1a      	adds	r2, r3, #4
 8010d4e:	600a      	str	r2, [r1, #0]
 8010d50:	681e      	ldr	r6, [r3, #0]
 8010d52:	6862      	ldr	r2, [r4, #4]
 8010d54:	2100      	movs	r1, #0
 8010d56:	4630      	mov	r0, r6
 8010d58:	f7ef fa5a 	bl	8000210 <memchr>
 8010d5c:	b108      	cbz	r0, 8010d62 <_printf_i+0x1f2>
 8010d5e:	1b80      	subs	r0, r0, r6
 8010d60:	6060      	str	r0, [r4, #4]
 8010d62:	6863      	ldr	r3, [r4, #4]
 8010d64:	6123      	str	r3, [r4, #16]
 8010d66:	2300      	movs	r3, #0
 8010d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d6c:	e7a8      	b.n	8010cc0 <_printf_i+0x150>
 8010d6e:	6923      	ldr	r3, [r4, #16]
 8010d70:	4632      	mov	r2, r6
 8010d72:	4649      	mov	r1, r9
 8010d74:	4640      	mov	r0, r8
 8010d76:	47d0      	blx	sl
 8010d78:	3001      	adds	r0, #1
 8010d7a:	d0ab      	beq.n	8010cd4 <_printf_i+0x164>
 8010d7c:	6823      	ldr	r3, [r4, #0]
 8010d7e:	079b      	lsls	r3, r3, #30
 8010d80:	d413      	bmi.n	8010daa <_printf_i+0x23a>
 8010d82:	68e0      	ldr	r0, [r4, #12]
 8010d84:	9b03      	ldr	r3, [sp, #12]
 8010d86:	4298      	cmp	r0, r3
 8010d88:	bfb8      	it	lt
 8010d8a:	4618      	movlt	r0, r3
 8010d8c:	e7a4      	b.n	8010cd8 <_printf_i+0x168>
 8010d8e:	2301      	movs	r3, #1
 8010d90:	4632      	mov	r2, r6
 8010d92:	4649      	mov	r1, r9
 8010d94:	4640      	mov	r0, r8
 8010d96:	47d0      	blx	sl
 8010d98:	3001      	adds	r0, #1
 8010d9a:	d09b      	beq.n	8010cd4 <_printf_i+0x164>
 8010d9c:	3501      	adds	r5, #1
 8010d9e:	68e3      	ldr	r3, [r4, #12]
 8010da0:	9903      	ldr	r1, [sp, #12]
 8010da2:	1a5b      	subs	r3, r3, r1
 8010da4:	42ab      	cmp	r3, r5
 8010da6:	dcf2      	bgt.n	8010d8e <_printf_i+0x21e>
 8010da8:	e7eb      	b.n	8010d82 <_printf_i+0x212>
 8010daa:	2500      	movs	r5, #0
 8010dac:	f104 0619 	add.w	r6, r4, #25
 8010db0:	e7f5      	b.n	8010d9e <_printf_i+0x22e>
 8010db2:	bf00      	nop
 8010db4:	080118f1 	.word	0x080118f1
 8010db8:	08011902 	.word	0x08011902

08010dbc <_read_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d07      	ldr	r5, [pc, #28]	; (8010ddc <_read_r+0x20>)
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	4608      	mov	r0, r1
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	602a      	str	r2, [r5, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	f7f1 fef8 	bl	8002bc0 <_read>
 8010dd0:	1c43      	adds	r3, r0, #1
 8010dd2:	d102      	bne.n	8010dda <_read_r+0x1e>
 8010dd4:	682b      	ldr	r3, [r5, #0]
 8010dd6:	b103      	cbz	r3, 8010dda <_read_r+0x1e>
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	20004c50 	.word	0x20004c50

08010de0 <_fstat_r>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	4d07      	ldr	r5, [pc, #28]	; (8010e00 <_fstat_r+0x20>)
 8010de4:	2300      	movs	r3, #0
 8010de6:	4604      	mov	r4, r0
 8010de8:	4608      	mov	r0, r1
 8010dea:	4611      	mov	r1, r2
 8010dec:	602b      	str	r3, [r5, #0]
 8010dee:	f7f1 ff2c 	bl	8002c4a <_fstat>
 8010df2:	1c43      	adds	r3, r0, #1
 8010df4:	d102      	bne.n	8010dfc <_fstat_r+0x1c>
 8010df6:	682b      	ldr	r3, [r5, #0]
 8010df8:	b103      	cbz	r3, 8010dfc <_fstat_r+0x1c>
 8010dfa:	6023      	str	r3, [r4, #0]
 8010dfc:	bd38      	pop	{r3, r4, r5, pc}
 8010dfe:	bf00      	nop
 8010e00:	20004c50 	.word	0x20004c50

08010e04 <_isatty_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4d06      	ldr	r5, [pc, #24]	; (8010e20 <_isatty_r+0x1c>)
 8010e08:	2300      	movs	r3, #0
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	4608      	mov	r0, r1
 8010e0e:	602b      	str	r3, [r5, #0]
 8010e10:	f7f1 ff2b 	bl	8002c6a <_isatty>
 8010e14:	1c43      	adds	r3, r0, #1
 8010e16:	d102      	bne.n	8010e1e <_isatty_r+0x1a>
 8010e18:	682b      	ldr	r3, [r5, #0]
 8010e1a:	b103      	cbz	r3, 8010e1e <_isatty_r+0x1a>
 8010e1c:	6023      	str	r3, [r4, #0]
 8010e1e:	bd38      	pop	{r3, r4, r5, pc}
 8010e20:	20004c50 	.word	0x20004c50

08010e24 <memmove>:
 8010e24:	4288      	cmp	r0, r1
 8010e26:	b510      	push	{r4, lr}
 8010e28:	eb01 0402 	add.w	r4, r1, r2
 8010e2c:	d902      	bls.n	8010e34 <memmove+0x10>
 8010e2e:	4284      	cmp	r4, r0
 8010e30:	4623      	mov	r3, r4
 8010e32:	d807      	bhi.n	8010e44 <memmove+0x20>
 8010e34:	1e43      	subs	r3, r0, #1
 8010e36:	42a1      	cmp	r1, r4
 8010e38:	d008      	beq.n	8010e4c <memmove+0x28>
 8010e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e42:	e7f8      	b.n	8010e36 <memmove+0x12>
 8010e44:	4402      	add	r2, r0
 8010e46:	4601      	mov	r1, r0
 8010e48:	428a      	cmp	r2, r1
 8010e4a:	d100      	bne.n	8010e4e <memmove+0x2a>
 8010e4c:	bd10      	pop	{r4, pc}
 8010e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e56:	e7f7      	b.n	8010e48 <memmove+0x24>

08010e58 <_realloc_r>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	4607      	mov	r7, r0
 8010e5c:	4614      	mov	r4, r2
 8010e5e:	460e      	mov	r6, r1
 8010e60:	b921      	cbnz	r1, 8010e6c <_realloc_r+0x14>
 8010e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010e66:	4611      	mov	r1, r2
 8010e68:	f7fe bf1a 	b.w	800fca0 <_malloc_r>
 8010e6c:	b922      	cbnz	r2, 8010e78 <_realloc_r+0x20>
 8010e6e:	f7ff fb0b 	bl	8010488 <_free_r>
 8010e72:	4625      	mov	r5, r4
 8010e74:	4628      	mov	r0, r5
 8010e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e78:	f000 f814 	bl	8010ea4 <_malloc_usable_size_r>
 8010e7c:	42a0      	cmp	r0, r4
 8010e7e:	d20f      	bcs.n	8010ea0 <_realloc_r+0x48>
 8010e80:	4621      	mov	r1, r4
 8010e82:	4638      	mov	r0, r7
 8010e84:	f7fe ff0c 	bl	800fca0 <_malloc_r>
 8010e88:	4605      	mov	r5, r0
 8010e8a:	2800      	cmp	r0, #0
 8010e8c:	d0f2      	beq.n	8010e74 <_realloc_r+0x1c>
 8010e8e:	4631      	mov	r1, r6
 8010e90:	4622      	mov	r2, r4
 8010e92:	f7fe feee 	bl	800fc72 <memcpy>
 8010e96:	4631      	mov	r1, r6
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f7ff faf5 	bl	8010488 <_free_r>
 8010e9e:	e7e9      	b.n	8010e74 <_realloc_r+0x1c>
 8010ea0:	4635      	mov	r5, r6
 8010ea2:	e7e7      	b.n	8010e74 <_realloc_r+0x1c>

08010ea4 <_malloc_usable_size_r>:
 8010ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ea8:	1f18      	subs	r0, r3, #4
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bfbc      	itt	lt
 8010eae:	580b      	ldrlt	r3, [r1, r0]
 8010eb0:	18c0      	addlt	r0, r0, r3
 8010eb2:	4770      	bx	lr
 8010eb4:	0000      	movs	r0, r0
	...

08010eb8 <log>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	ed2d 8b02 	vpush	{d8}
 8010ebe:	ec55 4b10 	vmov	r4, r5, d0
 8010ec2:	f000 f841 	bl	8010f48 <__ieee754_log>
 8010ec6:	4b1e      	ldr	r3, [pc, #120]	; (8010f40 <log+0x88>)
 8010ec8:	eeb0 8a40 	vmov.f32	s16, s0
 8010ecc:	eef0 8a60 	vmov.f32	s17, s1
 8010ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	d01a      	beq.n	8010f0e <log+0x56>
 8010ed8:	4622      	mov	r2, r4
 8010eda:	462b      	mov	r3, r5
 8010edc:	4620      	mov	r0, r4
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef fe3c 	bl	8000b5c <__aeabi_dcmpun>
 8010ee4:	b998      	cbnz	r0, 8010f0e <log+0x56>
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4620      	mov	r0, r4
 8010eec:	4629      	mov	r1, r5
 8010eee:	f7ef fe2b 	bl	8000b48 <__aeabi_dcmpgt>
 8010ef2:	b960      	cbnz	r0, 8010f0e <log+0x56>
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	4620      	mov	r0, r4
 8010efa:	4629      	mov	r1, r5
 8010efc:	f7ef fdfc 	bl	8000af8 <__aeabi_dcmpeq>
 8010f00:	b160      	cbz	r0, 8010f1c <log+0x64>
 8010f02:	f7fe fd93 	bl	800fa2c <__errno>
 8010f06:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8010f38 <log+0x80>
 8010f0a:	2322      	movs	r3, #34	; 0x22
 8010f0c:	6003      	str	r3, [r0, #0]
 8010f0e:	eeb0 0a48 	vmov.f32	s0, s16
 8010f12:	eef0 0a68 	vmov.f32	s1, s17
 8010f16:	ecbd 8b02 	vpop	{d8}
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	f7fe fd86 	bl	800fa2c <__errno>
 8010f20:	ecbd 8b02 	vpop	{d8}
 8010f24:	2321      	movs	r3, #33	; 0x21
 8010f26:	6003      	str	r3, [r0, #0]
 8010f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f2c:	4805      	ldr	r0, [pc, #20]	; (8010f44 <log+0x8c>)
 8010f2e:	f000 b9c7 	b.w	80112c0 <nan>
 8010f32:	bf00      	nop
 8010f34:	f3af 8000 	nop.w
 8010f38:	00000000 	.word	0x00000000
 8010f3c:	fff00000 	.word	0xfff00000
 8010f40:	20000330 	.word	0x20000330
 8010f44:	080118e5 	.word	0x080118e5

08010f48 <__ieee754_log>:
 8010f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4c:	ec51 0b10 	vmov	r0, r1, d0
 8010f50:	ed2d 8b04 	vpush	{d8-d9}
 8010f54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010f58:	b083      	sub	sp, #12
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	da29      	bge.n	8010fb2 <__ieee754_log+0x6a>
 8010f5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f62:	4303      	orrs	r3, r0
 8010f64:	ee10 2a10 	vmov	r2, s0
 8010f68:	d10c      	bne.n	8010f84 <__ieee754_log+0x3c>
 8010f6a:	49cf      	ldr	r1, [pc, #828]	; (80112a8 <__ieee754_log+0x360>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	2300      	movs	r3, #0
 8010f70:	2000      	movs	r0, #0
 8010f72:	f7ef fc83 	bl	800087c <__aeabi_ddiv>
 8010f76:	ec41 0b10 	vmov	d0, r0, r1
 8010f7a:	b003      	add	sp, #12
 8010f7c:	ecbd 8b04 	vpop	{d8-d9}
 8010f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f84:	2900      	cmp	r1, #0
 8010f86:	da05      	bge.n	8010f94 <__ieee754_log+0x4c>
 8010f88:	460b      	mov	r3, r1
 8010f8a:	f7ef f995 	bl	80002b8 <__aeabi_dsub>
 8010f8e:	2200      	movs	r2, #0
 8010f90:	2300      	movs	r3, #0
 8010f92:	e7ee      	b.n	8010f72 <__ieee754_log+0x2a>
 8010f94:	4bc5      	ldr	r3, [pc, #788]	; (80112ac <__ieee754_log+0x364>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	f7ef fb46 	bl	8000628 <__aeabi_dmul>
 8010f9c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010fa0:	460d      	mov	r5, r1
 8010fa2:	4ac3      	ldr	r2, [pc, #780]	; (80112b0 <__ieee754_log+0x368>)
 8010fa4:	4295      	cmp	r5, r2
 8010fa6:	dd06      	ble.n	8010fb6 <__ieee754_log+0x6e>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	f7ef f986 	bl	80002bc <__adddf3>
 8010fb0:	e7e1      	b.n	8010f76 <__ieee754_log+0x2e>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e7f5      	b.n	8010fa2 <__ieee754_log+0x5a>
 8010fb6:	152c      	asrs	r4, r5, #20
 8010fb8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010fbc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010fc0:	441c      	add	r4, r3
 8010fc2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010fc6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010fd2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010fd6:	ea42 0105 	orr.w	r1, r2, r5
 8010fda:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010fde:	2200      	movs	r2, #0
 8010fe0:	4bb4      	ldr	r3, [pc, #720]	; (80112b4 <__ieee754_log+0x36c>)
 8010fe2:	f7ef f969 	bl	80002b8 <__aeabi_dsub>
 8010fe6:	1cab      	adds	r3, r5, #2
 8010fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	4682      	mov	sl, r0
 8010ff0:	468b      	mov	fp, r1
 8010ff2:	f04f 0200 	mov.w	r2, #0
 8010ff6:	dc53      	bgt.n	80110a0 <__ieee754_log+0x158>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f7ef fd7d 	bl	8000af8 <__aeabi_dcmpeq>
 8010ffe:	b1d0      	cbz	r0, 8011036 <__ieee754_log+0xee>
 8011000:	2c00      	cmp	r4, #0
 8011002:	f000 8122 	beq.w	801124a <__ieee754_log+0x302>
 8011006:	4620      	mov	r0, r4
 8011008:	f7ef faa4 	bl	8000554 <__aeabi_i2d>
 801100c:	a390      	add	r3, pc, #576	; (adr r3, 8011250 <__ieee754_log+0x308>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	4606      	mov	r6, r0
 8011014:	460f      	mov	r7, r1
 8011016:	f7ef fb07 	bl	8000628 <__aeabi_dmul>
 801101a:	a38f      	add	r3, pc, #572	; (adr r3, 8011258 <__ieee754_log+0x310>)
 801101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011020:	4604      	mov	r4, r0
 8011022:	460d      	mov	r5, r1
 8011024:	4630      	mov	r0, r6
 8011026:	4639      	mov	r1, r7
 8011028:	f7ef fafe 	bl	8000628 <__aeabi_dmul>
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	4620      	mov	r0, r4
 8011032:	4629      	mov	r1, r5
 8011034:	e7ba      	b.n	8010fac <__ieee754_log+0x64>
 8011036:	a38a      	add	r3, pc, #552	; (adr r3, 8011260 <__ieee754_log+0x318>)
 8011038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103c:	4650      	mov	r0, sl
 801103e:	4659      	mov	r1, fp
 8011040:	f7ef faf2 	bl	8000628 <__aeabi_dmul>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	2000      	movs	r0, #0
 801104a:	499b      	ldr	r1, [pc, #620]	; (80112b8 <__ieee754_log+0x370>)
 801104c:	f7ef f934 	bl	80002b8 <__aeabi_dsub>
 8011050:	4652      	mov	r2, sl
 8011052:	4606      	mov	r6, r0
 8011054:	460f      	mov	r7, r1
 8011056:	465b      	mov	r3, fp
 8011058:	4650      	mov	r0, sl
 801105a:	4659      	mov	r1, fp
 801105c:	f7ef fae4 	bl	8000628 <__aeabi_dmul>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4630      	mov	r0, r6
 8011066:	4639      	mov	r1, r7
 8011068:	f7ef fade 	bl	8000628 <__aeabi_dmul>
 801106c:	4606      	mov	r6, r0
 801106e:	460f      	mov	r7, r1
 8011070:	b914      	cbnz	r4, 8011078 <__ieee754_log+0x130>
 8011072:	4632      	mov	r2, r6
 8011074:	463b      	mov	r3, r7
 8011076:	e0a2      	b.n	80111be <__ieee754_log+0x276>
 8011078:	4620      	mov	r0, r4
 801107a:	f7ef fa6b 	bl	8000554 <__aeabi_i2d>
 801107e:	a374      	add	r3, pc, #464	; (adr r3, 8011250 <__ieee754_log+0x308>)
 8011080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011084:	4680      	mov	r8, r0
 8011086:	4689      	mov	r9, r1
 8011088:	f7ef face 	bl	8000628 <__aeabi_dmul>
 801108c:	a372      	add	r3, pc, #456	; (adr r3, 8011258 <__ieee754_log+0x310>)
 801108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011092:	4604      	mov	r4, r0
 8011094:	460d      	mov	r5, r1
 8011096:	4640      	mov	r0, r8
 8011098:	4649      	mov	r1, r9
 801109a:	f7ef fac5 	bl	8000628 <__aeabi_dmul>
 801109e:	e0a7      	b.n	80111f0 <__ieee754_log+0x2a8>
 80110a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110a4:	f7ef f90a 	bl	80002bc <__adddf3>
 80110a8:	4602      	mov	r2, r0
 80110aa:	460b      	mov	r3, r1
 80110ac:	4650      	mov	r0, sl
 80110ae:	4659      	mov	r1, fp
 80110b0:	f7ef fbe4 	bl	800087c <__aeabi_ddiv>
 80110b4:	ec41 0b18 	vmov	d8, r0, r1
 80110b8:	4620      	mov	r0, r4
 80110ba:	f7ef fa4b 	bl	8000554 <__aeabi_i2d>
 80110be:	ec53 2b18 	vmov	r2, r3, d8
 80110c2:	ec41 0b19 	vmov	d9, r0, r1
 80110c6:	ec51 0b18 	vmov	r0, r1, d8
 80110ca:	f7ef faad 	bl	8000628 <__aeabi_dmul>
 80110ce:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80110d2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	4680      	mov	r8, r0
 80110de:	4689      	mov	r9, r1
 80110e0:	f7ef faa2 	bl	8000628 <__aeabi_dmul>
 80110e4:	a360      	add	r3, pc, #384	; (adr r3, 8011268 <__ieee754_log+0x320>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	4606      	mov	r6, r0
 80110ec:	460f      	mov	r7, r1
 80110ee:	f7ef fa9b 	bl	8000628 <__aeabi_dmul>
 80110f2:	a35f      	add	r3, pc, #380	; (adr r3, 8011270 <__ieee754_log+0x328>)
 80110f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f8:	f7ef f8e0 	bl	80002bc <__adddf3>
 80110fc:	4632      	mov	r2, r6
 80110fe:	463b      	mov	r3, r7
 8011100:	f7ef fa92 	bl	8000628 <__aeabi_dmul>
 8011104:	a35c      	add	r3, pc, #368	; (adr r3, 8011278 <__ieee754_log+0x330>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	f7ef f8d7 	bl	80002bc <__adddf3>
 801110e:	4632      	mov	r2, r6
 8011110:	463b      	mov	r3, r7
 8011112:	f7ef fa89 	bl	8000628 <__aeabi_dmul>
 8011116:	a35a      	add	r3, pc, #360	; (adr r3, 8011280 <__ieee754_log+0x338>)
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	f7ef f8ce 	bl	80002bc <__adddf3>
 8011120:	4642      	mov	r2, r8
 8011122:	464b      	mov	r3, r9
 8011124:	f7ef fa80 	bl	8000628 <__aeabi_dmul>
 8011128:	a357      	add	r3, pc, #348	; (adr r3, 8011288 <__ieee754_log+0x340>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	4680      	mov	r8, r0
 8011130:	4689      	mov	r9, r1
 8011132:	4630      	mov	r0, r6
 8011134:	4639      	mov	r1, r7
 8011136:	f7ef fa77 	bl	8000628 <__aeabi_dmul>
 801113a:	a355      	add	r3, pc, #340	; (adr r3, 8011290 <__ieee754_log+0x348>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef f8bc 	bl	80002bc <__adddf3>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	f7ef fa6e 	bl	8000628 <__aeabi_dmul>
 801114c:	a352      	add	r3, pc, #328	; (adr r3, 8011298 <__ieee754_log+0x350>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef f8b3 	bl	80002bc <__adddf3>
 8011156:	4632      	mov	r2, r6
 8011158:	463b      	mov	r3, r7
 801115a:	f7ef fa65 	bl	8000628 <__aeabi_dmul>
 801115e:	460b      	mov	r3, r1
 8011160:	4602      	mov	r2, r0
 8011162:	4649      	mov	r1, r9
 8011164:	4640      	mov	r0, r8
 8011166:	f7ef f8a9 	bl	80002bc <__adddf3>
 801116a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	3551      	adds	r5, #81	; 0x51
 8011172:	431d      	orrs	r5, r3
 8011174:	2d00      	cmp	r5, #0
 8011176:	4680      	mov	r8, r0
 8011178:	4689      	mov	r9, r1
 801117a:	dd48      	ble.n	801120e <__ieee754_log+0x2c6>
 801117c:	4b4e      	ldr	r3, [pc, #312]	; (80112b8 <__ieee754_log+0x370>)
 801117e:	2200      	movs	r2, #0
 8011180:	4650      	mov	r0, sl
 8011182:	4659      	mov	r1, fp
 8011184:	f7ef fa50 	bl	8000628 <__aeabi_dmul>
 8011188:	4652      	mov	r2, sl
 801118a:	465b      	mov	r3, fp
 801118c:	f7ef fa4c 	bl	8000628 <__aeabi_dmul>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4606      	mov	r6, r0
 8011196:	460f      	mov	r7, r1
 8011198:	4640      	mov	r0, r8
 801119a:	4649      	mov	r1, r9
 801119c:	f7ef f88e 	bl	80002bc <__adddf3>
 80111a0:	ec53 2b18 	vmov	r2, r3, d8
 80111a4:	f7ef fa40 	bl	8000628 <__aeabi_dmul>
 80111a8:	4680      	mov	r8, r0
 80111aa:	4689      	mov	r9, r1
 80111ac:	b964      	cbnz	r4, 80111c8 <__ieee754_log+0x280>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4630      	mov	r0, r6
 80111b4:	4639      	mov	r1, r7
 80111b6:	f7ef f87f 	bl	80002b8 <__aeabi_dsub>
 80111ba:	4602      	mov	r2, r0
 80111bc:	460b      	mov	r3, r1
 80111be:	4650      	mov	r0, sl
 80111c0:	4659      	mov	r1, fp
 80111c2:	f7ef f879 	bl	80002b8 <__aeabi_dsub>
 80111c6:	e6d6      	b.n	8010f76 <__ieee754_log+0x2e>
 80111c8:	a321      	add	r3, pc, #132	; (adr r3, 8011250 <__ieee754_log+0x308>)
 80111ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ce:	ec51 0b19 	vmov	r0, r1, d9
 80111d2:	f7ef fa29 	bl	8000628 <__aeabi_dmul>
 80111d6:	a320      	add	r3, pc, #128	; (adr r3, 8011258 <__ieee754_log+0x310>)
 80111d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111dc:	4604      	mov	r4, r0
 80111de:	460d      	mov	r5, r1
 80111e0:	ec51 0b19 	vmov	r0, r1, d9
 80111e4:	f7ef fa20 	bl	8000628 <__aeabi_dmul>
 80111e8:	4642      	mov	r2, r8
 80111ea:	464b      	mov	r3, r9
 80111ec:	f7ef f866 	bl	80002bc <__adddf3>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4630      	mov	r0, r6
 80111f6:	4639      	mov	r1, r7
 80111f8:	f7ef f85e 	bl	80002b8 <__aeabi_dsub>
 80111fc:	4652      	mov	r2, sl
 80111fe:	465b      	mov	r3, fp
 8011200:	f7ef f85a 	bl	80002b8 <__aeabi_dsub>
 8011204:	4602      	mov	r2, r0
 8011206:	460b      	mov	r3, r1
 8011208:	4620      	mov	r0, r4
 801120a:	4629      	mov	r1, r5
 801120c:	e7d9      	b.n	80111c2 <__ieee754_log+0x27a>
 801120e:	4602      	mov	r2, r0
 8011210:	460b      	mov	r3, r1
 8011212:	4650      	mov	r0, sl
 8011214:	4659      	mov	r1, fp
 8011216:	f7ef f84f 	bl	80002b8 <__aeabi_dsub>
 801121a:	ec53 2b18 	vmov	r2, r3, d8
 801121e:	f7ef fa03 	bl	8000628 <__aeabi_dmul>
 8011222:	4606      	mov	r6, r0
 8011224:	460f      	mov	r7, r1
 8011226:	2c00      	cmp	r4, #0
 8011228:	f43f af23 	beq.w	8011072 <__ieee754_log+0x12a>
 801122c:	a308      	add	r3, pc, #32	; (adr r3, 8011250 <__ieee754_log+0x308>)
 801122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011232:	ec51 0b19 	vmov	r0, r1, d9
 8011236:	f7ef f9f7 	bl	8000628 <__aeabi_dmul>
 801123a:	a307      	add	r3, pc, #28	; (adr r3, 8011258 <__ieee754_log+0x310>)
 801123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011240:	4604      	mov	r4, r0
 8011242:	460d      	mov	r5, r1
 8011244:	ec51 0b19 	vmov	r0, r1, d9
 8011248:	e727      	b.n	801109a <__ieee754_log+0x152>
 801124a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80112a0 <__ieee754_log+0x358>
 801124e:	e694      	b.n	8010f7a <__ieee754_log+0x32>
 8011250:	fee00000 	.word	0xfee00000
 8011254:	3fe62e42 	.word	0x3fe62e42
 8011258:	35793c76 	.word	0x35793c76
 801125c:	3dea39ef 	.word	0x3dea39ef
 8011260:	55555555 	.word	0x55555555
 8011264:	3fd55555 	.word	0x3fd55555
 8011268:	df3e5244 	.word	0xdf3e5244
 801126c:	3fc2f112 	.word	0x3fc2f112
 8011270:	96cb03de 	.word	0x96cb03de
 8011274:	3fc74664 	.word	0x3fc74664
 8011278:	94229359 	.word	0x94229359
 801127c:	3fd24924 	.word	0x3fd24924
 8011280:	55555593 	.word	0x55555593
 8011284:	3fe55555 	.word	0x3fe55555
 8011288:	d078c69f 	.word	0xd078c69f
 801128c:	3fc39a09 	.word	0x3fc39a09
 8011290:	1d8e78af 	.word	0x1d8e78af
 8011294:	3fcc71c5 	.word	0x3fcc71c5
 8011298:	9997fa04 	.word	0x9997fa04
 801129c:	3fd99999 	.word	0x3fd99999
	...
 80112a8:	c3500000 	.word	0xc3500000
 80112ac:	43500000 	.word	0x43500000
 80112b0:	7fefffff 	.word	0x7fefffff
 80112b4:	3ff00000 	.word	0x3ff00000
 80112b8:	3fe00000 	.word	0x3fe00000
 80112bc:	00000000 	.word	0x00000000

080112c0 <nan>:
 80112c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112c8 <nan+0x8>
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	00000000 	.word	0x00000000
 80112cc:	7ff80000 	.word	0x7ff80000

080112d0 <_init>:
 80112d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112d2:	bf00      	nop
 80112d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112d6:	bc08      	pop	{r3}
 80112d8:	469e      	mov	lr, r3
 80112da:	4770      	bx	lr

080112dc <_fini>:
 80112dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112de:	bf00      	nop
 80112e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112e2:	bc08      	pop	{r3}
 80112e4:	469e      	mov	lr, r3
 80112e6:	4770      	bx	lr
